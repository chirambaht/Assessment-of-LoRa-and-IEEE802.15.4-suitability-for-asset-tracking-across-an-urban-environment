
LoraBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08006bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006bd8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b07c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d9a  00000000  00000000  0002b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ecb9  00000000  00000000  0002e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090bd  00000000  00000000  0003d001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004b864  00000000  00000000  000460be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  000919a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068f0 	.word	0x080068f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080068f0 	.word	0x080068f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <mrf_read_short>:

static mrf_rx_info_t mrf_rx_info;
static mrf_tx_info_t mrf_tx_info;


uint8_t mrf_read_short(uint8_t address) {
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	701a      	strb	r2, [r3, #0]
    mrf_select();
 8000618:	f001 fb68 	bl	8001cec <mrf_select>
    // 0 top for short addressing, 0 bottom for read
    spi_tx(address<<1 & 0b01111110);
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	227e      	movs	r2, #126	; 0x7e
 8000626:	4013      	ands	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fb7c 	bl	8001d28 <spi_tx>
    uint8_t res = spi_tx(0x0);
 8000630:	250f      	movs	r5, #15
 8000632:	197c      	adds	r4, r7, r5
 8000634:	2000      	movs	r0, #0
 8000636:	f001 fb77 	bl	8001d28 <spi_tx>
 800063a:	0003      	movs	r3, r0
 800063c:	7023      	strb	r3, [r4, #0]
    mrf_deselect();
 800063e:	f001 fb65 	bl	8001d0c <mrf_deselect>
    return res;
 8000642:	197b      	adds	r3, r7, r5
 8000644:	781b      	ldrb	r3, [r3, #0]
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bdb0      	pop	{r4, r5, r7, pc}

0800064e <mrf_read_long>:

uint8_t mrf_read_long(uint16_t address) {
 800064e:	b5b0      	push	{r4, r5, r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	0002      	movs	r2, r0
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	801a      	strh	r2, [r3, #0]
    mrf_select();
 800065a:	f001 fb47 	bl	8001cec <mrf_select>
    uint8_t ahigh = address >> 3;
 800065e:	1dbb      	adds	r3, r7, #6
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	b29a      	uxth	r2, r3
 8000666:	210f      	movs	r1, #15
 8000668:	187b      	adds	r3, r7, r1
 800066a:	701a      	strb	r2, [r3, #0]
    uint8_t alow = address << 5;
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	240e      	movs	r4, #14
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0152      	lsls	r2, r2, #5
 8000678:	701a      	strb	r2, [r3, #0]
    spi_tx(0x80 | ahigh);  // high bit for long
 800067a:	187b      	adds	r3, r7, r1
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	4252      	negs	r2, r2
 8000682:	4313      	orrs	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fb4e 	bl	8001d28 <spi_tx>
    spi_tx(alow);
 800068c:	193b      	adds	r3, r7, r4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fb49 	bl	8001d28 <spi_tx>
    uint8_t res = spi_tx(0);
 8000696:	250d      	movs	r5, #13
 8000698:	197c      	adds	r4, r7, r5
 800069a:	2000      	movs	r0, #0
 800069c:	f001 fb44 	bl	8001d28 <spi_tx>
 80006a0:	0003      	movs	r3, r0
 80006a2:	7023      	strb	r3, [r4, #0]
    mrf_deselect();
 80006a4:	f001 fb32 	bl	8001d0c <mrf_deselect>
    return res;
 80006a8:	197b      	adds	r3, r7, r5
 80006aa:	781b      	ldrb	r3, [r3, #0]
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bdb0      	pop	{r4, r5, r7, pc}

080006b4 <mrf_write_short>:


void mrf_write_short(uint8_t address, uint8_t data) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	701a      	strb	r2, [r3, #0]
    mrf_select();
 80006c6:	f001 fb11 	bl	8001cec <mrf_select>
    // 0 for top address, 1 bottom for write
    spi_tx((address<<1 & 0b01111110) | 0x01);
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	227e      	movs	r2, #126	; 0x7e
 80006d4:	4013      	ands	r3, r2
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	2201      	movs	r2, #1
 80006da:	4313      	orrs	r3, r2
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fb21 	bl	8001d28 <spi_tx>
    spi_tx(data);
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fb1c 	bl	8001d28 <spi_tx>
    mrf_deselect();
 80006f0:	f001 fb0c 	bl	8001d0c <mrf_deselect>
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b002      	add	sp, #8
 80006fa:	bd80      	pop	{r7, pc}

080006fc <mrf_write_long>:

void mrf_write_long(uint16_t address, uint8_t data) {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dbb      	adds	r3, r7, #6
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	1d7b      	adds	r3, r7, #5
 800070a:	1c0a      	adds	r2, r1, #0
 800070c:	701a      	strb	r2, [r3, #0]
    mrf_select();
 800070e:	f001 faed 	bl	8001cec <mrf_select>
    uint8_t ahigh = address >> 3;
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	b29a      	uxth	r2, r3
 800071a:	210f      	movs	r1, #15
 800071c:	187b      	adds	r3, r7, r1
 800071e:	701a      	strb	r2, [r3, #0]
    uint8_t alow = address << 5;
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	240e      	movs	r4, #14
 8000728:	193b      	adds	r3, r7, r4
 800072a:	0152      	lsls	r2, r2, #5
 800072c:	701a      	strb	r2, [r3, #0]
    spi_tx(0x80 | ahigh);  // high bit for long
 800072e:	187b      	adds	r3, r7, r1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	4252      	negs	r2, r2
 8000736:	4313      	orrs	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	0018      	movs	r0, r3
 800073c:	f001 faf4 	bl	8001d28 <spi_tx>
    spi_tx(alow | 0x10);  // last bit for write
 8000740:	193b      	adds	r3, r7, r4
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2210      	movs	r2, #16
 8000746:	4313      	orrs	r3, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	0018      	movs	r0, r3
 800074c:	f001 faec 	bl	8001d28 <spi_tx>
    spi_tx(data);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fae7 	bl	8001d28 <spi_tx>
    mrf_deselect();
 800075a:	f001 fad7 	bl	8001d0c <mrf_deselect>
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b005      	add	sp, #20
 8000764:	bd90      	pop	{r4, r7, pc}

08000766 <mrf_pan_read>:

uint16_t mrf_pan_read(void) {
 8000766:	b590      	push	{r4, r7, lr}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
    uint8_t panh = mrf_read_short(MRF_PANIDH);
 800076c:	1dfc      	adds	r4, r7, #7
 800076e:	2002      	movs	r0, #2
 8000770:	f7ff ff4c 	bl	800060c <mrf_read_short>
 8000774:	0003      	movs	r3, r0
 8000776:	7023      	strb	r3, [r4, #0]
    return panh << 8 | mrf_read_short(MRF_PANIDL);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21c      	sxth	r4, r3
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ff43 	bl	800060c <mrf_read_short>
 8000786:	0003      	movs	r3, r0
 8000788:	b21b      	sxth	r3, r3
 800078a:	4323      	orrs	r3, r4
 800078c:	b21b      	sxth	r3, r3
 800078e:	b29b      	uxth	r3, r3
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b003      	add	sp, #12
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <mrf_pan_write>:

void mrf_pan_write(uint16_t panid) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	801a      	strh	r2, [r3, #0]
    mrf_write_short(MRF_PANIDH, panid >> 8);
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	0019      	movs	r1, r3
 80007b0:	2002      	movs	r0, #2
 80007b2:	f7ff ff7f 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_PANIDL, panid & 0xff);
 80007b6:	1dbb      	adds	r3, r7, #6
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	0019      	movs	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff78 	bl	80006b4 <mrf_write_short>
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <mrf_set_ignorebytes>:

void mrf_set_ignorebytes(uint8_t count) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	0002      	movs	r2, r0
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	701a      	strb	r2, [r3, #0]
    ignore_bytes = count;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <mrf_set_ignorebytes+0x1c>)
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000010b 	.word	0x2000010b

080007ec <mrf_address16_write>:

void mrf_address16_write(uint16_t address16) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	801a      	strh	r2, [r3, #0]
    mrf_write_short(MRF_SADRH, address16 >> 8);
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	0019      	movs	r1, r3
 8000804:	2004      	movs	r0, #4
 8000806:	f7ff ff55 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_SADRL, address16 & 0xff);
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	0019      	movs	r1, r3
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff ff4e 	bl	80006b4 <mrf_write_short>
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <mrf_address16_read>:

uint16_t mrf_address16_read(void) {
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
    uint8_t a16h = mrf_read_short(MRF_SADRH);
 8000826:	1dfc      	adds	r4, r7, #7
 8000828:	2004      	movs	r0, #4
 800082a:	f7ff feef 	bl	800060c <mrf_read_short>
 800082e:	0003      	movs	r3, r0
 8000830:	7023      	strb	r3, [r4, #0]
    return a16h << 8 | mrf_read_short(MRF_SADRL);
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21c      	sxth	r4, r3
 800083a:	2003      	movs	r0, #3
 800083c:	f7ff fee6 	bl	800060c <mrf_read_short>
 8000840:	0003      	movs	r3, r0
 8000842:	b21b      	sxth	r3, r3
 8000844:	4323      	orrs	r3, r4
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b003      	add	sp, #12
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <mrf_promiscuous>:

void mrf_promiscuous(uint8_t enabled) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	0002      	movs	r2, r0
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	701a      	strb	r2, [r3, #0]
    // TODO - a tad ugly, this should really do a read modify write
    if (enabled) {
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <mrf_promiscuous+0x1e>
        mrf_write_short(MRF_RXMCR, 0x01);
 8000866:	2101      	movs	r1, #1
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ff23 	bl	80006b4 <mrf_write_short>
    } else {
        mrf_write_short(MRF_RXMCR, 0x00);
    }
}
 800086e:	e003      	b.n	8000878 <mrf_promiscuous+0x26>
        mrf_write_short(MRF_RXMCR, 0x00);
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff1e 	bl	80006b4 <mrf_write_short>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}

08000880 <mrf_send16>:

/**
 * Simple send 16, with acks, not much of anything.. assumes src16 and local pan only.
 * @param data
 */
void mrf_send16(uint16_t dest16, uint8_t len, char * data) {
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	603a      	str	r2, [r7, #0]
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	1c02      	adds	r2, r0, #0
 800088c:	801a      	strh	r2, [r3, #0]
 800088e:	1d7b      	adds	r3, r7, #5
 8000890:	1c0a      	adds	r2, r1, #0
 8000892:	701a      	strb	r2, [r3, #0]

    int i = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
    mrf_write_long(i++, 9);  // header length
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	617a      	str	r2, [r7, #20]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2109      	movs	r1, #9
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff ff2a 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, 9+ignore_bytes+len);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	617a      	str	r2, [r7, #20]
 80008ae:	b298      	uxth	r0, r3
 80008b0:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <mrf_send16+0x170>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	1d7b      	adds	r3, r7, #5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3309      	adds	r3, #9
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	0019      	movs	r1, r3
 80008c2:	f7ff ff1b 	bl	80006fc <mrf_write_long>

// 0 | pan compression | ack | no security | no data pending | data frame[3 bits]
//    mrf_write_long(i++, 0b01100001); // first byte of Frame Control
    mrf_write_long(i++, 0b01000001); // first byte of Frame Control
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	617a      	str	r2, [r7, #20]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	2141      	movs	r1, #65	; 0x41
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff13 	bl	80006fc <mrf_write_long>

// 16 bit source, 802.15.4 (2003), 16 bit dest,
    mrf_write_long(i++, 0b10001000); // second byte of frame control
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	617a      	str	r2, [r7, #20]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	2188      	movs	r1, #136	; 0x88
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ff0b 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, 1);  // sequence number 1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	617a      	str	r2, [r7, #20]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	2101      	movs	r1, #1
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff03 	bl	80006fc <mrf_write_long>

    uint16_t panid = mrf_pan_read();
 80008f6:	240e      	movs	r4, #14
 80008f8:	0025      	movs	r5, r4
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f7ff ff33 	bl	8000766 <mrf_pan_read>
 8000900:	0003      	movs	r3, r0
 8000902:	8023      	strh	r3, [r4, #0]

    mrf_write_long(i++, panid & 0xff);  // dest panid
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	617a      	str	r2, [r7, #20]
 800090a:	b29a      	uxth	r2, r3
 800090c:	002c      	movs	r4, r5
 800090e:	193b      	adds	r3, r7, r4
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	0019      	movs	r1, r3
 8000916:	0010      	movs	r0, r2
 8000918:	f7ff fef0 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, panid >> 8);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	617a      	str	r2, [r7, #20]
 8000922:	b29a      	uxth	r2, r3
 8000924:	193b      	adds	r3, r7, r4
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f7ff fee3 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, dest16 & 0xff);  // dest16 low
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	617a      	str	r2, [r7, #20]
 800093c:	b29a      	uxth	r2, r3
 800093e:	1dbb      	adds	r3, r7, #6
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	0019      	movs	r1, r3
 8000946:	0010      	movs	r0, r2
 8000948:	f7ff fed8 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, dest16 >> 8); // dest16 high
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	617a      	str	r2, [r7, #20]
 8000952:	b29a      	uxth	r2, r3
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	0019      	movs	r1, r3
 8000960:	0010      	movs	r0, r2
 8000962:	f7ff fecb 	bl	80006fc <mrf_write_long>

    uint16_t src16 = mrf_address16_read();
 8000966:	240c      	movs	r4, #12
 8000968:	0025      	movs	r5, r4
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f7ff ff58 	bl	8000820 <mrf_address16_read>
 8000970:	0003      	movs	r3, r0
 8000972:	8023      	strh	r3, [r4, #0]
    mrf_write_long(i++, src16 & 0xff); // src16 low
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	617a      	str	r2, [r7, #20]
 800097a:	b29a      	uxth	r2, r3
 800097c:	002c      	movs	r4, r5
 800097e:	193b      	adds	r3, r7, r4
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f7ff feb8 	bl	80006fc <mrf_write_long>
    mrf_write_long(i++, src16 >> 8); // src16 high
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	617a      	str	r2, [r7, #20]
 8000992:	b29a      	uxth	r2, r3
 8000994:	193b      	adds	r3, r7, r4
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b29b      	uxth	r3, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	0019      	movs	r1, r3
 80009a0:	0010      	movs	r0, r2
 80009a2:	f7ff feab 	bl	80006fc <mrf_write_long>

    /*
     * This is used to adjust for Maxstream headers inserted between
     * 802.15.4. headers and data payload.
     */
    i += ignore_bytes;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <mrf_send16+0x170>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	001a      	movs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	189b      	adds	r3, r3, r2
 80009b0:	617b      	str	r3, [r7, #20]
    for (int q = 0; q < len; q++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	e00d      	b.n	80009d4 <mrf_send16+0x154>
        mrf_write_long(i++, data[q]);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	617a      	str	r2, [r7, #20]
 80009be:	b298      	uxth	r0, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0019      	movs	r1, r3
 80009ca:	f7ff fe97 	bl	80006fc <mrf_write_long>
    for (int q = 0; q < len; q++) {
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	3301      	adds	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	1d7b      	adds	r3, r7, #5
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbec      	blt.n	80009b8 <mrf_send16+0x138>
    }
    // ack on, and go!
//    mrf_write_short(MRF_TXNCON, (1<<MRF_TXNACKREQ | 1<<MRF_TXNTRIG));
    mrf_write_short(MRF_TXNCON, (1<<MRF_TXNTRIG));
 80009de:	2101      	movs	r1, #1
 80009e0:	201b      	movs	r0, #27
 80009e2:	f7ff fe67 	bl	80006b4 <mrf_write_short>
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b006      	add	sp, #24
 80009ec:	bdb0      	pop	{r4, r5, r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	2000010b 	.word	0x2000010b

080009f4 <mrf_set_interrupts>:

void mrf_set_interrupts(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    // interrupts for rx and tx normal complete
    mrf_write_short(MRF_INTCON, 0b11110110);
 80009f8:	21f6      	movs	r1, #246	; 0xf6
 80009fa:	2032      	movs	r0, #50	; 0x32
 80009fc:	f7ff fe5a 	bl	80006b4 <mrf_write_short>
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <mrf_set_channel>:

// Set the channel to 12, 2.41Ghz, xbee channel 0xC
void mrf_set_channel(void) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
    mrf_write_long(MRF_RFCON0, 0x13);
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	2113      	movs	r1, #19
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fe73 	bl	80006fc <mrf_write_long>
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <mrf_init>:

void mrf_init(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
 // Seems a bit ridiculous when I use reset pin anyway
    mrf_write_short(MRF_SOFTRST, 0x7); // from manual
 8000a20:	2107      	movs	r1, #7
 8000a22:	202a      	movs	r0, #42	; 0x2a
 8000a24:	f7ff fe46 	bl	80006b4 <mrf_write_short>
    while (mrf_read_short(MRF_SOFTRST) & 0x7 != 0) {
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	202a      	movs	r0, #42	; 0x2a
 8000a2c:	f7ff fdee 	bl	800060c <mrf_read_short>
 8000a30:	0003      	movs	r3, r0
 8000a32:	001a      	movs	r2, r3
 8000a34:	2301      	movs	r3, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	d1f7      	bne.n	8000a2a <mrf_init+0xe>
        ; // wait for soft reset to finish
    }

    mrf_write_short(MRF_PACON2, 0x98); // – Initialize FIFOEN = 1 and TXONTS = 0x6.
 8000a3a:	2198      	movs	r1, #152	; 0x98
 8000a3c:	2018      	movs	r0, #24
 8000a3e:	f7ff fe39 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_TXSTBL, 0x95); // – Initialize RFSTBL = 0x9.
 8000a42:	2195      	movs	r1, #149	; 0x95
 8000a44:	202e      	movs	r0, #46	; 0x2e
 8000a46:	f7ff fe35 	bl	80006b4 <mrf_write_short>

    mrf_write_long(MRF_RFCON0, 0x03); // – Initialize RFOPT = 0x03.
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	2103      	movs	r1, #3
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fe53 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_RFCON1, 0x01); // – Initialize VCOOPT = 0x02.
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <mrf_init+0xb8>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fe4e 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_RFCON2, 0x80); // – Enable PLL (PLLEN = 1).
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <mrf_init+0xbc>)
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fe49 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_RFCON6, 0x90); // – Initialize TXFIL = 1 and 20MRECVR = 1.
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <mrf_init+0xc0>)
 8000a6c:	2190      	movs	r1, #144	; 0x90
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fe44 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_RFCON7, 0x80); // – Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator).
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <mrf_init+0xc4>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fe3f 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_RFCON8, 0x10); // – Initialize RFVCO = 1.
 8000a7e:	2382      	movs	r3, #130	; 0x82
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	2110      	movs	r1, #16
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fe39 	bl	80006fc <mrf_write_long>
    mrf_write_long(MRF_SLPCON1, 0x21); // – Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01.
 8000a8a:	2388      	movs	r3, #136	; 0x88
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	2121      	movs	r1, #33	; 0x21
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fe33 	bl	80006fc <mrf_write_long>

    //  Configuration for nonbeacon-enabled devices (see Section 3.8 “Beacon-Enabled and Nonbeacon-Enabled Networks”):
    mrf_write_short(MRF_BBREG2, 0x80); // Set CCA mode to ED
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	203a      	movs	r0, #58	; 0x3a
 8000a9a:	f7ff fe0b 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_CCAEDTH, 0x60); // – Set CCA ED threshold.
 8000a9e:	2160      	movs	r1, #96	; 0x60
 8000aa0:	203f      	movs	r0, #63	; 0x3f
 8000aa2:	f7ff fe07 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_BBREG6, 0x40); // – Set appended RSSI value to RXFIFO.
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	203e      	movs	r0, #62	; 0x3e
 8000aaa:	f7ff fe03 	bl	80006b4 <mrf_write_short>
    mrf_set_interrupts();
 8000aae:	f7ff ffa1 	bl	80009f4 <mrf_set_interrupts>
    mrf_set_channel();
 8000ab2:	f7ff ffa8 	bl	8000a06 <mrf_set_channel>
    // max power is by default.. just leave it...
    //Set transmitter power - See “REGISTER 2-62: RF CONTROL 3 REGISTER (ADDRESS: 0x203)”.
    mrf_write_short(MRF_RFCTL, 0x04); //  – Reset RF state machine.
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	2036      	movs	r0, #54	; 0x36
 8000aba:	f7ff fdfb 	bl	80006b4 <mrf_write_short>
    mrf_write_short(MRF_RFCTL, 0x00); // part 2
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2036      	movs	r0, #54	; 0x36
 8000ac2:	f7ff fdf7 	bl	80006b4 <mrf_write_short>
    _delay_ms(1); // delay at least 192usec
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f001 f946 	bl	8001d58 <_delay_ms>
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	00000201 	.word	0x00000201
 8000ad8:	00000202 	.word	0x00000202
 8000adc:	00000206 	.word	0x00000206
 8000ae0:	00000207 	.word	0x00000207

08000ae4 <mrf_interrupt_handler>:
 * Otherwise, you run the risk of having a new packet trample all over the current packet.
 * (TODO: why is this so hard to get right?!)
 *
 * Note, this is really only a problem in promiscuous mode...
 */
void mrf_interrupt_handler(void) {
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 8000aea:	250b      	movs	r5, #11
 8000aec:	197c      	adds	r4, r7, r5
 8000aee:	2031      	movs	r0, #49	; 0x31
 8000af0:	f7ff fd8c 	bl	800060c <mrf_read_short>
 8000af4:	0003      	movs	r3, r0
 8000af6:	7023      	strb	r3, [r4, #0]
    if (last_interrupt & MRF_I_RXIF) {
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4013      	ands	r3, r2
 8000b00:	d100      	bne.n	8000b04 <mrf_interrupt_handler+0x20>
 8000b02:	e0b2      	b.n	8000c6a <mrf_interrupt_handler+0x186>
        flag_got_rx++;
 8000b04:	4b70      	ldr	r3, [pc, #448]	; (8000cc8 <mrf_interrupt_handler+0x1e4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b6e      	ldr	r3, [pc, #440]	; (8000cc8 <mrf_interrupt_handler+0x1e4>)
 8000b10:	701a      	strb	r2, [r3, #0]
        // read out the packet data...
        mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 8000b12:	2104      	movs	r1, #4
 8000b14:	2039      	movs	r0, #57	; 0x39
 8000b16:	f7ff fdcd 	bl	80006b4 <mrf_write_short>
        uint8_t frame_length = mrf_read_long(0x300);  // read start of rxfifo for
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	18fc      	adds	r4, r7, r3
 8000b1e:	23c0      	movs	r3, #192	; 0xc0
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fd93 	bl	800064e <mrf_read_long>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	7023      	strb	r3, [r4, #0]

        uint16_t frame_control = mrf_read_long(0x301);
 8000b2c:	4b67      	ldr	r3, [pc, #412]	; (8000ccc <mrf_interrupt_handler+0x1e8>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fd8d 	bl	800064e <mrf_read_long>
 8000b34:	0003      	movs	r3, r0
 8000b36:	001a      	movs	r2, r3
 8000b38:	2408      	movs	r4, #8
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	801a      	strh	r2, [r3, #0]
        frame_control |= mrf_read_long(0x302) << 8;
 8000b3e:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <mrf_interrupt_handler+0x1ec>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fd84 	bl	800064e <mrf_read_long>
 8000b46:	0003      	movs	r3, r0
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	0021      	movs	r1, r4
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2000      	movs	r0, #0
 8000b52:	5e1b      	ldrsh	r3, [r3, r0]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	801a      	strh	r2, [r3, #0]
        mrf_rx_info.frame_type = frame_control & 0x07;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2207      	movs	r2, #7
 8000b64:	4013      	ands	r3, r2
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000b6a:	705a      	strb	r2, [r3, #1]
        mrf_rx_info.pan_compression = (frame_control >> 6) & 0x1;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	099b      	lsrs	r3, r3, #6
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000b7e:	711a      	strb	r2, [r3, #4]
        mrf_rx_info.ack_bit = (frame_control >> 5) & 0x1;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	095b      	lsrs	r3, r3, #5
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000b92:	70da      	strb	r2, [r3, #3]
        mrf_rx_info.dest_addr_mode = (frame_control >> 10) & 0x3;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	0a9b      	lsrs	r3, r3, #10
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000ba6:	719a      	strb	r2, [r3, #6]
        mrf_rx_info.frame_version = (frame_control >> 12) & 0x3;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	0b1b      	lsrs	r3, r3, #12
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000bba:	715a      	strb	r2, [r3, #5]
        mrf_rx_info.src_addr_mode = (frame_control >> 14) & 0x3;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	0b9b      	lsrs	r3, r3, #14
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000bce:	71da      	strb	r2, [r3, #7]
        mrf_rx_info.sequence_number = mrf_read_long(0x303);
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <mrf_interrupt_handler+0x1f4>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fd3b 	bl	800064e <mrf_read_long>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000bde:	721a      	strb	r2, [r3, #8]

        // only three bytes have been removed, frame control and sequence id
        // the data starts at 4 though, because byte 0 was the mrf length
        // also hide the FCS bytes, even though we've copied them into the rx buffer
        for (int i = 0; i <= frame_length - 4; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e013      	b.n	8000c0e <mrf_interrupt_handler+0x12a>
            mrf_rx_buf[i] = mrf_read_long(0x304 + i);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	22c1      	movs	r2, #193	; 0xc1
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4694      	mov	ip, r2
 8000bf0:	4463      	add	r3, ip
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fd2a 	bl	800064e <mrf_read_long>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <mrf_interrupt_handler+0x1f8>)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	1c0a      	adds	r2, r1, #0
 8000c06:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i <= frame_length - 4; i++) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	230a      	movs	r3, #10
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	3b04      	subs	r3, #4
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dde4      	ble.n	8000be6 <mrf_interrupt_handler+0x102>
        }
        mrf_rx_info.frame_length = frame_length - 3 - 2;
 8000c1c:	240a      	movs	r4, #10
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3b05      	subs	r3, #5
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000c28:	701a      	strb	r2, [r3, #0]
        mrf_rx_info.lqi = mrf_read_long(0x300 + frame_length + 1);
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <mrf_interrupt_handler+0x1e8>)
 8000c32:	4694      	mov	ip, r2
 8000c34:	4463      	add	r3, ip
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff fd08 	bl	800064e <mrf_read_long>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	001a      	movs	r2, r3
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000c44:	725a      	strb	r2, [r3, #9]
        mrf_rx_info.rssi = mrf_read_long(0x300 + frame_length + 2);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <mrf_interrupt_handler+0x1ec>)
 8000c4e:	4694      	mov	ip, r2
 8000c50:	4463      	add	r3, ip
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fcfa 	bl	800064e <mrf_read_long>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <mrf_interrupt_handler+0x1f0>)
 8000c60:	729a      	strb	r2, [r3, #10]

        mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 8000c62:	2100      	movs	r1, #0
 8000c64:	2039      	movs	r0, #57	; 0x39
 8000c66:	f7ff fd25 	bl	80006b4 <mrf_write_short>
    }
    if (last_interrupt & MRF_I_TXNIF) {
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4013      	ands	r3, r2
 8000c74:	d023      	beq.n	8000cbe <mrf_interrupt_handler+0x1da>
        flag_got_tx++;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <mrf_interrupt_handler+0x1fc>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <mrf_interrupt_handler+0x1fc>)
 8000c82:	701a      	strb	r2, [r3, #0]
        uint8_t tmp = mrf_read_short(MRF_TXSTAT);
 8000c84:	1dfc      	adds	r4, r7, #7
 8000c86:	2024      	movs	r0, #36	; 0x24
 8000c88:	f7ff fcc0 	bl	800060c <mrf_read_short>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	7023      	strb	r3, [r4, #0]
        // 1 means it failed, we want 1 to mean it worked.
        mrf_tx_info.tx_ok = !(tmp & ~(1 << TXNSTAT));
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4393      	bics	r3, r2
 8000c98:	425a      	negs	r2, r3
 8000c9a:	4153      	adcs	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <mrf_interrupt_handler+0x200>)
 8000ca2:	701a      	strb	r2, [r3, #0]
        mrf_tx_info.retries = tmp >> 6;
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	099b      	lsrs	r3, r3, #6
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <mrf_interrupt_handler+0x200>)
 8000cae:	705a      	strb	r2, [r3, #1]
        mrf_tx_info.channel_busy = (tmp & (1 << CCAFAIL));
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <mrf_interrupt_handler+0x200>)
 8000cbc:	709a      	strb	r2, [r3, #2]
    }
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000129 	.word	0x20000129
 8000ccc:	00000301 	.word	0x00000301
 8000cd0:	00000302 	.word	0x00000302
 8000cd4:	2000010c 	.word	0x2000010c
 8000cd8:	00000303 	.word	0x00000303
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	20000128 	.word	0x20000128
 8000ce4:	20000118 	.word	0x20000118

08000ce8 <mrf_check_flags>:

/**
 * Call this function periodically, it will invoke your nominated handlers
 */
void mrf_check_flags(void (*rx_handler) (mrf_rx_info_t *rxinfo, uint8_t *rxbuffer),
                     void (*tx_handler) (mrf_tx_info_t *txinfo)){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
    // TODO - we could check whether the flags are > 1 here, indicating data was lost?
    if (flag_got_rx) {
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <mrf_check_flags+0x4c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <mrf_check_flags+0x24>
        flag_got_rx = 0;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <mrf_check_flags+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
        rx_handler(&mrf_rx_info, mrf_rx_buf);
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <mrf_check_flags+0x50>)
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <mrf_check_flags+0x54>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0010      	movs	r0, r2
 8000d0a:	4798      	blx	r3
    }
    if (flag_got_tx) {
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <mrf_check_flags+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d009      	beq.n	8000d2a <mrf_check_flags+0x42>
        flag_got_tx = 0;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <mrf_check_flags+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
        if (tx_handler) {
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <mrf_check_flags+0x42>
            tx_handler(&mrf_tx_info);
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <mrf_check_flags+0x5c>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	0010      	movs	r0, r2
 8000d28:	4798      	blx	r3
        }
    }
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000129 	.word	0x20000129
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	2000010c 	.word	0x2000010c
 8000d40:	20000128 	.word	0x20000128
 8000d44:	20000118 	.word	0x20000118

08000d48 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	000a      	movs	r2, r1
 8000d52:	1cfb      	adds	r3, r7, #3
 8000d54:	701a      	strb	r2, [r3, #0]
  uint8_t value = 0;
 8000d56:	240f      	movs	r4, #15
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000d5e:	1cfb      	adds	r3, r7, #3
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	227f      	movs	r2, #127	; 0x7f
 8000d64:	4013      	ands	r3, r2
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	1cfb      	adds	r3, r7, #3
 8000d6a:	701a      	strb	r2, [r3, #0]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6858      	ldr	r0, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	891b      	ldrh	r3, [r3, #8]
 8000d74:	2200      	movs	r2, #0
 8000d76:	0019      	movs	r1, r3
 8000d78:	f001 fe3f 	bl	80029fa <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	1cf9      	adds	r1, r7, #3
 8000d86:	2201      	movs	r2, #1
 8000d88:	f002 fc46 	bl	8003618 <HAL_SPI_Transmit>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	1939      	adds	r1, r7, r4
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f002 fdbe 	bl	800391c <HAL_SPI_Receive>
 8000da0:	0003      	movs	r3, r0
 8000da2:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6858      	ldr	r0, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	2201      	movs	r2, #1
 8000dae:	0019      	movs	r1, r3
 8000db0:	f001 fe23 	bl	80029fa <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	781b      	ldrb	r3, [r3, #0]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b007      	add	sp, #28
 8000dbe:	bd90      	pop	{r4, r7, pc}

08000dc0 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	0008      	movs	r0, r1
 8000dca:	0011      	movs	r1, r2
 8000dcc:	1cfb      	adds	r3, r7, #3
 8000dce:	1c02      	adds	r2, r0, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	1c0a      	adds	r2, r1, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8000dd8:	1cfb      	adds	r3, r7, #3
 8000dda:	1cfa      	adds	r2, r7, #3
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	4249      	negs	r1, r1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	1cfb      	adds	r3, r7, #3
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	240a      	movs	r4, #10
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	801a      	strh	r2, [r3, #0]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6858      	ldr	r0, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	891b      	ldrh	r3, [r3, #8]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	f001 fdf5 	bl	80029fa <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e10:	2064      	movs	r0, #100	; 0x64
 8000e12:	f001 fb05 	bl	8002420 <HAL_Delay>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	1939      	adds	r1, r7, r4
 8000e20:	2202      	movs	r2, #2
 8000e22:	f002 fbf9 	bl	8003618 <HAL_SPI_Transmit>
 8000e26:	0003      	movs	r3, r0
 8000e28:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6858      	ldr	r0, [r3, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	891b      	ldrh	r3, [r3, #8]
 8000e32:	2201      	movs	r2, #1
 8000e34:	0019      	movs	r1, r3
 8000e36:	f001 fde0 	bl	80029fa <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b005      	add	sp, #20
 8000e40:	bd90      	pop	{r4, r7, pc}

08000e42 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b089      	sub	sp, #36	; 0x24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	1c0a      	adds	r2, r1, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  uint8_t address = REG_FIFO | BIT_7;
 8000e58:	2417      	movs	r4, #23
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	701a      	strb	r2, [r3, #0]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	891b      	ldrh	r3, [r3, #8]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	f001 fdc5 	bl	80029fa <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	1939      	adds	r1, r7, r4
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f002 fbcc 	bl	8003618 <HAL_SPI_Transmit>
 8000e80:	0003      	movs	r3, r0
 8000e82:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d109      	bne.n	8000ea0 <write_fifo+0x5e>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0019      	movs	r1, r3
 8000e9a:	f003 f8bd 	bl	8004018 <HAL_SPI_Transmit_DMA>
 8000e9e:	e013      	b.n	8000ec8 <write_fifo+0x86>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	f002 fbb2 	bl	8003618 <HAL_SPI_Transmit>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6858      	ldr	r0, [r3, #4]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	891b      	ldrh	r3, [r3, #8]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	f001 fd99 	bl	80029fa <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b009      	add	sp, #36	; 0x24
 8000ecc:	bd90      	pop	{r4, r7, pc}

08000ece <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b089      	sub	sp, #36	; 0x24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	0019      	movs	r1, r3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	1dbb      	adds	r3, r7, #6
 8000ee0:	1c0a      	adds	r2, r1, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  uint8_t address = REG_FIFO;
 8000ee4:	2417      	movs	r4, #23
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6858      	ldr	r0, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	891b      	ldrh	r3, [r3, #8]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	f001 fd7f 	bl	80029fa <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	1939      	adds	r1, r7, r4
 8000f06:	2201      	movs	r2, #1
 8000f08:	f002 fb86 	bl	8003618 <HAL_SPI_Transmit>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10b      	bne.n	8000f30 <read_fifo+0x62>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	0019      	movs	r1, r3
 8000f26:	f003 f975 	bl	8004214 <HAL_SPI_Receive_DMA>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8000f2e:	e013      	b.n	8000f58 <read_fifo+0x8a>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	f002 fcec 	bl	800391c <HAL_SPI_Receive>
 8000f44:	0003      	movs	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6858      	ldr	r0, [r3, #4]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	891b      	ldrh	r3, [r3, #8]
 8000f50:	2201      	movs	r2, #1
 8000f52:	0019      	movs	r1, r3
 8000f54:	f001 fd51 	bl	80029fa <HAL_GPIO_WritePin>
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b009      	add	sp, #36	; 0x24
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	000a      	movs	r2, r1
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	4252      	negs	r2, r2
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff1e 	bl	8000dc0 <write_register>
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	000a      	movs	r2, r1
 8000f96:	1cfb      	adds	r3, r7, #3
 8000f98:	701a      	strb	r2, [r3, #0]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2c      	cmp	r3, #44	; 0x2c
 8000fa0:	d802      	bhi.n	8000fa8 <set_OCP+0x1c>
    imax = 45;
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	222d      	movs	r2, #45	; 0x2d
 8000fa6:	701a      	strb	r2, [r3, #0]
  }
  if (imax > 240) {
 8000fa8:	1cfb      	adds	r3, r7, #3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2bf0      	cmp	r3, #240	; 0xf0
 8000fae:	d902      	bls.n	8000fb6 <set_OCP+0x2a>
    imax = 240;
 8000fb0:	1cfb      	adds	r3, r7, #3
 8000fb2:	22f0      	movs	r2, #240	; 0xf0
 8000fb4:	701a      	strb	r2, [r3, #0]
  }

  if (imax < 130) {
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b81      	cmp	r3, #129	; 0x81
 8000fbc:	d80c      	bhi.n	8000fd8 <set_OCP+0x4c>
    value = (imax - 45) / 5;
 8000fbe:	1cfb      	adds	r3, r7, #3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3b2d      	subs	r3, #45	; 0x2d
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff f928 	bl	800021c <__divsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	001a      	movs	r2, r3
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e00b      	b.n	8000ff0 <set_OCP+0x64>
  } else {
    value = (imax + 30) / 10;
 8000fd8:	1cfb      	adds	r3, r7, #3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	331e      	adds	r3, #30
 8000fde:	210a      	movs	r1, #10
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff f91b 	bl	800021c <__divsi3>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	001a      	movs	r2, r3
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	701a      	strb	r2, [r3, #0]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	210b      	movs	r1, #11
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fedd 	bl	8000dc0 <write_register>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	211d      	movs	r1, #29
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fe94 	bl	8000d48 <read_register>
 8001020:	0003      	movs	r3, r0
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	211e      	movs	r1, #30
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fe89 	bl	8000d48 <read_register>
 8001036:	0003      	movs	r3, r0
 8001038:	001a      	movs	r2, r3
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	0912      	lsrs	r2, r2, #4
 8001040:	701a      	strb	r2, [r3, #0]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001042:	231f      	movs	r3, #31
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2204      	movs	r2, #4
 8001048:	701a      	strb	r2, [r3, #0]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800104a:	187b      	adds	r3, r7, r1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d90c      	bls.n	800106c <set_low_data_rate_optimization+0x5e>
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b07      	cmp	r3, #7
 8001056:	d109      	bne.n	800106c <set_low_data_rate_optimization+0x5e>
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <set_low_data_rate_optimization+0x5e>
    mc3 |= MC3_MOBILE_NODE;
 800105e:	221f      	movs	r2, #31
 8001060:	18bb      	adds	r3, r7, r2
 8001062:	18ba      	adds	r2, r7, r2
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	2108      	movs	r1, #8
 8001068:	430a      	orrs	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 800106c:	231f      	movs	r3, #31
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2126      	movs	r1, #38	; 0x26
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fea2 	bl	8000dc0 <write_register>
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b008      	add	sp, #32
 8001082:	bd80      	pop	{r7, pc}

08001084 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2100      	movs	r1, #0
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff65 	bl	8000f60 <set_mode>
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <lora_mode_receive_continious>:

void lora_mode_receive_continious(lora_sx1276 *lora)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7e5a      	ldrb	r2, [r3, #25]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	210f      	movs	r1, #15
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff fe86 	bl	8000dc0 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	22f0      	movs	r2, #240	; 0xf0
 80010b8:	2112      	movs	r1, #18
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fe80 	bl	8000dc0 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2105      	movs	r1, #5
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff4b 	bl	8000f60 <set_mode>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2101      	movs	r1, #1
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ff3e 	bl	8000f60 <set_mode>
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80010f4:	200f      	movs	r0, #15
 80010f6:	0005      	movs	r5, r0
 80010f8:	183c      	adds	r4, r7, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	211d      	movs	r1, #29
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff fe22 	bl	8000d48 <read_register>
 8001104:	0003      	movs	r3, r0
 8001106:	7023      	strb	r3, [r4, #0]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001108:	0028      	movs	r0, r5
 800110a:	183b      	adds	r3, r7, r0
 800110c:	183a      	adds	r2, r7, r0
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001116:	183b      	adds	r3, r7, r0
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	211d      	movs	r1, #29
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fe4e 	bl	8000dc0 <write_register>
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bdb0      	pop	{r4, r5, r7, pc}

0800112c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	000a      	movs	r2, r1
 8001136:	1cfb      	adds	r3, r7, #3
 8001138:	701a      	strb	r2, [r3, #0]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d111      	bne.n	8001166 <lora_set_tx_power+0x3a>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001142:	1cfb      	adds	r3, r7, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	d902      	bls.n	8001150 <lora_set_tx_power+0x24>
      level = 15;
 800114a:	1cfb      	adds	r3, r7, #3
 800114c:	220f      	movs	r2, #15
 800114e:	701a      	strb	r2, [r3, #0]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001150:	1cfb      	adds	r3, r7, #3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2270      	movs	r2, #112	; 0x70
 8001156:	4313      	orrs	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2109      	movs	r1, #9
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fe2e 	bl	8000dc0 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001164:	e03d      	b.n	80011e2 <lora_set_tx_power+0xb6>
    if (level > 20) {
 8001166:	1cfb      	adds	r3, r7, #3
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b14      	cmp	r3, #20
 800116c:	d902      	bls.n	8001174 <lora_set_tx_power+0x48>
      level = 20;
 800116e:	1cfb      	adds	r3, r7, #3
 8001170:	2214      	movs	r2, #20
 8001172:	701a      	strb	r2, [r3, #0]
    if (level < 2) {
 8001174:	1cfb      	adds	r3, r7, #3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d802      	bhi.n	8001182 <lora_set_tx_power+0x56>
      level = 2;
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
    if (level > 17) {
 8001182:	1cfb      	adds	r3, r7, #3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b11      	cmp	r3, #17
 8001188:	d910      	bls.n	80011ac <lora_set_tx_power+0x80>
      level -= 3;
 800118a:	1cfb      	adds	r3, r7, #3
 800118c:	1cfa      	adds	r2, r7, #3
 800118e:	7812      	ldrb	r2, [r2, #0]
 8001190:	3a03      	subs	r2, #3
 8001192:	701a      	strb	r2, [r3, #0]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2287      	movs	r2, #135	; 0x87
 8001198:	214d      	movs	r1, #77	; 0x4d
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fe10 	bl	8000dc0 <write_register>
      set_OCP(lora, 140);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	218c      	movs	r1, #140	; 0x8c
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fef1 	bl	8000f8c <set_OCP>
 80011aa:	e00a      	b.n	80011c2 <lora_set_tx_power+0x96>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2284      	movs	r2, #132	; 0x84
 80011b0:	214d      	movs	r1, #77	; 0x4d
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff fe04 	bl	8000dc0 <write_register>
      set_OCP(lora, 97);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2161      	movs	r1, #97	; 0x61
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff fee5 	bl	8000f8c <set_OCP>
    level -= 2;
 80011c2:	1cfb      	adds	r3, r7, #3
 80011c4:	1cfa      	adds	r2, r7, #3
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	3a02      	subs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80011cc:	1cfb      	adds	r3, r7, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	4252      	negs	r2, r2
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2109      	movs	r1, #9
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fdef 	bl	8000dc0 <write_register>
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	61f8      	str	r0, [r7, #28]
 80011f4:	613a      	str	r2, [r7, #16]
 80011f6:	617b      	str	r3, [r7, #20]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	0b5b      	lsrs	r3, r3, #13
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	04d2      	lsls	r2, r2, #19
 8001200:	60fa      	str	r2, [r7, #12]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	431a      	orrs	r2, r3
 8001206:	60fa      	str	r2, [r7, #12]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	04db      	lsls	r3, r3, #19
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <lora_set_frequency+0x8c>)
 8001210:	2300      	movs	r3, #0
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	f7ff f8ed 	bl	80003f4 <__aeabi_uldivmod>
 800121a:	0002      	movs	r2, r0
 800121c:	000b      	movs	r3, r1
 800121e:	623a      	str	r2, [r7, #32]
 8001220:	627b      	str	r3, [r7, #36]	; 0x24

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	6a3a      	ldr	r2, [r7, #32]
 8001228:	0c12      	lsrs	r2, r2, #16
 800122a:	603a      	str	r2, [r7, #0]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	603a      	str	r2, [r7, #0]
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	0c1b      	lsrs	r3, r3, #16
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	783a      	ldrb	r2, [r7, #0]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2106      	movs	r1, #6
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff fdbe 	bl	8000dc0 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	061b      	lsls	r3, r3, #24
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	0a14      	lsrs	r4, r2, #8
 800124c:	431c      	orrs	r4, r3
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	0a1d      	lsrs	r5, r3, #8
 8001252:	b2e2      	uxtb	r2, r4
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2107      	movs	r1, #7
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fdb1 	bl	8000dc0 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001262:	b2da      	uxtb	r2, r3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2108      	movs	r1, #8
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fda9 	bl	8000dc0 <write_register>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b00a      	add	sp, #40	; 0x28
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	01e84800 	.word	0x01e84800

0800127c <lora_packet_rssi>:

uint8_t lora_packet_rssi(lora_sx1276 *lora)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t rssi = read_register(lora, REG_PKT_RSSI_VALUE);
 8001284:	230f      	movs	r3, #15
 8001286:	18fc      	adds	r4, r7, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	211a      	movs	r1, #26
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fd5b 	bl	8000d48 <read_register>
 8001292:	0003      	movs	r3, r0
 8001294:	7023      	strb	r3, [r4, #0]

  return lora->frequency < (868 * MHZ) ? rssi - 164 : rssi - 157;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <lora_packet_rssi+0x44>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d805      	bhi.n	80012ac <lora_packet_rssi+0x30>
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	335c      	adds	r3, #92	; 0x5c
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e004      	b.n	80012b6 <lora_packet_rssi+0x3a>
 80012ac:	230f      	movs	r3, #15
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3363      	adds	r3, #99	; 0x63
 80012b4:	b2db      	uxtb	r3, r3
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b005      	add	sp, #20
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	33bca0ff 	.word	0x33bca0ff

080012c4 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	000a      	movs	r2, r1
 80012ce:	1cfb      	adds	r3, r7, #3
 80012d0:	701a      	strb	r2, [r3, #0]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80012d2:	1cfb      	adds	r3, r7, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d803      	bhi.n	80012e2 <lora_set_spreading_factor+0x1e>
    sf = 6;
 80012da:	1cfb      	adds	r3, r7, #3
 80012dc:	2206      	movs	r2, #6
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e006      	b.n	80012f0 <lora_set_spreading_factor+0x2c>
  } else if (sf > 12) {
 80012e2:	1cfb      	adds	r3, r7, #3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d902      	bls.n	80012f0 <lora_set_spreading_factor+0x2c>
    sf = 12;
 80012ea:	1cfb      	adds	r3, r7, #3
 80012ec:	220c      	movs	r2, #12
 80012ee:	701a      	strb	r2, [r3, #0]
  }

  if (sf == 6) {
 80012f0:	1cfb      	adds	r3, r7, #3
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d10c      	bne.n	8001312 <lora_set_spreading_factor+0x4e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	22c5      	movs	r2, #197	; 0xc5
 80012fc:	2131      	movs	r1, #49	; 0x31
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fd5e 	bl	8000dc0 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	220c      	movs	r2, #12
 8001308:	2137      	movs	r1, #55	; 0x37
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff fd58 	bl	8000dc0 <write_register>
 8001310:	e00b      	b.n	800132a <lora_set_spreading_factor+0x66>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	22c3      	movs	r2, #195	; 0xc3
 8001316:	2131      	movs	r1, #49	; 0x31
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fd51 	bl	8000dc0 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	220a      	movs	r2, #10
 8001322:	2137      	movs	r1, #55	; 0x37
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fd4b 	bl	8000dc0 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800132a:	250f      	movs	r5, #15
 800132c:	197c      	adds	r4, r7, r5
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	211e      	movs	r1, #30
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fd08 	bl	8000d48 <read_register>
 8001338:	0003      	movs	r3, r0
 800133a:	7023      	strb	r3, [r4, #0]
  mc2 |= sf << 4;
 800133c:	1cfb      	adds	r3, r7, #3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b25a      	sxtb	r2, r3
 8001344:	197b      	adds	r3, r7, r5
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25a      	sxtb	r2, r3
 800134e:	197b      	adds	r3, r7, r5
 8001350:	701a      	strb	r2, [r3, #0]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001352:	197b      	adds	r3, r7, r5
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	211e      	movs	r1, #30
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fd30 	bl	8000dc0 <write_register>

  set_low_data_rate_optimization(lora);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fe53 	bl	800100e <set_low_data_rate_optimization>
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bdb0      	pop	{r4, r5, r7, pc}

08001370 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	000a      	movs	r2, r1
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	801a      	strh	r2, [r3, #0]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b29b      	uxth	r3, r3
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2120      	movs	r1, #32
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fd17 	bl	8000dc0 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001392:	1cbb      	adds	r3, r7, #2
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	220f      	movs	r2, #15
 800139a:	4013      	ands	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2121      	movs	r1, #33	; 0x21
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff fd0c 	bl	8000dc0 <write_register>
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2142      	movs	r1, #66	; 0x42
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fcc3 	bl	8000d48 <read_register>
 80013c2:	0003      	movs	r3, r0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80013d4:	250f      	movs	r5, #15
 80013d6:	197c      	adds	r4, r7, r5
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2101      	movs	r1, #1
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff fcb3 	bl	8000d48 <read_register>
 80013e2:	0003      	movs	r3, r0
 80013e4:	7023      	strb	r3, [r4, #0]

  return opmode & (1 << OPMODE_TX) ? LORA_BUSY : LORA_OK;
 80013e6:	197b      	adds	r3, r7, r5
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2208      	movs	r2, #8
 80013ec:	4013      	ands	r3, r2
 80013ee:	d001      	beq.n	80013f4 <lora_is_transmitting+0x28>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e000      	b.n	80013f6 <lora_is_transmitting+0x2a>
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bdb0      	pop	{r4, r5, r7, pc}

080013fe <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80013fe:	b590      	push	{r4, r7, lr}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	0019      	movs	r1, r3
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	1dbb      	adds	r3, r7, #6
 8001410:	1c0a      	adds	r2, r1, #0
 8001412:	701a      	strb	r2, [r3, #0]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff ffd8 	bl	80013cc <lora_is_transmitting>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001420:	2305      	movs	r3, #5
 8001422:	e034      	b.n	800148e <lora_send_packet_base+0x90>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2101      	movs	r1, #1
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fd99 	bl	8000f60 <set_mode>

  // Clear TX IRQ flag, to be sure
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2208      	movs	r2, #8
 8001432:	2112      	movs	r1, #18
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fcc3 	bl	8000dc0 <write_register>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	7e1a      	ldrb	r2, [r3, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	210d      	movs	r1, #13
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fcbc 	bl	8000dc0 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	7e1a      	ldrb	r2, [r3, #24]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	210e      	movs	r1, #14
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fcb5 	bl	8000dc0 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2122      	movs	r1, #34	; 0x22
 800145e:	0018      	movs	r0, r3
 8001460:	f7ff fcae 	bl	8000dc0 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	781c      	ldrb	r4, [r3, #0]
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	0023      	movs	r3, r4
 8001472:	f7ff fce6 	bl	8000e42 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <lora_send_packet_base+0x84>
    return LORA_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e005      	b.n	800148e <lora_send_packet_base+0x90>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2103      	movs	r1, #3
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fd6a 	bl	8000f60 <set_mode>
  return LORA_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b005      	add	sp, #20
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	701a      	strb	r2, [r3, #0]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	2302      	movs	r3, #2
 80014ae:	f7ff ffa6 	bl	80013fe <lora_send_packet_base>
 80014b2:	0003      	movs	r3, r0
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b004      	add	sp, #16
 80014ba:	bd80      	pop	{r7, pc}

080014bc <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80014c4:	250f      	movs	r5, #15
 80014c6:	197c      	adds	r4, r7, r5
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2112      	movs	r1, #18
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fc3b 	bl	8000d48 <read_register>
 80014d2:	0003      	movs	r3, r0
 80014d4:	7023      	strb	r3, [r4, #0]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80014d6:	197b      	adds	r3, r7, r5
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	223f      	movs	r2, #63	; 0x3f
 80014dc:	4393      	bics	r3, r2
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b004      	add	sp, #16
 80014e6:	bdb0      	pop	{r4, r5, r7, pc}

080014e8 <lora_receive_packet_base>:

static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	701a      	strb	r2, [r3, #0]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 80014f8:	2317      	movs	r3, #23
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	2206      	movs	r2, #6
 80014fe:	701a      	strb	r2, [r3, #0]
  uint8_t len = 0;
 8001500:	2316      	movs	r3, #22
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8001508:	2515      	movs	r5, #21
 800150a:	197c      	adds	r4, r7, r5
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2112      	movs	r1, #18
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fc19 	bl	8000d48 <read_register>
 8001516:	0003      	movs	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	22f0      	movs	r2, #240	; 0xf0
 800151e:	2112      	movs	r1, #18
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fc4d 	bl	8000dc0 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8001526:	197b      	adds	r3, r7, r5
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	da04      	bge.n	800153a <lora_receive_packet_base+0x52>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8001530:	2317      	movs	r3, #23
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
    goto done;
 8001538:	e06b      	b.n	8001612 <lora_receive_packet_base+0x12a>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800153a:	2315      	movs	r3, #21
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2240      	movs	r2, #64	; 0x40
 8001542:	4013      	ands	r3, r2
 8001544:	d064      	beq.n	8001610 <lora_receive_packet_base+0x128>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8001546:	2315      	movs	r3, #21
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2210      	movs	r2, #16
 800154e:	4013      	ands	r3, r2
 8001550:	d104      	bne.n	800155c <lora_receive_packet_base+0x74>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8001552:	2317      	movs	r3, #23
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2203      	movs	r2, #3
 8001558:	701a      	strb	r2, [r3, #0]
      goto done;
 800155a:	e05a      	b.n	8001612 <lora_receive_packet_base+0x12a>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 800155c:	2315      	movs	r3, #21
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2220      	movs	r2, #32
 8001564:	4013      	ands	r3, r2
 8001566:	d004      	beq.n	8001572 <lora_receive_packet_base+0x8a>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8001568:	2317      	movs	r3, #23
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
      goto done;
 8001570:	e04f      	b.n	8001612 <lora_receive_packet_base+0x12a>
    }
    // Query for current header mode - implicit / explicit
    uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	211d      	movs	r1, #29
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fbe6 	bl	8000d48 <read_register>
 800157c:	0003      	movs	r3, r0
 800157e:	0019      	movs	r1, r3
 8001580:	2014      	movs	r0, #20
 8001582:	183b      	adds	r3, r7, r0
 8001584:	2201      	movs	r2, #1
 8001586:	400a      	ands	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
    if (implicit) {
 800158a:	183b      	adds	r3, r7, r0
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <lora_receive_packet_base+0xbe>
      len = read_register(lora, REG_PAYLOAD_LENGTH);
 8001592:	2316      	movs	r3, #22
 8001594:	18fc      	adds	r4, r7, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2122      	movs	r1, #34	; 0x22
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fbd4 	bl	8000d48 <read_register>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]
 80015a4:	e008      	b.n	80015b8 <lora_receive_packet_base+0xd0>
    } else {
      len = read_register(lora, REG_RX_NB_BYTES);
 80015a6:	2316      	movs	r3, #22
 80015a8:	18fc      	adds	r4, r7, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2113      	movs	r1, #19
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff fbca 	bl	8000d48 <read_register>
 80015b4:	0003      	movs	r3, r0
 80015b6:	7023      	strb	r3, [r4, #0]
    }
    if (len >= buffer_len) {
 80015b8:	2316      	movs	r3, #22
 80015ba:	18fa      	adds	r2, r7, r3
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d304      	bcc.n	80015d0 <lora_receive_packet_base+0xe8>
      len = buffer_len;
 80015c6:	2316      	movs	r3, #22
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
    }
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 80015d0:	2513      	movs	r5, #19
 80015d2:	197c      	adds	r4, r7, r5
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2110      	movs	r1, #16
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fbb5 	bl	8000d48 <read_register>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	210d      	movs	r1, #13
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fbe8 	bl	8000dc0 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80015f0:	2328      	movs	r3, #40	; 0x28
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781c      	ldrb	r4, [r3, #0]
 80015f6:	2316      	movs	r3, #22
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	0023      	movs	r3, r4
 8001602:	f7ff fc64 	bl	8000ece <read_fifo>
    res = LORA_OK;
 8001606:	2317      	movs	r3, #23
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e000      	b.n	8001612 <lora_receive_packet_base+0x12a>
  }

done:
 8001610:	46c0      	nop			; (mov r8, r8)
  if (error) {
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <lora_receive_packet_base+0x13a>
    *error = res;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2217      	movs	r2, #23
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8001622:	2316      	movs	r3, #22
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	781b      	ldrb	r3, [r3, #0]
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bdb0      	pop	{r4, r5, r7, pc}

08001630 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	701a      	strb	r2, [r3, #0]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8001640:	683c      	ldr	r4, [r7, #0]
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	2302      	movs	r3, #2
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	0023      	movs	r3, r4
 8001650:	f7ff ff4a 	bl	80014e8 <lora_receive_packet_base>
 8001654:	0003      	movs	r3, r0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b005      	add	sp, #20
 800165c:	bd90      	pop	{r4, r7, pc}

0800165e <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 800165e:	b590      	push	{r4, r7, lr}
 8001660:	b087      	sub	sp, #28
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8001672:	e00b      	b.n	800168c <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff ff20 	bl	80014bc <lora_is_packet_available>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d10a      	bne.n	8001696 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fecd 	bl	8002420 <HAL_Delay>
    elapsed++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3ef      	bcc.n	8001674 <lora_receive_packet_blocking+0x16>
 8001694:	e000      	b.n	8001698 <lora_receive_packet_blocking+0x3a>
      break;
 8001696:	46c0      	nop			; (mov r8, r8)
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8001698:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	0023      	movs	r3, r4
 80016a4:	f7ff ffc4 	bl	8001630 <lora_receive_packet>
 80016a8:	0003      	movs	r3, r0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b007      	add	sp, #28
 80016b0:	bd90      	pop	{r4, r7, pc}

080016b2 <lora_init>:
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80016b2:	b5b0      	push	{r4, r5, r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	001a      	movs	r2, r3
 80016c0:	1cbb      	adds	r3, r7, #2
 80016c2:	801a      	strh	r2, [r3, #0]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1cba      	adds	r2, r7, #2
 80016d4:	8812      	ldrh	r2, [r2, #0]
 80016d6:	811a      	strh	r2, [r3, #8]
  lora->frequency = freq;
 80016d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	611a      	str	r2, [r3, #16]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	615a      	str	r2, [r3, #20]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	761a      	strb	r2, [r3, #24]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	765a      	strb	r2, [r3, #25]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	22fa      	movs	r2, #250	; 0xfa
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	60da      	str	r2, [r3, #12]

  // Check version
  uint8_t ver = lora_version(lora);
 80016f8:	2517      	movs	r5, #23
 80016fa:	197c      	adds	r4, r7, r5
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff fe56 	bl	80013b0 <lora_version>
 8001704:	0003      	movs	r3, r0
 8001706:	7023      	strb	r3, [r4, #0]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8001708:	197b      	adds	r3, r7, r5
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d001      	beq.n	8001714 <lora_init+0x62>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001710:	2304      	movs	r3, #4
 8001712:	e040      	b.n	8001796 <lora_init+0xe4>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fcb4 	bl	8001084 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fcb0 	bl	8001084 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	001a      	movs	r2, r3
 800172c:	0023      	movs	r3, r4
 800172e:	0008      	movs	r0, r1
 8001730:	f7ff fd5c 	bl	80011ec <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2107      	movs	r1, #7
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff fdc3 	bl	80012c4 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	210a      	movs	r1, #10
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff fe14 	bl	8001370 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff fcce 	bl	80010ec <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001750:	2516      	movs	r5, #22
 8001752:	197c      	adds	r4, r7, r5
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	210c      	movs	r1, #12
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff faf5 	bl	8000d48 <read_register>
 800175e:	0003      	movs	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001762:	197b      	adds	r3, r7, r5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2203      	movs	r2, #3
 8001768:	4313      	orrs	r3, r2
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	210c      	movs	r1, #12
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fb25 	bl	8000dc0 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2204      	movs	r2, #4
 800177a:	2126      	movs	r1, #38	; 0x26
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fb1f 	bl	8000dc0 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2111      	movs	r1, #17
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fcd0 	bl	800112c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff fc9f 	bl	80010d2 <lora_mode_standby>

  return LORA_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b006      	add	sp, #24
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b08d      	sub	sp, #52	; 0x34
 80017a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f000 fdd7 	bl	8002358 <HAL_Init>

  /* USER CODE BEGIN Init */
	uint8_t point = 0;
 80017aa:	221f      	movs	r2, #31
 80017ac:	18bb      	adds	r3, r7, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

	const uint8_t STATE = 1;	// 0 transmitter, 1 is receiver
 80017b2:	231e      	movs	r3, #30
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f8c3 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 f987 	bl	8001ad0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017c2:	f000 f917 	bl	80019f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017c6:	f000 f953 	bl	8001a70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	RetargetInit(&huart1);
 80017ca:	4b53      	ldr	r3, [pc, #332]	; (8001918 <main+0x178>)
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fbbd 	bl	8001f4c <RetargetInit>
	//initialize LoRa module
	lora_sx1276 lora;

	uint8_t res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_EU);
 80017d2:	231d      	movs	r3, #29
 80017d4:	18fd      	adds	r5, r7, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	005e      	lsls	r6, r3, #1
 80017da:	2390      	movs	r3, #144	; 0x90
 80017dc:	05da      	lsls	r2, r3, #23
 80017de:	494f      	ldr	r1, [pc, #316]	; (800191c <main+0x17c>)
 80017e0:	0038      	movs	r0, r7
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <main+0x180>)
 80017e4:	2400      	movs	r4, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	9401      	str	r4, [sp, #4]
 80017ea:	0033      	movs	r3, r6
 80017ec:	f7ff ff61 	bl	80016b2 <lora_init>
 80017f0:	0003      	movs	r3, r0
 80017f2:	702b      	strb	r3, [r5, #0]
	uint8_t ver = lora_version(&lora);
 80017f4:	211c      	movs	r1, #28
 80017f6:	187c      	adds	r4, r7, r1
 80017f8:	003b      	movs	r3, r7
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff fdd8 	bl	80013b0 <lora_version>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
	HAL_Delay(100);
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	f000 fe0b 	bl	8002420 <HAL_Delay>
	printf("%d: Starting Lora up...", point++);
 800180a:	221f      	movs	r2, #31
 800180c:	18bb      	adds	r3, r7, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	18ba      	adds	r2, r7, r2
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	7011      	strb	r1, [r2, #0]
 8001816:	001a      	movs	r2, r3
 8001818:	4b42      	ldr	r3, [pc, #264]	; (8001924 <main+0x184>)
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f003 ffe5 	bl	80057ec <iprintf>
	if (res != LORA_OK) {
 8001822:	231d      	movs	r3, #29
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <main+0x96>
		// Initialization failed
		printf("failed\n");
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <main+0x188>)
 800182e:	0018      	movs	r0, r3
 8001830:	f004 f86a 	bl	8005908 <puts>
 8001834:	e007      	b.n	8001846 <main+0xa6>
	} else {
		printf("\nLora version: %d\n", ver);
 8001836:	231c      	movs	r3, #28
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <main+0x18c>)
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f003 ffd3 	bl	80057ec <iprintf>
	}

	// Initialize MRF module
	mrf_reset();
 8001846:	f000 fa05 	bl	8001c54 <mrf_reset>
	mrf_deselect();
 800184a:	f000 fa5f 	bl	8001d0c <mrf_deselect>

	printf("%d: MRF starting up...", point++);
 800184e:	221f      	movs	r2, #31
 8001850:	18bb      	adds	r3, r7, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	18ba      	adds	r2, r7, r2
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	7011      	strb	r1, [r2, #0]
 800185a:	001a      	movs	r2, r3
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <main+0x190>)
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f003 ffc3 	bl	80057ec <iprintf>
	mrf_init();
 8001866:	f7ff f8d9 	bl	8000a1c <mrf_init>
	mrf_set_ignorebytes(2);
 800186a:	2002      	movs	r0, #2
 800186c:	f7fe ffae 	bl	80007cc <mrf_set_ignorebytes>
	mrf_pan_write(0xFFFF);
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <main+0x194>)
 8001872:	0018      	movs	r0, r3
 8001874:	f7fe ff90 	bl	8000798 <mrf_pan_write>


	if (STATE){
 8001878:	231e      	movs	r3, #30
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <main+0xfa>
		mrf_promiscuous(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f7fe ffe5 	bl	8000852 <mrf_promiscuous>
		mrf_address16_write(0xFFFF);
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <main+0x194>)
 800188a:	0018      	movs	r0, r3
 800188c:	f7fe ffae 	bl	80007ec <mrf_address16_write>
		printf("Set as receiver.\n");
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <main+0x198>)
 8001892:	0018      	movs	r0, r3
 8001894:	f004 f838 	bl	8005908 <puts>
 8001898:	e006      	b.n	80018a8 <main+0x108>
	}
	else{
		mrf_address16_write(0x0001);
 800189a:	2001      	movs	r0, #1
 800189c:	f7fe ffa6 	bl	80007ec <mrf_address16_write>
		printf("Set as transmitter.\n");
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <main+0x19c>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f004 f830 	bl	8005908 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <main+0x1a0>)
 80018aa:	2108      	movs	r1, #8
 80018ac:	0018      	movs	r0, r3
 80018ae:	f001 f8c1 	bl	8002a34 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 80018b2:	2032      	movs	r0, #50	; 0x32
 80018b4:	f000 fdb4 	bl	8002420 <HAL_Delay>

	if (STATE == 1){
 80018b8:	231e      	movs	r3, #30
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10f      	bne.n	80018e2 <main+0x142>
		receive_lora(lora);
 80018c2:	003b      	movs	r3, r7
 80018c4:	466a      	mov	r2, sp
 80018c6:	0011      	movs	r1, r2
 80018c8:	001a      	movs	r2, r3
 80018ca:	3210      	adds	r2, #16
 80018cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018ce:	c131      	stmia	r1!, {r0, r4, r5}
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f000 fadc 	bl	8001e94 <receive_lora>
		receive_mrf();
 80018dc:	f000 fab0 	bl	8001e40 <receive_mrf>
 80018e0:	e00e      	b.n	8001900 <main+0x160>
	}
	else{
		transmit_lora(lora);
 80018e2:	003b      	movs	r3, r7
 80018e4:	466a      	mov	r2, sp
 80018e6:	0011      	movs	r1, r2
 80018e8:	001a      	movs	r2, r3
 80018ea:	3210      	adds	r2, #16
 80018ec:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018ee:	c131      	stmia	r1!, {r0, r4, r5}
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f000 fa6a 	bl	8001dd0 <transmit_lora>
		transmit_mrf();
 80018fc:	f000 fa38 	bl	8001d70 <transmit_mrf>
	}


	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <main+0x1a0>)
 8001902:	2108      	movs	r1, #8
 8001904:	0018      	movs	r0, r3
 8001906:	f001 f895 	bl	8002a34 <HAL_GPIO_TogglePin>
	_delay_ms(1000);
 800190a:	23fa      	movs	r3, #250	; 0xfa
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 fa22 	bl	8001d58 <_delay_ms>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001914:	e7c8      	b.n	80018a8 <main+0x108>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	2000012c 	.word	0x2000012c
 800191c:	200001ac 	.word	0x200001ac
 8001920:	33bca100 	.word	0x33bca100
 8001924:	08006908 	.word	0x08006908
 8001928:	08006920 	.word	0x08006920
 800192c:	08006928 	.word	0x08006928
 8001930:	0800693c 	.word	0x0800693c
 8001934:	0000ffff 	.word	0x0000ffff
 8001938:	08006954 	.word	0x08006954
 800193c:	08006968 	.word	0x08006968
 8001940:	48000400 	.word	0x48000400

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b095      	sub	sp, #84	; 0x54
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	2420      	movs	r4, #32
 800194c:	193b      	adds	r3, r7, r4
 800194e:	0018      	movs	r0, r3
 8001950:	2330      	movs	r3, #48	; 0x30
 8001952:	001a      	movs	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	f003 ff41 	bl	80057dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195a:	2310      	movs	r3, #16
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	0018      	movs	r0, r3
 8001960:	2310      	movs	r3, #16
 8001962:	001a      	movs	r2, r3
 8001964:	2100      	movs	r1, #0
 8001966:	f003 ff39 	bl	80057dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196a:	003b      	movs	r3, r7
 800196c:	0018      	movs	r0, r3
 800196e:	2310      	movs	r3, #16
 8001970:	001a      	movs	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f003 ff32 	bl	80057dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001978:	0021      	movs	r1, r4
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2201      	movs	r2, #1
 8001984:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2210      	movs	r2, #16
 800198a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001992:	187b      	adds	r3, r7, r1
 8001994:	0018      	movs	r0, r3
 8001996:	f001 f869 	bl	8002a6c <HAL_RCC_OscConfig>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800199e:	f000 facf 	bl	8001f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	2110      	movs	r1, #16
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2207      	movs	r2, #7
 80019a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2100      	movs	r1, #0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f001 fb6f 	bl	80030a4 <HAL_RCC_ClockConfig>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019ca:	f000 fab9 	bl	8001f40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ce:	003b      	movs	r3, r7
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019d4:	003b      	movs	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019da:	003b      	movs	r3, r7
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 fcb3 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019e6:	f000 faab 	bl	8001f40 <Error_Handler>
  }
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b015      	add	sp, #84	; 0x54
 80019f0:	bd90      	pop	{r4, r7, pc}
	...

080019f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_SPI1_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <MX_SPI1_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a00:	2282      	movs	r2, #130	; 0x82
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a0e:	22e0      	movs	r2, #224	; 0xe0
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a42:	2207      	movs	r2, #7
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a4e:	2208      	movs	r2, #8
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	f001 fd45 	bl	80034e4 <HAL_SPI_Init>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f000 fa6f 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001ac 	.word	0x200001ac
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_USART1_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a7c:	2296      	movs	r2, #150	; 0x96
 8001a7e:	0212      	lsls	r2, r2, #8
 8001a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f003 f9ad 	bl	8004e14 <HAL_UART_Init>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f000 fa3f 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000012c 	.word	0x2000012c
 8001acc:	40013800 	.word	0x40013800

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	240c      	movs	r4, #12
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2314      	movs	r3, #20
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f003 fe7b 	bl	80057dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	03c9      	lsls	r1, r1, #15
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	03db      	lsls	r3, r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0289      	lsls	r1, r1, #10
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	02c9      	lsls	r1, r1, #11
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <MX_GPIO_Init+0x178>)
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	4013      	ands	r3, r2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MRF_NSS_Pin|LED_Pin|MRF_RESET_Pin, GPIO_PIN_SET);
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <MX_GPIO_Init+0x17c>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2119      	movs	r1, #25
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 ff5a 	bl	80029fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LORA_RESET_Pin, GPIO_PIN_SET);
 8001b46:	2390      	movs	r3, #144	; 0x90
 8001b48:	0119      	lsls	r1, r3, #4
 8001b4a:	2390      	movs	r3, #144	; 0x90
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	2201      	movs	r2, #1
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 ff52 	bl	80029fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MRF_INT_Pin */
  GPIO_InitStruct.Pin = MRF_INT_Pin;
 8001b56:	0021      	movs	r1, r4
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2201      	movs	r2, #1
 8001b68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MRF_INT_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	000c      	movs	r4, r1
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <MX_GPIO_Init+0x180>)
 8001b70:	0019      	movs	r1, r3
 8001b72:	0010      	movs	r0, r2
 8001b74:	f000 fdbc 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MRF_NSS_Pin LED_Pin */
  GPIO_InitStruct.Pin = MRF_NSS_Pin|LED_Pin;
 8001b78:	0021      	movs	r1, r4
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2201      	movs	r2, #1
 8001b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	000c      	movs	r4, r1
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <MX_GPIO_Init+0x17c>)
 8001b98:	0019      	movs	r1, r3
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	f000 fda8 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8001ba0:	0021      	movs	r1, r4
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0052      	lsls	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2201      	movs	r2, #1
 8001bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	000c      	movs	r4, r1
 8001bbe:	187a      	adds	r2, r7, r1
 8001bc0:	2390      	movs	r3, #144	; 0x90
 8001bc2:	05db      	lsls	r3, r3, #23
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fd92 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 8001bcc:	0021      	movs	r1, r4
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2201      	movs	r2, #1
 8001be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 8001be8:	000c      	movs	r4, r1
 8001bea:	187a      	adds	r2, r7, r1
 8001bec:	2390      	movs	r3, #144	; 0x90
 8001bee:	05db      	lsls	r3, r3, #23
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fd7c 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF_RESET_Pin */
  GPIO_InitStruct.Pin = MRF_RESET_Pin;
 8001bf8:	0021      	movs	r1, r4
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2201      	movs	r2, #1
 8001c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2201      	movs	r2, #1
 8001c0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MRF_RESET_GPIO_Port, &GPIO_InitStruct);
 8001c12:	000c      	movs	r4, r1
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <MX_GPIO_Init+0x17c>)
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f000 fd68 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_INT_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8001c20:	0021      	movs	r1, r4
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2220      	movs	r2, #32
 8001c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2201      	movs	r2, #1
 8001c32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <MX_GPIO_Init+0x17c>)
 8001c38:	0019      	movs	r1, r3
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	f000 fd58 	bl	80026f0 <HAL_GPIO_Init>

}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b009      	add	sp, #36	; 0x24
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48001400 	.word	0x48001400

08001c54 <mrf_reset>:

/* USER CODE BEGIN 4 */
void mrf_reset(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MRF_RESET_GPIO_Port, MRF_RESET_Pin, 0);
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <mrf_reset+0x30>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fecb 	bl	80029fa <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c64:	200a      	movs	r0, #10
 8001c66:	f000 fbdb 	bl	8002420 <HAL_Delay>
    HAL_GPIO_WritePin(MRF_RESET_GPIO_Port, MRF_RESET_Pin, 1);
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <mrf_reset+0x30>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2110      	movs	r1, #16
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 fec2 	bl	80029fa <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001c76:	2014      	movs	r0, #20
 8001c78:	f000 fbd2 	bl	8002420 <HAL_Delay>
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	48000400 	.word	0x48000400

08001c88 <handle_rx>:

void handle_rx(mrf_rx_info_t *rxinfo, uint8_t *rx_buffer) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    printf("MRF RSSI=%d\n", rxinfo->rssi);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7a9b      	ldrb	r3, [r3, #10]
 8001c96:	001a      	movs	r2, r3
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <handle_rx+0x24>)
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f003 fda5 	bl	80057ec <iprintf>
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	0800697c 	.word	0x0800697c

08001cb0 <handle_tx>:

void handle_tx(mrf_tx_info_t *txinfo) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    if (txinfo->tx_ok) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <handle_tx+0x1a>
        printf("MRF message sent!\n");
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <handle_tx+0x34>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f003 fe20 	bl	8005908 <puts>
    } else {
        printf("MRF transmission failed after %d retries\n", txinfo->retries);
    }
}
 8001cc8:	e007      	b.n	8001cda <handle_tx+0x2a>
        printf("MRF transmission failed after %d retries\n", txinfo->retries);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	001a      	movs	r2, r3
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <handle_tx+0x38>)
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f003 fd89 	bl	80057ec <iprintf>
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	0800698c 	.word	0x0800698c
 8001ce8:	080069a0 	.word	0x080069a0

08001cec <mrf_select>:

void mrf_select(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MRF_NSS_GPIO_Port, MRF_NSS_Pin, 0);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <mrf_select+0x1c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 fe7f 	bl	80029fa <HAL_GPIO_WritePin>
	_delay_ms(100);
 8001cfc:	2064      	movs	r0, #100	; 0x64
 8001cfe:	f000 f82b 	bl	8001d58 <_delay_ms>
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	48000400 	.word	0x48000400

08001d0c <mrf_deselect>:

void mrf_deselect(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MRF_NSS_GPIO_Port, MRF_NSS_Pin, 1);
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <mrf_deselect+0x18>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	2101      	movs	r1, #1
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 fe6f 	bl	80029fa <HAL_GPIO_WritePin>
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	48000400 	.word	0x48000400

08001d28 <spi_tx>:

uint8_t spi_tx(uint8_t cData){
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	0002      	movs	r2, r0
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	701a      	strb	r2, [r3, #0]
	uint8_t buff;
	HAL_SPI_TransmitReceive(&hspi1, &cData, &buff, sizeof(buff), 100);
 8001d34:	240f      	movs	r4, #15
 8001d36:	193a      	adds	r2, r7, r4
 8001d38:	1df9      	adds	r1, r7, #7
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <spi_tx+0x2c>)
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	f001 ff2f 	bl	8003ba4 <HAL_SPI_TransmitReceive>
	return buff;
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	781b      	ldrb	r3, [r3, #0]
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b005      	add	sp, #20
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	200001ac 	.word	0x200001ac

08001d58 <_delay_ms>:

void _delay_ms(int t){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(t);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 fb5c 	bl	8002420 <HAL_Delay>
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <transmit_mrf>:

void transmit_mrf(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	printf("Sending MRF...");
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <transmit_mrf+0x48>)
 8001d76:	0018      	movs	r0, r3
 8001d78:	f003 fd38 	bl	80057ec <iprintf>
	mrf_send16(0xFFFF, 8,&DEVICE_ID);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <transmit_mrf+0x4c>)
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <transmit_mrf+0x50>)
 8001d80:	001a      	movs	r2, r3
 8001d82:	2108      	movs	r1, #8
 8001d84:	f7fe fd7c 	bl	8000880 <mrf_send16>
	HAL_Delay(500);
 8001d88:	23fa      	movs	r3, #250	; 0xfa
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 fb47 	bl	8002420 <HAL_Delay>
	mrf_check_flags(&handle_rx, &handle_tx);
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <transmit_mrf+0x54>)
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <transmit_mrf+0x58>)
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7fe ffa5 	bl	8000ce8 <mrf_check_flags>
	if (HAL_GPIO_ReadPin(MRF_INT_GPIO_Port, MRF_INT_Pin) == 0){
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <transmit_mrf+0x5c>)
 8001da0:	2102      	movs	r1, #2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 fe0c 	bl	80029c0 <HAL_GPIO_ReadPin>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d101      	bne.n	8001db0 <transmit_mrf+0x40>
		mrf_interrupt_handler();
 8001dac:	f7fe fe9a 	bl	8000ae4 <mrf_interrupt_handler>
	}
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	080069cc 	.word	0x080069cc
 8001dbc:	08006aa4 	.word	0x08006aa4
 8001dc0:	0000ffff 	.word	0x0000ffff
 8001dc4:	08001cb1 	.word	0x08001cb1
 8001dc8:	08001c89 	.word	0x08001c89
 8001dcc:	48001400 	.word	0x48001400

08001dd0 <transmit_lora>:

void transmit_lora(lora_sx1276 lora){
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	b5b0      	push	{r4, r5, r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	2518      	movs	r5, #24
 8001dda:	197c      	adds	r4, r7, r5
 8001ddc:	6020      	str	r0, [r4, #0]
 8001dde:	6061      	str	r1, [r4, #4]
 8001de0:	60a2      	str	r2, [r4, #8]
 8001de2:	60e3      	str	r3, [r4, #12]
	printf("Sending LORA...");
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <transmit_lora+0x60>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f003 fd00 	bl	80057ec <iprintf>

	uint8_t res = lora_send_packet(&lora, (uint8_t *)DEVICE_ID, 1);
 8001dec:	1dfc      	adds	r4, r7, #7
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <transmit_lora+0x64>)
 8001df0:	1978      	adds	r0, r7, r5
 8001df2:	2201      	movs	r2, #1
 8001df4:	0019      	movs	r1, r3
 8001df6:	f7ff fb4e 	bl	8001496 <lora_send_packet>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]
	HAL_Delay(300);
 8001dfe:	2396      	movs	r3, #150	; 0x96
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fb0c 	bl	8002420 <HAL_Delay>
	if (res != LORA_OK) {
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <transmit_lora+0x4a>
		// Send failed
		printf("Send failed\n");
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <transmit_lora+0x68>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f003 fd78 	bl	8005908 <puts>
	}
	else {
		printf("Packet sent!\n");
	}
}
 8001e18:	e003      	b.n	8001e22 <transmit_lora+0x52>
		printf("Packet sent!\n");
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <transmit_lora+0x6c>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f003 fd73 	bl	8005908 <puts>
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bcb0      	pop	{r4, r5, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	b004      	add	sp, #16
 8001e2e:	4718      	bx	r3
 8001e30:	080069dc 	.word	0x080069dc
 8001e34:	08006aa4 	.word	0x08006aa4
 8001e38:	080069ec 	.word	0x080069ec
 8001e3c:	080069f8 	.word	0x080069f8

08001e40 <receive_mrf>:

void receive_mrf(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	printf("MRF receiving....");
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <receive_mrf+0x40>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f003 fcd0 	bl	80057ec <iprintf>
	mrf_check_flags(&handle_rx, &handle_tx);
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <receive_mrf+0x44>)
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <receive_mrf+0x48>)
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7fe ff48 	bl	8000ce8 <mrf_check_flags>
	if (HAL_GPIO_ReadPin(MRF_INT_GPIO_Port, MRF_INT_Pin) == 0){
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <receive_mrf+0x4c>)
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 fdaf 	bl	80029c0 <HAL_GPIO_ReadPin>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d105      	bne.n	8001e72 <receive_mrf+0x32>
		printf("\n");
 8001e66:	200a      	movs	r0, #10
 8001e68:	f003 fcda 	bl	8005820 <putchar>
		mrf_interrupt_handler();
 8001e6c:	f7fe fe3a 	bl	8000ae4 <mrf_interrupt_handler>
	} else {
		printf(" Nothing to receive!\n");
	}

}
 8001e70:	e003      	b.n	8001e7a <receive_mrf+0x3a>
		printf(" Nothing to receive!\n");
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <receive_mrf+0x50>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f003 fd47 	bl	8005908 <puts>
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	08006a08 	.word	0x08006a08
 8001e84:	08001cb1 	.word	0x08001cb1
 8001e88:	08001c89 	.word	0x08001c89
 8001e8c:	48001400 	.word	0x48001400
 8001e90:	08006a1c 	.word	0x08006a1c

08001e94 <receive_lora>:

void receive_lora(lora_sx1276 lora){
 8001e94:	b084      	sub	sp, #16
 8001e96:	b5b0      	push	{r4, r5, r7, lr}
 8001e98:	b08c      	sub	sp, #48	; 0x30
 8001e9a:	af02      	add	r7, sp, #8
 8001e9c:	2538      	movs	r5, #56	; 0x38
 8001e9e:	197c      	adds	r4, r7, r5
 8001ea0:	6020      	str	r0, [r4, #0]
 8001ea2:	6061      	str	r1, [r4, #4]
 8001ea4:	60a2      	str	r2, [r4, #8]
 8001ea6:	60e3      	str	r3, [r4, #12]
	printf("Lora receiving....");
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <receive_lora+0x98>)
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f003 fc9e 	bl	80057ec <iprintf>
	uint8_t buffer[32];

	lora_mode_receive_continious(&lora);
 8001eb0:	197b      	adds	r3, r7, r5
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff f8f3 	bl	800109e <lora_mode_receive_continious>

	uint8_t res;
	uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 3000, &res);
 8001eb8:	2327      	movs	r3, #39	; 0x27
 8001eba:	18fc      	adds	r4, r7, r3
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <receive_lora+0x9c>)
 8001ebe:	1d39      	adds	r1, r7, #4
 8001ec0:	1978      	adds	r0, r7, r5
 8001ec2:	1cfb      	adds	r3, r7, #3
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f7ff fbc8 	bl	800165e <lora_receive_packet_blocking>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	7023      	strb	r3, [r4, #0]
	uint8_t rssi = lora_packet_rssi(&lora);
 8001ed2:	2326      	movs	r3, #38	; 0x26
 8001ed4:	18fc      	adds	r4, r7, r3
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff f9cf 	bl	800127c <lora_packet_rssi>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	7023      	strb	r3, [r4, #0]
	if (res != LORA_OK) {
 8001ee2:	1cfb      	adds	r3, r7, #3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <receive_lora+0x60>
		printf(" No message received!\n");
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <receive_lora+0xa0>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f003 fd0b 	bl	8005908 <puts>
	} else {
		buffer[len] = 0;  // null terminate string to print it
		printf("success!\nData: %s\n", buffer);
		printf("LORA RSSI = %d\n", rssi);
	}
}
 8001ef2:	e013      	b.n	8001f1c <receive_lora+0x88>
		buffer[len] = 0;  // null terminate string to print it
 8001ef4:	2327      	movs	r3, #39	; 0x27
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	1d3a      	adds	r2, r7, #4
 8001efc:	2100      	movs	r1, #0
 8001efe:	54d1      	strb	r1, [r2, r3]
		printf("success!\nData: %s\n", buffer);
 8001f00:	1d3a      	adds	r2, r7, #4
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <receive_lora+0xa4>)
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f003 fc70 	bl	80057ec <iprintf>
		printf("LORA RSSI = %d\n", rssi);
 8001f0c:	2326      	movs	r3, #38	; 0x26
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <receive_lora+0xa8>)
 8001f14:	0011      	movs	r1, r2
 8001f16:	0018      	movs	r0, r3
 8001f18:	f003 fc68 	bl	80057ec <iprintf>
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b00a      	add	sp, #40	; 0x28
 8001f22:	bcb0      	pop	{r4, r5, r7}
 8001f24:	bc08      	pop	{r3}
 8001f26:	b004      	add	sp, #16
 8001f28:	4718      	bx	r3
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	08006a34 	.word	0x08006a34
 8001f30:	00000bb8 	.word	0x00000bb8
 8001f34:	08006a48 	.word	0x08006a48
 8001f38:	08006a60 	.word	0x08006a60
 8001f3c:	08006a74 	.word	0x08006a74

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <RetargetInit+0x28>)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <RetargetInit+0x2c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	2300      	movs	r3, #0
 8001f62:	2202      	movs	r2, #2
 8001f64:	2100      	movs	r1, #0
 8001f66:	f003 fcd9 	bl	800591c <setvbuf>
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000210 	.word	0x20000210
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <_isatty>:

int _isatty(int fd) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db04      	blt.n	8001f94 <_isatty+0x18>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	dc01      	bgt.n	8001f94 <_isatty+0x18>
    return 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e005      	b.n	8001fa0 <_isatty+0x24>

  errno = EBADF;
 8001f94:	f003 fbf8 	bl	8005788 <__errno>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	2209      	movs	r2, #9
 8001f9c:	601a      	str	r2, [r3, #0]
  return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_write>:

int _write(int fd, char* ptr, int len) {
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <_write+0x18>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d114      	bne.n	8001fea <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <_write+0x58>)
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2517      	movs	r5, #23
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	2301      	movs	r3, #1
 8001fce:	425b      	negs	r3, r3
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	f002 ff73 	bl	8004ebc <HAL_UART_Transmit>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001fda:	197b      	adds	r3, r7, r5
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <_write+0x3e>
      return len;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	e008      	b.n	8001ff8 <_write+0x50>
    else
      return EIO;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e006      	b.n	8001ff8 <_write+0x50>
  }
  errno = EBADF;
 8001fea:	f003 fbcd 	bl	8005788 <__errno>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	2209      	movs	r2, #9
 8001ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	425b      	negs	r3, r3
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b006      	add	sp, #24
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	20000210 	.word	0x20000210

08002004 <_close>:

int _close(int fd) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db04      	blt.n	800201c <_close+0x18>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	dc01      	bgt.n	800201c <_close+0x18>
    return 0;
 8002018:	2300      	movs	r3, #0
 800201a:	e006      	b.n	800202a <_close+0x26>

  errno = EBADF;
 800201c:	f003 fbb4 	bl	8005788 <__errno>
 8002020:	0003      	movs	r3, r0
 8002022:	2209      	movs	r2, #9
 8002024:	601a      	str	r2, [r3, #0]
  return -1;
 8002026:	2301      	movs	r3, #1
 8002028:	425b      	negs	r3, r3
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}

08002032 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800203e:	f003 fba3 	bl	8005788 <__errno>
 8002042:	0003      	movs	r3, r0
 8002044:	2209      	movs	r2, #9
 8002046:	601a      	str	r2, [r3, #0]
  return -1;
 8002048:	2301      	movs	r3, #1
 800204a:	425b      	negs	r3, r3
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <_read>:

int _read(int fd, char* ptr, int len) {
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d113      	bne.n	800208e <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <_read+0x50>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	2517      	movs	r5, #23
 800206c:	197c      	adds	r4, r7, r5
 800206e:	2301      	movs	r3, #1
 8002070:	425b      	negs	r3, r3
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	2201      	movs	r2, #1
 8002076:	f002 ffc9 	bl	800500c <HAL_UART_Receive>
 800207a:	0003      	movs	r3, r0
 800207c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800207e:	197b      	adds	r3, r7, r5
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <_read+0x36>
      return 1;
 8002086:	2301      	movs	r3, #1
 8002088:	e008      	b.n	800209c <_read+0x48>
    else
      return EIO;
 800208a:	2305      	movs	r3, #5
 800208c:	e006      	b.n	800209c <_read+0x48>
  }
  errno = EBADF;
 800208e:	f003 fb7b 	bl	8005788 <__errno>
 8002092:	0003      	movs	r3, r0
 8002094:	2209      	movs	r2, #9
 8002096:	601a      	str	r2, [r3, #0]
  return -1;
 8002098:	2301      	movs	r3, #1
 800209a:	425b      	negs	r3, r3
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	20000210 	.word	0x20000210

080020a8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db08      	blt.n	80020ca <_fstat+0x22>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	dc05      	bgt.n	80020ca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	0192      	lsls	r2, r2, #6
 80020c4:	605a      	str	r2, [r3, #4]
    return 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e005      	b.n	80020d6 <_fstat+0x2e>
  }

  errno = EBADF;
 80020ca:	f003 fb5d 	bl	8005788 <__errno>
 80020ce:	0003      	movs	r3, r0
 80020d0:	2209      	movs	r2, #9
 80020d2:	601a      	str	r2, [r3, #0]
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_MspInit+0x44>)
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_MspInit+0x44>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	619a      	str	r2, [r3, #24]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_MspInit+0x44>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x44>)
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_MspInit+0x44>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0549      	lsls	r1, r1, #21
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_MspInit+0x44>)
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	055b      	lsls	r3, r3, #21
 8002114:	4013      	ands	r3, r2
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	2314      	movs	r3, #20
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	0018      	movs	r0, r3
 8002136:	2314      	movs	r3, #20
 8002138:	001a      	movs	r2, r3
 800213a:	2100      	movs	r1, #0
 800213c:	f003 fb4e 	bl	80057dc <memset>
  if(hspi->Instance==SPI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d132      	bne.n	80021b0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_SPI_MspInit+0x94>)
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_SPI_MspInit+0x94>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0149      	lsls	r1, r1, #5
 8002154:	430a      	orrs	r2, r1
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <HAL_SPI_MspInit+0x94>)
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_SPI_MspInit+0x94>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_SPI_MspInit+0x94>)
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0289      	lsls	r1, r1, #10
 8002170:	430a      	orrs	r2, r1
 8002172:	615a      	str	r2, [r3, #20]
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_SPI_MspInit+0x94>)
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002182:	2114      	movs	r1, #20
 8002184:	187b      	adds	r3, r7, r1
 8002186:	22e0      	movs	r2, #224	; 0xe0
 8002188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2202      	movs	r2, #2
 800218e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	187b      	adds	r3, r7, r1
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2203      	movs	r2, #3
 800219a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	187a      	adds	r2, r7, r1
 80021a4:	2390      	movs	r3, #144	; 0x90
 80021a6:	05db      	lsls	r3, r3, #23
 80021a8:	0011      	movs	r1, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 faa0 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b00a      	add	sp, #40	; 0x28
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013000 	.word	0x40013000
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	2314      	movs	r3, #20
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	0018      	movs	r0, r3
 80021ce:	2314      	movs	r3, #20
 80021d0:	001a      	movs	r2, r3
 80021d2:	2100      	movs	r1, #0
 80021d4:	f003 fb02 	bl	80057dc <memset>
  if(huart->Instance==USART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_UART_MspInit+0x90>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d132      	bne.n	8002248 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_UART_MspInit+0x94>)
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_UART_MspInit+0x94>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	01c9      	lsls	r1, r1, #7
 80021ec:	430a      	orrs	r2, r1
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x94>)
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_UART_MspInit+0x94>)
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_UART_MspInit+0x94>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0289      	lsls	r1, r1, #10
 8002208:	430a      	orrs	r2, r1
 800220a:	615a      	str	r2, [r3, #20]
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_UART_MspInit+0x94>)
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800221a:	2114      	movs	r1, #20
 800221c:	187b      	adds	r3, r7, r1
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2202      	movs	r2, #2
 8002226:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2203      	movs	r2, #3
 8002232:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2201      	movs	r2, #1
 8002238:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	187a      	adds	r2, r7, r1
 800223c:	2390      	movs	r3, #144	; 0x90
 800223e:	05db      	lsls	r3, r3, #23
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fa54 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b00a      	add	sp, #40	; 0x28
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40013800 	.word	0x40013800
 8002254:	40021000 	.word	0x40021000

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <HardFault_Handler+0x4>

08002268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002280:	f000 f8b2 	bl	80023e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f003 fa64 	bl	8005788 <__errno>
 80022c0:	0003      	movs	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	425b      	negs	r3, r3
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	18d2      	adds	r2, r2, r3
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b006      	add	sp, #24
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20001000 	.word	0x20001000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	2000011c 	.word	0x2000011c
 80022f4:	20000220 	.word	0x20000220

080022f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <LoopForever+0x6>)
  ldr r1, =_edata
 800230a:	490e      	ldr	r1, [pc, #56]	; (8002344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <LoopForever+0xe>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002320:	4c0b      	ldr	r4, [pc, #44]	; (8002350 <LoopForever+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800232e:	f7ff ffe3 	bl	80022f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002332:	f003 fa2f 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002336:	f7ff fa33 	bl	80017a0 <main>

0800233a <LoopForever>:

LoopForever:
    b LoopForever
 800233a:	e7fe      	b.n	800233a <LoopForever>
  ldr   r0, =_estack
 800233c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002348:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 800234c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002350:	2000021c 	.word	0x2000021c

08002354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_IRQHandler>
	...

08002358 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_Init+0x24>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_Init+0x24>)
 8002362:	2110      	movs	r1, #16
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f809 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236e:	f7ff feb7 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40022000 	.word	0x40022000

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_InitTick+0x5c>)
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_InitTick+0x60>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	0019      	movs	r1, r3
 8002392:	23fa      	movs	r3, #250	; 0xfa
 8002394:	0098      	lsls	r0, r3, #2
 8002396:	f7fd feb7 	bl	8000108 <__udivsi3>
 800239a:	0003      	movs	r3, r0
 800239c:	0019      	movs	r1, r3
 800239e:	0020      	movs	r0, r4
 80023a0:	f7fd feb2 	bl	8000108 <__udivsi3>
 80023a4:	0003      	movs	r3, r0
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f903 	bl	80025b2 <HAL_SYSTICK_Config>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e00f      	b.n	80023d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d80b      	bhi.n	80023d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	2301      	movs	r3, #1
 80023be:	425b      	negs	r3, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f8e0 	bl	8002588 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_InitTick+0x64>)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b003      	add	sp, #12
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000008 	.word	0x20000008
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_IncTick+0x1c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	001a      	movs	r2, r3
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_IncTick+0x20>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	18d2      	adds	r2, r2, r3
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_IncTick+0x20>)
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	20000008 	.word	0x20000008
 8002408:	20000214 	.word	0x20000214

0800240c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <HAL_GetTick+0x10>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	20000214 	.word	0x20000214

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff fff0 	bl	800240c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_Delay+0x40>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	001a      	movs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	189b      	adds	r3, r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	f7ff ffe0 	bl	800240c <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000008 	.word	0x20000008

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b7f      	cmp	r3, #127	; 0x7f
 8002478:	d828      	bhi.n	80024cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <__NVIC_SetPriority+0xd4>)
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	33c0      	adds	r3, #192	; 0xc0
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	589b      	ldr	r3, [r3, r2]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	; 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	481f      	ldr	r0, [pc, #124]	; (8002538 <__NVIC_SetPriority+0xd4>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	430a      	orrs	r2, r1
 80024c4:	33c0      	adds	r3, #192	; 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ca:	e031      	b.n	8002530 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <__NVIC_SetPriority+0xd8>)
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0019      	movs	r1, r3
 80024d4:	230f      	movs	r3, #15
 80024d6:	400b      	ands	r3, r1
 80024d8:	3b08      	subs	r3, #8
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3306      	adds	r3, #6
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1dfa      	adds	r2, r7, #7
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	0011      	movs	r1, r2
 80024ec:	2203      	movs	r2, #3
 80024ee:	400a      	ands	r2, r1
 80024f0:	00d2      	lsls	r2, r2, #3
 80024f2:	21ff      	movs	r1, #255	; 0xff
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	43d2      	mvns	r2, r2
 80024fa:	401a      	ands	r2, r3
 80024fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	401a      	ands	r2, r3
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	2303      	movs	r3, #3
 800250e:	4003      	ands	r3, r0
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002514:	4809      	ldr	r0, [pc, #36]	; (800253c <__NVIC_SetPriority+0xd8>)
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	001c      	movs	r4, r3
 800251c:	230f      	movs	r3, #15
 800251e:	4023      	ands	r3, r4
 8002520:	3b08      	subs	r3, #8
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	430a      	orrs	r2, r1
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	18c3      	adds	r3, r0, r3
 800252c:	3304      	adds	r3, #4
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b003      	add	sp, #12
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <SysTick_Config+0x40>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e010      	b.n	8002578 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <SysTick_Config+0x44>)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	3a01      	subs	r2, #1
 800255c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	2301      	movs	r3, #1
 8002560:	425b      	negs	r3, r3
 8002562:	2103      	movs	r1, #3
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff7d 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SysTick_Config+0x44>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x44>)
 8002572:	2207      	movs	r2, #7
 8002574:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	00ffffff 	.word	0x00ffffff
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	210f      	movs	r1, #15
 8002594:	187b      	adds	r3, r7, r1
 8002596:	1c02      	adds	r2, r0, #0
 8002598:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	187b      	adds	r3, r7, r1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff ffbf 	bl	8002540 <SysTick_Config>
 80025c2:	0003      	movs	r3, r0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80025da:	2317      	movs	r3, #23
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Start_IT+0x24>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e04f      	b.n	8002690 <HAL_DMA_Start_IT+0xc4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2221      	movs	r2, #33	; 0x21
 80025fc:	5c9b      	ldrb	r3, [r3, r2]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d13a      	bne.n	800267a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2221      	movs	r2, #33	; 0x21
 8002608:	2102      	movs	r1, #2
 800260a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f835 	bl	8002698 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	210e      	movs	r1, #14
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e00f      	b.n	8002668 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	210a      	movs	r1, #10
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2104      	movs	r1, #4
 8002664:	438a      	bics	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e007      	b.n	800268a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002682:	2317      	movs	r3, #23
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
} 
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b006      	add	sp, #24
 8002696:	bd80      	pop	{r7, pc}

08002698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2101      	movs	r1, #1
 80026b0:	4091      	lsls	r1, r2
 80026b2:	000a      	movs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d108      	bne.n	80026d8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026d6:	e007      	b.n	80026e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	60da      	str	r2, [r3, #12]
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e149      	b.n	8002994 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4091      	lsls	r1, r2
 800270a:	000a      	movs	r2, r1
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d100      	bne.n	8002718 <HAL_GPIO_Init+0x28>
 8002716:	e13a      	b.n	800298e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d00b      	beq.n	8002738 <HAL_GPIO_Init+0x48>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800272c:	2b11      	cmp	r3, #17
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b12      	cmp	r3, #18
 8002736:	d130      	bne.n	800279a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	409a      	lsls	r2, r3
 8002746:	0013      	movs	r3, r2
 8002748:	43da      	mvns	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	0013      	movs	r3, r2
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276e:	2201      	movs	r2, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	43da      	mvns	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	2201      	movs	r2, #1
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	43da      	mvns	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0xea>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d123      	bne.n	8002822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	58d3      	ldr	r3, [r2, r3]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2207      	movs	r2, #7
 80027ec:	4013      	ands	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	43da      	mvns	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2107      	movs	r1, #7
 8002806:	400b      	ands	r3, r1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	409a      	lsls	r2, r3
 800280c:	0013      	movs	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	6939      	ldr	r1, [r7, #16]
 8002820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	43da      	mvns	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2203      	movs	r2, #3
 8002840:	401a      	ands	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	0013      	movs	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	055b      	lsls	r3, r3, #21
 800285e:	4013      	ands	r3, r2
 8002860:	d100      	bne.n	8002864 <HAL_GPIO_Init+0x174>
 8002862:	e094      	b.n	800298e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x2bc>)
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_GPIO_Init+0x2bc>)
 800286a:	2101      	movs	r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	619a      	str	r2, [r3, #24]
 8002870:	4b4e      	ldr	r3, [pc, #312]	; (80029ac <HAL_GPIO_Init+0x2bc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800287c:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_GPIO_Init+0x2c0>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	589b      	ldr	r3, [r3, r2]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2203      	movs	r2, #3
 800288e:	4013      	ands	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	409a      	lsls	r2, r3
 8002896:	0013      	movs	r3, r2
 8002898:	43da      	mvns	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	2390      	movs	r3, #144	; 0x90
 80028a4:	05db      	lsls	r3, r3, #23
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x1d6>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a41      	ldr	r2, [pc, #260]	; (80029b4 <HAL_GPIO_Init+0x2c4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x1d2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a40      	ldr	r2, [pc, #256]	; (80029b8 <HAL_GPIO_Init+0x2c8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x1ce>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x1d8>
 80028be:	2305      	movs	r3, #5
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x1d8>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x1d8>
 80028c6:	2300      	movs	r3, #0
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	2103      	movs	r1, #3
 80028cc:	400a      	ands	r2, r1
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d8:	4935      	ldr	r1, [pc, #212]	; (80029b0 <HAL_GPIO_Init+0x2c0>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4013      	ands	r3, r2
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800290a:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43da      	mvns	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	4013      	ands	r3, r2
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	035b      	lsls	r3, r3, #13
 8002952:	4013      	ands	r3, r2
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43da      	mvns	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	039b      	lsls	r3, r3, #14
 800297c:	4013      	ands	r3, r2
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	40da      	lsrs	r2, r3
 800299c:	1e13      	subs	r3, r2, #0
 800299e:	d000      	beq.n	80029a2 <HAL_GPIO_Init+0x2b2>
 80029a0:	e6ae      	b.n	8002700 <HAL_GPIO_Init+0x10>
  } 
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000
 80029b4:	48000400 	.word	0x48000400
 80029b8:	48000800 	.word	0x48000800
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	000a      	movs	r2, r1
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	1cba      	adds	r2, r7, #2
 80029d4:	8812      	ldrh	r2, [r2, #0]
 80029d6:	4013      	ands	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029da:	230f      	movs	r3, #15
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e003      	b.n	80029ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029e4:	230f      	movs	r3, #15
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
  }
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	0008      	movs	r0, r1
 8002a04:	0011      	movs	r1, r2
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	1c02      	adds	r2, r0, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	1c7b      	adds	r3, r7, #1
 8002a0e:	1c0a      	adds	r2, r1, #0
 8002a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a12:	1c7b      	adds	r3, r7, #1
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a22:	e003      	b.n	8002a2c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a24:	1cbb      	adds	r3, r7, #2
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	1cbb      	adds	r3, r7, #2
 8002a40:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a48:	1cbb      	adds	r3, r7, #2
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	1cb9      	adds	r1, r7, #2
 8002a58:	8809      	ldrh	r1, [r1, #0]
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e303      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0x1e>
 8002a88:	e08d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a8a:	4bc4      	ldr	r3, [pc, #784]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	220c      	movs	r2, #12
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00e      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a96:	4bc1      	ldr	r3, [pc, #772]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x64>
 8002aa2:	4bbe      	ldr	r3, [pc, #760]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	025b      	lsls	r3, r3, #9
 8002aaa:	401a      	ands	r2, r3
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	4bb9      	ldr	r3, [pc, #740]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x56>
 8002ac0:	e070      	b.n	8002ba4 <HAL_RCC_OscConfig+0x138>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d000      	beq.n	8002acc <HAL_RCC_OscConfig+0x60>
 8002aca:	e06b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e2da      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x7c>
 8002ad8:	4bb0      	ldr	r3, [pc, #704]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4baf      	ldr	r3, [pc, #700]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0249      	lsls	r1, r1, #9
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e02f      	b.n	8002b48 <HAL_RCC_OscConfig+0xdc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x9e>
 8002af0:	4baa      	ldr	r3, [pc, #680]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4ba9      	ldr	r3, [pc, #676]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002af6:	49aa      	ldr	r1, [pc, #680]	; (8002da0 <HAL_RCC_OscConfig+0x334>)
 8002af8:	400a      	ands	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4ba7      	ldr	r3, [pc, #668]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4ba6      	ldr	r3, [pc, #664]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b02:	49a8      	ldr	r1, [pc, #672]	; (8002da4 <HAL_RCC_OscConfig+0x338>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e01e      	b.n	8002b48 <HAL_RCC_OscConfig+0xdc>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10e      	bne.n	8002b30 <HAL_RCC_OscConfig+0xc4>
 8002b12:	4ba2      	ldr	r3, [pc, #648]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4ba1      	ldr	r3, [pc, #644]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	02c9      	lsls	r1, r1, #11
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	4b9e      	ldr	r3, [pc, #632]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b9d      	ldr	r3, [pc, #628]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	0249      	lsls	r1, r1, #9
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xdc>
 8002b30:	4b9a      	ldr	r3, [pc, #616]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b36:	499a      	ldr	r1, [pc, #616]	; (8002da0 <HAL_RCC_OscConfig+0x334>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b97      	ldr	r3, [pc, #604]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b96      	ldr	r3, [pc, #600]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b42:	4998      	ldr	r1, [pc, #608]	; (8002da4 <HAL_RCC_OscConfig+0x338>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d014      	beq.n	8002b7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff fc5c 	bl	800240c <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5a:	f7ff fc57 	bl	800240c <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	; 0x64
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e28c      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6c:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	4013      	ands	r3, r2
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0xee>
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fc47 	bl	800240c <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff fc42 	bl	800240c <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e277      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x118>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x146>
 8002bb0:	e069      	b.n	8002c86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bb2:	4b7a      	ldr	r3, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d00b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bbc:	4b77      	ldr	r3, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d11c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x196>
 8002bc8:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d116      	bne.n	8002c02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e24d      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	22f8      	movs	r2, #248	; 0xf8
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00da      	lsls	r2, r3, #3
 8002bfa:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c00:	e041      	b.n	8002c86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d024      	beq.n	8002c54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0a:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7ff fbf9 	bl	800240c <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c20:	f7ff fbf4 	bl	800240c <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e229      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d0f1      	beq.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b57      	ldr	r3, [pc, #348]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	22f8      	movs	r2, #248	; 0xf8
 8002c42:	4393      	bics	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00da      	lsls	r2, r3, #3
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fbd4 	bl	800240c <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fbcf 	bl	800240c <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e204      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1f1      	bne.n	8002c6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d036      	beq.n	8002cfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9c:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fbb2 	bl	800240c <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cae:	f7ff fbad 	bl	800240c <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1e2      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d0f1      	beq.n	8002cae <HAL_RCC_OscConfig+0x242>
 8002cca:	e018      	b.n	8002cfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fb98 	bl	800240c <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fb93 	bl	800240c <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1c8      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d1f1      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	d100      	bne.n	8002d0a <HAL_RCC_OscConfig+0x29e>
 8002d08:	e0b6      	b.n	8002e78 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	231f      	movs	r3, #31
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	055b      	lsls	r3, r3, #21
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d111      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0549      	lsls	r1, r1, #21
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	61da      	str	r2, [r3, #28]
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	055b      	lsls	r3, r3, #21
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_OscConfig+0x33c>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_OscConfig+0x33c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_RCC_OscConfig+0x33c>)
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0049      	lsls	r1, r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fb56 	bl	800240c <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7ff fb51 	bl	800240c <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e186      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x33c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10f      	bne.n	8002dac <HAL_RCC_OscConfig+0x340>
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <HAL_RCC_OscConfig+0x330>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
 8002d98:	e036      	b.n	8002e08 <HAL_RCC_OscConfig+0x39c>
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	fffeffff 	.word	0xfffeffff
 8002da4:	fffbffff 	.word	0xfffbffff
 8002da8:	40007000 	.word	0x40007000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x362>
 8002db4:	4bb6      	ldr	r3, [pc, #728]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	4bb5      	ldr	r3, [pc, #724]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	621a      	str	r2, [r3, #32]
 8002dc0:	4bb3      	ldr	r3, [pc, #716]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	4bb2      	ldr	r3, [pc, #712]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	438a      	bics	r2, r1
 8002dca:	621a      	str	r2, [r3, #32]
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x39c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x384>
 8002dd6:	4bae      	ldr	r3, [pc, #696]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	4bad      	ldr	r3, [pc, #692]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002ddc:	2104      	movs	r1, #4
 8002dde:	430a      	orrs	r2, r1
 8002de0:	621a      	str	r2, [r3, #32]
 8002de2:	4bab      	ldr	r3, [pc, #684]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	4baa      	ldr	r3, [pc, #680]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	430a      	orrs	r2, r1
 8002dec:	621a      	str	r2, [r3, #32]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0x39c>
 8002df0:	4ba7      	ldr	r3, [pc, #668]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	4ba6      	ldr	r3, [pc, #664]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	621a      	str	r2, [r3, #32]
 8002dfc:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4ba3      	ldr	r3, [pc, #652]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e02:	2104      	movs	r1, #4
 8002e04:	438a      	bics	r2, r1
 8002e06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d014      	beq.n	8002e3a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7ff fafc 	bl	800240c <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7ff faf7 	bl	800240c <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	4a9b      	ldr	r2, [pc, #620]	; (8003094 <HAL_RCC_OscConfig+0x628>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e12b      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	4b98      	ldr	r3, [pc, #608]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3ae>
 8002e38:	e013      	b.n	8002e62 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff fae7 	bl	800240c <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e42:	e009      	b.n	8002e58 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7ff fae2 	bl	800240c <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	4a91      	ldr	r2, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x628>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e116      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e62:	231f      	movs	r3, #31
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	4b87      	ldr	r3, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e72:	4989      	ldr	r1, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0x62c>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d12a      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e8a:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8e:	4b80      	ldr	r3, [pc, #512]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e90:	2104      	movs	r1, #4
 8002e92:	430a      	orrs	r2, r1
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e96:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e9a:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff fab3 	bl	800240c <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eac:	f7ff faae 	bl	800240c <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0e3      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ebe:	4b74      	ldr	r3, [pc, #464]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d0f1      	beq.n	8002eac <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ec8:	4b71      	ldr	r3, [pc, #452]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	22f8      	movs	r2, #248	; 0xf8
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	00da      	lsls	r2, r3, #3
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ede:	e034      	b.n	8002f4a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	3305      	adds	r3, #5
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002eee:	2104      	movs	r1, #4
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	22f8      	movs	r2, #248	; 0xf8
 8002efa:	4393      	bics	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	00da      	lsls	r2, r3, #3
 8002f04:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	e01e      	b.n	8002f4a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f0c:	4b60      	ldr	r3, [pc, #384]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f12:	2104      	movs	r1, #4
 8002f14:	430a      	orrs	r2, r1
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f18:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1c:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	438a      	bics	r2, r1
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7ff fa72 	bl	800240c <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f2e:	f7ff fa6d 	bl	800240c <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0a2      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	2202      	movs	r2, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	d1f1      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d100      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4e8>
 8002f52:	e097      	b.n	8003084 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	220c      	movs	r2, #12
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d100      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
 8002f60:	e06b      	b.n	800303a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d14c      	bne.n	8003004 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b48      	ldr	r3, [pc, #288]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f70:	494a      	ldr	r1, [pc, #296]	; (800309c <HAL_RCC_OscConfig+0x630>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7ff fa49 	bl	800240c <HAL_GetTick>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7ff fa44 	bl	800240c <HAL_GetTick>
 8002f84:	0002      	movs	r2, r0
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e079      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f92:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	049b      	lsls	r3, r3, #18
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <HAL_RCC_OscConfig+0x634>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	0449      	lsls	r1, r1, #17
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7ff fa17 	bl	800240c <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7ff fa12 	bl	800240c <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e047      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	049b      	lsls	r3, r3, #18
 8002ffe:	4013      	ands	r3, r2
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x578>
 8003002:	e03f      	b.n	8003084 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 800300a:	4924      	ldr	r1, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x630>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7ff f9fc 	bl	800240c <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7ff f9f7 	bl	800240c <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e02c      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	049b      	lsls	r3, r3, #18
 8003034:	4013      	ands	r3, r2
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x5ae>
 8003038:	e024      	b.n	8003084 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e01f      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_RCC_OscConfig+0x624>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	025b      	lsls	r3, r3, #9
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	429a      	cmp	r2, r3
 8003060:	d10e      	bne.n	8003080 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	220f      	movs	r2, #15
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	23f0      	movs	r3, #240	; 0xf0
 8003074:	039b      	lsls	r3, r3, #14
 8003076:	401a      	ands	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b008      	add	sp, #32
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	40021000 	.word	0x40021000
 8003094:	00001388 	.word	0x00001388
 8003098:	efffffff 	.word	0xefffffff
 800309c:	feffffff 	.word	0xfeffffff
 80030a0:	ffc2ffff 	.word	0xffc2ffff

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b3      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d911      	bls.n	80030ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4393      	bics	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	4b55      	ldr	r3, [pc, #340]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e09a      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2202      	movs	r2, #2
 80030f0:	4013      	ands	r3, r2
 80030f2:	d015      	beq.n	8003120 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2204      	movs	r2, #4
 80030fa:	4013      	ands	r3, r2
 80030fc:	d006      	beq.n	800310c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030fe:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 8003104:	21e0      	movs	r1, #224	; 0xe0
 8003106:	00c9      	lsls	r1, r1, #3
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	22f0      	movs	r2, #240	; 0xf0
 8003112:	4393      	bics	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b3e      	ldr	r3, [pc, #248]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	4013      	ands	r3, r2
 800313c:	d114      	bne.n	8003168 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06e      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	049b      	lsls	r3, r3, #18
 8003152:	4013      	ands	r3, r2
 8003154:	d108      	bne.n	8003168 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e062      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e05b      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2203      	movs	r2, #3
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7ff f946 	bl	800240c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	e009      	b.n	800319a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7ff f941 	bl	800240c <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_RCC_ClockConfig+0x18c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e042      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	220c      	movs	r2, #12
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ec      	bne.n	8003186 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d211      	bcs.n	80031de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x184>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e020      	b.n	8003220 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2204      	movs	r2, #4
 80031e4:	4013      	ands	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_RCC_ClockConfig+0x190>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031fc:	f000 f820 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8003200:	0001      	movs	r1, r0
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x188>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	220f      	movs	r2, #15
 800320a:	4013      	ands	r3, r2
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x194>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	000a      	movs	r2, r1
 8003212:	40da      	lsrs	r2, r3
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x198>)
 8003216:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff f8b1 	bl	8002380 <HAL_InitTick>
  
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40022000 	.word	0x40022000
 800322c:	40021000 	.word	0x40021000
 8003230:	00001388 	.word	0x00001388
 8003234:	fffff8ff 	.word	0xfffff8ff
 8003238:	08006aa8 	.word	0x08006aa8
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b08f      	sub	sp, #60	; 0x3c
 8003244:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003246:	2314      	movs	r3, #20
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800324e:	c313      	stmia	r3!, {r0, r1, r4}
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800325a:	c313      	stmia	r3!, {r0, r1, r4}
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
 8003268:	2300      	movs	r3, #0
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	220c      	movs	r2, #12
 800327e:	4013      	ands	r3, r2
 8003280:	2b04      	cmp	r3, #4
 8003282:	d002      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x4a>
 8003284:	2b08      	cmp	r3, #8
 8003286:	d003      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x50>
 8003288:	e02d      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0xc4>)
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800328e:	e02d      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	220f      	movs	r2, #15
 8003296:	4013      	ands	r3, r2
 8003298:	2214      	movs	r2, #20
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	220f      	movs	r2, #15
 80032a6:	4013      	ands	r3, r2
 80032a8:	1d3a      	adds	r2, r7, #4
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	4013      	ands	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ba:	4812      	ldr	r0, [pc, #72]	; (8003304 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032bc:	f7fc ff24 	bl	8000108 <__udivsi3>
 80032c0:	0003      	movs	r3, r0
 80032c2:	001a      	movs	r2, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	4353      	muls	r3, r2
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ca:	e009      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ce:	000a      	movs	r2, r1
 80032d0:	0152      	lsls	r2, r2, #5
 80032d2:	1a52      	subs	r2, r2, r1
 80032d4:	0193      	lsls	r3, r2, #6
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	185b      	adds	r3, r3, r1
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80032e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032e4:	e002      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b00f      	add	sp, #60	; 0x3c
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	08006a84 	.word	0x08006a84
 80032fc:	08006a94 	.word	0x08006a94
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_GetHCLKFreq+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000000 	.word	0x20000000

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003320:	f7ff fff2 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003324:	0001      	movs	r1, r0
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	2207      	movs	r2, #7
 800332e:	4013      	ands	r3, r2
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	40d9      	lsrs	r1, r3
 8003336:	000b      	movs	r3, r1
}    
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40021000 	.word	0x40021000
 8003344:	08006ab8 	.word	0x08006ab8

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	4013      	ands	r3, r2
 8003362:	d100      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003364:	e08f      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2317      	movs	r3, #23
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	055b      	lsls	r3, r3, #21
 8003376:	4013      	ands	r3, r2
 8003378:	d111      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	0549      	lsls	r1, r1, #21
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	055b      	lsls	r3, r3, #21
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2317      	movs	r3, #23
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0049      	lsls	r1, r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b8:	f7ff f828 	bl	800240c <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7ff f823 	bl	800240c <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	; 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e077      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	23c0      	movs	r3, #192	; 0xc0
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d034      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	23c0      	movs	r3, #192	; 0xc0
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d02c      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003402:	4b32      	ldr	r3, [pc, #200]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0249      	lsls	r1, r1, #9
 8003416:	430a      	orrs	r2, r1
 8003418:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003420:	492d      	ldr	r1, [pc, #180]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003422:	400a      	ands	r2, r1
 8003424:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	4013      	ands	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe ffea 	bl	800240c <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e009      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe ffe5 	bl	800240c <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e038      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	2202      	movs	r2, #2
 8003458:	4013      	ands	r3, r2
 800345a:	d0f0      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800346c:	430a      	orrs	r2, r1
 800346e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003470:	2317      	movs	r3, #23
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003480:	4917      	ldr	r1, [pc, #92]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003482:	400a      	ands	r2, r1
 8003484:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2203      	movs	r2, #3
 8003496:	4393      	bics	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2220      	movs	r2, #32
 80034aa:	4013      	ands	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	2210      	movs	r2, #16
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	fffffcff 	.word	0xfffffcff
 80034d8:	fffeffff 	.word	0xfffeffff
 80034dc:	00001388 	.word	0x00001388
 80034e0:	efffffff 	.word	0xefffffff

080034e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e08a      	b.n	800360c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	225d      	movs	r2, #93	; 0x5d
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	225c      	movs	r2, #92	; 0x5c
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f7fe fe08 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	225d      	movs	r2, #93	; 0x5d
 800351c:	2102      	movs	r1, #2
 800351e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	438a      	bics	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	23e0      	movs	r3, #224	; 0xe0
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	429a      	cmp	r2, r3
 800353a:	d902      	bls.n	8003542 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e002      	b.n	8003548 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	015b      	lsls	r3, r3, #5
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	23f0      	movs	r3, #240	; 0xf0
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	429a      	cmp	r2, r3
 8003552:	d008      	beq.n	8003566 <HAL_SPI_Init+0x82>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	23e0      	movs	r3, #224	; 0xe0
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	429a      	cmp	r2, r3
 800355e:	d002      	beq.n	8003566 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	23e0      	movs	r3, #224	; 0xe0
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	429a      	cmp	r2, r3
 8003578:	d903      	bls.n	8003582 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
 8003580:	e002      	b.n	8003588 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	400b      	ands	r3, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	0011      	movs	r1, r2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	2204      	movs	r2, #4
 80035cc:	401a      	ands	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	431a      	orrs	r2, r3
 80035e0:	0011      	movs	r1, r2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4907      	ldr	r1, [pc, #28]	; (8003614 <HAL_SPI_Init+0x130>)
 80035f8:	400a      	ands	r2, r1
 80035fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	225d      	movs	r2, #93	; 0x5d
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffff7ff 	.word	0xfffff7ff

08003618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	1dbb      	adds	r3, r7, #6
 8003626:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	225c      	movs	r2, #92	; 0x5c
 8003634:	5c9b      	ldrb	r3, [r3, r2]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_SPI_Transmit+0x26>
 800363a:	2302      	movs	r3, #2
 800363c:	e169      	b.n	8003912 <HAL_SPI_Transmit+0x2fa>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	225c      	movs	r2, #92	; 0x5c
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003646:	f7fe fee1 	bl	800240c <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800364e:	2316      	movs	r3, #22
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	1dba      	adds	r2, r7, #6
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	225d      	movs	r2, #93	; 0x5d
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d004      	beq.n	800366e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003664:	231f      	movs	r3, #31
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
    goto error;
 800366c:	e146      	b.n	80038fc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_SPI_Transmit+0x64>
 8003674:	1dbb      	adds	r3, r7, #6
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800367c:	231f      	movs	r3, #31
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
    goto error;
 8003684:	e13a      	b.n	80038fc <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	225d      	movs	r2, #93	; 0x5d
 800368a:	2103      	movs	r1, #3
 800368c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1dba      	adds	r2, r7, #6
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1dba      	adds	r2, r7, #6
 80036a6:	8812      	ldrh	r2, [r2, #0]
 80036a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2244      	movs	r2, #68	; 0x44
 80036b4:	2100      	movs	r1, #0
 80036b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2246      	movs	r2, #70	; 0x46
 80036bc:	2100      	movs	r1, #0
 80036be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d108      	bne.n	80036ea <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	01c9      	lsls	r1, r1, #7
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d007      	beq.n	8003708 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2140      	movs	r1, #64	; 0x40
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	23e0      	movs	r3, #224	; 0xe0
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	429a      	cmp	r2, r3
 8003712:	d94e      	bls.n	80037b2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_SPI_Transmit+0x10e>
 800371c:	2316      	movs	r3, #22
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d13f      	bne.n	80037a6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800374a:	e02c      	b.n	80037a6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2202      	movs	r2, #2
 8003754:	4013      	ands	r3, r2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d112      	bne.n	8003780 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	1c9a      	adds	r2, r3, #2
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377e:	e012      	b.n	80037a6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003780:	f7fe fe44 	bl	800240c <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d802      	bhi.n	8003796 <HAL_SPI_Transmit+0x17e>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	d102      	bne.n	800379c <HAL_SPI_Transmit+0x184>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800379c:	231f      	movs	r3, #31
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2203      	movs	r2, #3
 80037a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80037a4:	e0aa      	b.n	80038fc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1cd      	bne.n	800374c <HAL_SPI_Transmit+0x134>
 80037b0:	e080      	b.n	80038b4 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_SPI_Transmit+0x1ae>
 80037ba:	2316      	movs	r3, #22
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d000      	beq.n	80037c6 <HAL_SPI_Transmit+0x1ae>
 80037c4:	e071      	b.n	80038aa <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d912      	bls.n	80037f6 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b02      	subs	r3, #2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037f4:	e059      	b.n	80038aa <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800381c:	e045      	b.n	80038aa <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d12b      	bne.n	8003884 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d912      	bls.n	800385c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b02      	subs	r3, #2
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e
 800385a:	e026      	b.n	80038aa <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003882:	e012      	b.n	80038aa <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003884:	f7fe fdc2 	bl	800240c <HAL_GetTick>
 8003888:	0002      	movs	r2, r0
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <HAL_SPI_Transmit+0x282>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_SPI_Transmit+0x288>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80038a0:	231f      	movs	r3, #31
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2203      	movs	r2, #3
 80038a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80038a8:	e028      	b.n	80038fc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1b4      	bne.n	800381e <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f001 fa64 	bl	8004d88 <SPI_EndRxTxTransaction>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80038f0:	231f      	movs	r3, #31
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e000      	b.n	80038fc <HAL_SPI_Transmit+0x2e4>
  }

error:
 80038fa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	225d      	movs	r2, #93	; 0x5d
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	225c      	movs	r2, #92	; 0x5c
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800390c:	231f      	movs	r3, #31
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	781b      	ldrb	r3, [r3, #0]
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b008      	add	sp, #32
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	1dbb      	adds	r3, r7, #6
 800392a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800392c:	2317      	movs	r3, #23
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	2382      	movs	r3, #130	; 0x82
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d113      	bne.n	8003968 <HAL_SPI_Receive+0x4c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	225d      	movs	r2, #93	; 0x5d
 800394c:	2104      	movs	r1, #4
 800394e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	881c      	ldrh	r4, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	0023      	movs	r3, r4
 8003960:	f000 f920 	bl	8003ba4 <HAL_SPI_TransmitReceive>
 8003964:	0003      	movs	r3, r0
 8003966:	e114      	b.n	8003b92 <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	225c      	movs	r2, #92	; 0x5c
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_SPI_Receive+0x5a>
 8003972:	2302      	movs	r3, #2
 8003974:	e10d      	b.n	8003b92 <HAL_SPI_Receive+0x276>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	225c      	movs	r2, #92	; 0x5c
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800397e:	f7fe fd45 	bl	800240c <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	225d      	movs	r2, #93	; 0x5d
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d004      	beq.n	800399c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003992:	2317      	movs	r3, #23
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
    goto error;
 800399a:	e0ef      	b.n	8003b7c <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_SPI_Receive+0x8e>
 80039a2:	1dbb      	adds	r3, r7, #6
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80039b2:	e0e3      	b.n	8003b7c <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	225d      	movs	r2, #93	; 0x5d
 80039b8:	2104      	movs	r1, #4
 80039ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1dba      	adds	r2, r7, #6
 80039cc:	2144      	movs	r1, #68	; 0x44
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1dba      	adds	r2, r7, #6
 80039d6:	2146      	movs	r1, #70	; 0x46
 80039d8:	8812      	ldrh	r2, [r2, #0]
 80039da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	23e0      	movs	r3, #224	; 0xe0
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d908      	bls.n	8003a18 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4962      	ldr	r1, [pc, #392]	; (8003b9c <HAL_SPI_Receive+0x280>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e008      	b.n	8003a2a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	0149      	lsls	r1, r1, #5
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d107      	bne.n	8003a46 <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4957      	ldr	r1, [pc, #348]	; (8003ba0 <HAL_SPI_Receive+0x284>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d007      	beq.n	8003a64 <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	23e0      	movs	r3, #224	; 0xe0
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d900      	bls.n	8003a72 <HAL_SPI_Receive+0x156>
 8003a70:	e069      	b.n	8003b46 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a72:	e031      	b.n	8003ad8 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d117      	bne.n	8003ab2 <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	001a      	movs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2246      	movs	r2, #70	; 0x46
 8003aa2:	5a9b      	ldrh	r3, [r3, r2]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2246      	movs	r2, #70	; 0x46
 8003aae:	5299      	strh	r1, [r3, r2]
 8003ab0:	e012      	b.n	8003ad8 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab2:	f7fe fcab 	bl	800240c <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_SPI_Receive+0x1ac>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Receive+0x1b2>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 8003ace:	2317      	movs	r3, #23
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ad6:	e051      	b.n	8003b7c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2246      	movs	r2, #70	; 0x46
 8003adc:	5a9b      	ldrh	r3, [r3, r2]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1c7      	bne.n	8003a74 <HAL_SPI_Receive+0x158>
 8003ae4:	e035      	b.n	8003b52 <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d115      	bne.n	8003b20 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	b292      	uxth	r2, r2
 8003b00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	1c9a      	adds	r2, r3, #2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2246      	movs	r2, #70	; 0x46
 8003b10:	5a9b      	ldrh	r3, [r3, r2]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b299      	uxth	r1, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2246      	movs	r2, #70	; 0x46
 8003b1c:	5299      	strh	r1, [r3, r2]
 8003b1e:	e012      	b.n	8003b46 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b20:	f7fe fc74 	bl	800240c <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d802      	bhi.n	8003b36 <HAL_SPI_Receive+0x21a>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Receive+0x220>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8003b3c:	2317      	movs	r3, #23
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2203      	movs	r2, #3
 8003b42:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b44:	e01a      	b.n	8003b7c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2246      	movs	r2, #70	; 0x46
 8003b4a:	5a9b      	ldrh	r3, [r3, r2]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1c9      	bne.n	8003ae6 <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f001 f8b7 	bl	8004ccc <SPI_EndRxTransaction>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8003b70:	2317      	movs	r3, #23
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e000      	b.n	8003b7c <HAL_SPI_Receive+0x260>
  }

error :
 8003b7a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	225d      	movs	r2, #93	; 0x5d
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	225c      	movs	r2, #92	; 0x5c
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b8c:	2317      	movs	r3, #23
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	781b      	ldrb	r3, [r3, #0]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b007      	add	sp, #28
 8003b98:	bd90      	pop	{r4, r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	ffffbfff 	.word	0xffffbfff

08003ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bba:	2323      	movs	r3, #35	; 0x23
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	225c      	movs	r2, #92	; 0x5c
 8003bc6:	5c9b      	ldrb	r3, [r3, r2]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_SPI_TransmitReceive+0x2c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e21f      	b.n	8004010 <HAL_SPI_TransmitReceive+0x46c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	225c      	movs	r2, #92	; 0x5c
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd8:	f7fe fc18 	bl	800240c <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be0:	201b      	movs	r0, #27
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	215d      	movs	r1, #93	; 0x5d
 8003be8:	5c52      	ldrb	r2, [r2, r1]
 8003bea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bf2:	2312      	movs	r3, #18
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	1cba      	adds	r2, r7, #2
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	1cba      	adds	r2, r7, #2
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d012      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x90>
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	2382      	movs	r3, #130	; 0x82
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d108      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x86>
 8003c20:	231b      	movs	r3, #27
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d004      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8003c2a:	2323      	movs	r3, #35	; 0x23
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c32:	e1e2      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_SPI_TransmitReceive+0xa4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_SPI_TransmitReceive+0xa4>
 8003c40:	1cbb      	adds	r3, r7, #2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8003c48:	2323      	movs	r3, #35	; 0x23
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c50:	e1d3      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	225d      	movs	r2, #93	; 0x5d
 8003c56:	5c9b      	ldrb	r3, [r3, r2]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	225d      	movs	r2, #93	; 0x5d
 8003c62:	2105      	movs	r1, #5
 8003c64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1cba      	adds	r2, r7, #2
 8003c76:	2146      	movs	r1, #70	; 0x46
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1cba      	adds	r2, r7, #2
 8003c80:	2144      	movs	r1, #68	; 0x44
 8003c82:	8812      	ldrh	r2, [r2, #0]
 8003c84:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1cba      	adds	r2, r7, #2
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1cba      	adds	r2, r7, #2
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	23e0      	movs	r3, #224	; 0xe0
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d804      	bhi.n	8003cbe <HAL_SPI_TransmitReceive+0x11a>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d908      	bls.n	8003cd0 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	49ca      	ldr	r1, [pc, #808]	; (8003ff4 <HAL_SPI_TransmitReceive+0x450>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e008      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	0149      	lsls	r1, r1, #5
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d007      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	23e0      	movs	r3, #224	; 0xe0
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d800      	bhi.n	8003d0e <HAL_SPI_TransmitReceive+0x16a>
 8003d0c:	e07f      	b.n	8003e0e <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x17e>
 8003d16:	2312      	movs	r3, #18
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d000      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x17e>
 8003d20:	e069      	b.n	8003df6 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d46:	e056      	b.n	8003df6 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d11b      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x1ea>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d016      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x1ea>
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d113      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d11c      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x232>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2246      	movs	r2, #70	; 0x46
 8003da0:	5a9b      	ldrh	r3, [r3, r2]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	b292      	uxth	r2, r2
 8003db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2246      	movs	r2, #70	; 0x46
 8003dc4:	5a9b      	ldrh	r3, [r3, r2]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2246      	movs	r2, #70	; 0x46
 8003dd0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dd6:	f7fe fb19 	bl	800240c <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d807      	bhi.n	8003df6 <HAL_SPI_TransmitReceive+0x252>
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	3301      	adds	r3, #1
 8003dea:	d004      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8003dec:	2323      	movs	r3, #35	; 0x23
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2203      	movs	r2, #3
 8003df2:	701a      	strb	r2, [r3, #0]
        goto error;
 8003df4:	e101      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1a3      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x1a4>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2246      	movs	r2, #70	; 0x46
 8003e04:	5a9b      	ldrh	r3, [r3, r2]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d19d      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x1a4>
 8003e0c:	e0e2      	b.n	8003fd4 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x27e>
 8003e16:	2312      	movs	r3, #18
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d000      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x27e>
 8003e20:	e0cb      	b.n	8003fba <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d912      	bls.n	8003e52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b02      	subs	r3, #2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e50:	e0b3      	b.n	8003fba <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e78:	e09f      	b.n	8003fba <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2202      	movs	r2, #2
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d134      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x34e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02f      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x34e>
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d12c      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d912      	bls.n	8003ec8 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	881a      	ldrh	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b02      	subs	r3, #2
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec6:	e012      	b.n	8003eee <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d149      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x3f0>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2246      	movs	r2, #70	; 0x46
 8003f04:	5a9b      	ldrh	r3, [r3, r2]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d043      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2246      	movs	r2, #70	; 0x46
 8003f10:	5a9b      	ldrh	r3, [r3, r2]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d924      	bls.n	8003f62 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	b292      	uxth	r2, r2
 8003f24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2246      	movs	r2, #70	; 0x46
 8003f34:	5a9b      	ldrh	r3, [r3, r2]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2246      	movs	r2, #70	; 0x46
 8003f40:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2246      	movs	r2, #70	; 0x46
 8003f46:	5a9b      	ldrh	r3, [r3, r2]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d820      	bhi.n	8003f90 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	0149      	lsls	r1, r1, #5
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e016      	b.n	8003f90 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	001a      	movs	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2246      	movs	r2, #70	; 0x46
 8003f82:	5a9b      	ldrh	r3, [r3, r2]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2246      	movs	r2, #70	; 0x46
 8003f8e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f94:	f7fe fa3a 	bl	800240c <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d802      	bhi.n	8003faa <HAL_SPI_TransmitReceive+0x406>
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x40c>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8003fb0:	2323      	movs	r3, #35	; 0x23
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	701a      	strb	r2, [r3, #0]
        goto error;
 8003fb8:	e01f      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d000      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x422>
 8003fc4:	e759      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x2d6>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2246      	movs	r2, #70	; 0x46
 8003fca:	5a9b      	ldrh	r3, [r3, r2]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d000      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x430>
 8003fd2:	e752      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 fed4 	bl	8004d88 <SPI_EndRxTxTransaction>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8003fe4:	2323      	movs	r3, #35	; 0x23
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ff2:	e002      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x456>
 8003ff4:	ffffefff 	.word	0xffffefff
  }

error :
 8003ff8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	225d      	movs	r2, #93	; 0x5d
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	225c      	movs	r2, #92	; 0x5c
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800400a:	2323      	movs	r3, #35	; 0x23
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	781b      	ldrb	r3, [r3, #0]
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b00a      	add	sp, #40	; 0x28
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	1dbb      	adds	r3, r7, #6
 8004024:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004026:	2317      	movs	r3, #23
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	225c      	movs	r2, #92	; 0x5c
 8004032:	5c9b      	ldrb	r3, [r3, r2]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_SPI_Transmit_DMA+0x24>
 8004038:	2302      	movs	r3, #2
 800403a:	e0df      	b.n	80041fc <HAL_SPI_Transmit_DMA+0x1e4>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	225c      	movs	r2, #92	; 0x5c
 8004040:	2101      	movs	r1, #1
 8004042:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	225d      	movs	r2, #93	; 0x5d
 8004048:	5c9b      	ldrb	r3, [r3, r2]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d004      	beq.n	800405a <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8004050:	2317      	movs	r3, #23
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2202      	movs	r2, #2
 8004056:	701a      	strb	r2, [r3, #0]
    goto error;
 8004058:	e0c9      	b.n	80041ee <HAL_SPI_Transmit_DMA+0x1d6>
  }

  if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_SPI_Transmit_DMA+0x50>
 8004060:	1dbb      	adds	r3, r7, #6
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8004068:	2317      	movs	r3, #23
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004070:	e0bd      	b.n	80041ee <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	225d      	movs	r2, #93	; 0x5d
 8004076:	2103      	movs	r1, #3
 8004078:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1dba      	adds	r2, r7, #6
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1dba      	adds	r2, r7, #6
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2244      	movs	r2, #68	; 0x44
 80040ac:	2100      	movs	r1, #0
 80040ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2246      	movs	r2, #70	; 0x46
 80040b4:	2100      	movs	r1, #0
 80040b6:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d108      	bne.n	80040d6 <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	01c9      	lsls	r1, r1, #7
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	4a4a      	ldr	r2, [pc, #296]	; (8004204 <HAL_SPI_Transmit_DMA+0x1ec>)
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	4a49      	ldr	r2, [pc, #292]	; (8004208 <HAL_SPI_Transmit_DMA+0x1f0>)
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	4a48      	ldr	r2, [pc, #288]	; (800420c <HAL_SPI_Transmit_DMA+0x1f4>)
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4943      	ldr	r1, [pc, #268]	; (8004210 <HAL_SPI_Transmit_DMA+0x1f8>)
 8004102:	400a      	ands	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	23e0      	movs	r3, #224	; 0xe0
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	429a      	cmp	r2, r3
 8004110:	d82f      	bhi.n	8004172 <HAL_SPI_Transmit_DMA+0x15a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	429a      	cmp	r2, r3
 800411e:	d128      	bne.n	8004172 <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	001a      	movs	r2, r3
 8004128:	2301      	movs	r3, #1
 800412a:	4013      	ands	r3, r2
 800412c:	d10f      	bne.n	800414e <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4935      	ldr	r1, [pc, #212]	; (8004210 <HAL_SPI_Transmit_DMA+0x1f8>)
 800413a:	400a      	ands	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800414c:	e011      	b.n	8004172 <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	01c9      	lsls	r1, r1, #7
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	3301      	adds	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	0019      	movs	r1, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800418a:	f7fe fa1f 	bl	80025cc <HAL_DMA_Start_IT>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d00e      	beq.n	80041b0 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004196:	2210      	movs	r2, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800419e:	2317      	movs	r3, #23
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	225d      	movs	r2, #93	; 0x5d
 80041aa:	2101      	movs	r1, #1
 80041ac:	5499      	strb	r1, [r3, r2]
    goto error;
 80041ae:	e01e      	b.n	80041ee <HAL_SPI_Transmit_DMA+0x1d6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2240      	movs	r2, #64	; 0x40
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d007      	beq.n	80041ce <HAL_SPI_Transmit_DMA+0x1b6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2120      	movs	r1, #32
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2102      	movs	r1, #2
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	225c      	movs	r2, #92	; 0x5c
 80041f2:	2100      	movs	r1, #0
 80041f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041f6:	2317      	movs	r3, #23
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	781b      	ldrb	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08004a69 	.word	0x08004a69
 8004208:	0800489d 	.word	0x0800489d
 800420c:	08004ac3 	.word	0x08004ac3
 8004210:	ffffbfff 	.word	0xffffbfff

08004214 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	1dbb      	adds	r3, r7, #6
 8004220:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004222:	2317      	movs	r3, #23
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d112      	bne.n	8004258 <HAL_SPI_Receive_DMA+0x44>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	2382      	movs	r3, #130	; 0x82
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	429a      	cmp	r2, r3
 800423c:	d10c      	bne.n	8004258 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	225d      	movs	r2, #93	; 0x5d
 8004242:	2104      	movs	r1, #4
 8004244:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004246:	1dbb      	adds	r3, r7, #6
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f928 	bl	80044a4 <HAL_SPI_TransmitReceive_DMA>
 8004254:	0003      	movs	r3, r0
 8004256:	e115      	b.n	8004484 <HAL_SPI_Receive_DMA+0x270>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	225c      	movs	r2, #92	; 0x5c
 800425c:	5c9b      	ldrb	r3, [r3, r2]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_SPI_Receive_DMA+0x52>
 8004262:	2302      	movs	r3, #2
 8004264:	e10e      	b.n	8004484 <HAL_SPI_Receive_DMA+0x270>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	225c      	movs	r2, #92	; 0x5c
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	225d      	movs	r2, #93	; 0x5d
 8004272:	5c9b      	ldrb	r3, [r3, r2]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d004      	beq.n	8004284 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800427a:	2317      	movs	r3, #23
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
    goto error;
 8004282:	e0f8      	b.n	8004476 <HAL_SPI_Receive_DMA+0x262>
  }

  if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_SPI_Receive_DMA+0x7e>
 800428a:	1dbb      	adds	r3, r7, #6
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8004292:	2317      	movs	r3, #23
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
    goto error;
 800429a:	e0ec      	b.n	8004476 <HAL_SPI_Receive_DMA+0x262>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	225d      	movs	r2, #93	; 0x5d
 80042a0:	2104      	movs	r1, #4
 80042a2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1dba      	adds	r2, r7, #6
 80042b4:	2144      	movs	r1, #68	; 0x44
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1dba      	adds	r2, r7, #6
 80042be:	2146      	movs	r1, #70	; 0x46
 80042c0:	8812      	ldrh	r2, [r2, #0]
 80042c2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_SPI_Receive_DMA+0xe4>
  {
    SPI_1LINE_RX(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4966      	ldr	r1, [pc, #408]	; (800448c <HAL_SPI_Receive_DMA+0x278>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6)|| defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	23e0      	movs	r3, #224	; 0xe0
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	429a      	cmp	r2, r3
 8004302:	d80b      	bhi.n	800431c <HAL_SPI_Receive_DMA+0x108>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	429a      	cmp	r2, r3
 8004310:	d104      	bne.n	800431c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8004312:	2317      	movs	r3, #23
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
    goto error;
 800431a:	e0ac      	b.n	8004476 <HAL_SPI_Receive_DMA+0x262>
  }
#endif

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	495a      	ldr	r1, [pc, #360]	; (8004490 <HAL_SPI_Receive_DMA+0x27c>)
 8004328:	400a      	ands	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	23e0      	movs	r3, #224	; 0xe0
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	429a      	cmp	r2, r3
 8004336:	d908      	bls.n	800434a <HAL_SPI_Receive_DMA+0x136>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4954      	ldr	r1, [pc, #336]	; (8004494 <HAL_SPI_Receive_DMA+0x280>)
 8004344:	400a      	ands	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	e045      	b.n	80043d6 <HAL_SPI_Receive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	0149      	lsls	r1, r1, #5
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	429a      	cmp	r2, r3
 8004368:	d135      	bne.n	80043d6 <HAL_SPI_Receive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4947      	ldr	r1, [pc, #284]	; (8004494 <HAL_SPI_Receive_DMA+0x280>)
 8004376:	400a      	ands	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2246      	movs	r2, #70	; 0x46
 800437e:	5a9b      	ldrh	r3, [r3, r2]
 8004380:	b29b      	uxth	r3, r3
 8004382:	001a      	movs	r2, r3
 8004384:	2301      	movs	r3, #1
 8004386:	4013      	ands	r3, r2
 8004388:	d111      	bne.n	80043ae <HAL_SPI_Receive_DMA+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	493e      	ldr	r1, [pc, #248]	; (8004490 <HAL_SPI_Receive_DMA+0x27c>)
 8004396:	400a      	ands	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2246      	movs	r2, #70	; 0x46
 800439e:	5a9b      	ldrh	r3, [r3, r2]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	b299      	uxth	r1, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2246      	movs	r2, #70	; 0x46
 80043aa:	5299      	strh	r1, [r3, r2]
 80043ac:	e013      	b.n	80043d6 <HAL_SPI_Receive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	0189      	lsls	r1, r1, #6
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2246      	movs	r2, #70	; 0x46
 80043c4:	5a9b      	ldrh	r3, [r3, r2]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	b299      	uxth	r1, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2246      	movs	r2, #70	; 0x46
 80043d4:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <HAL_SPI_Receive_DMA+0x284>)
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	4a2e      	ldr	r2, [pc, #184]	; (800449c <HAL_SPI_Receive_DMA+0x288>)
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <HAL_SPI_Receive_DMA+0x28c>)
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	2200      	movs	r2, #0
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	0019      	movs	r1, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2246      	movs	r2, #70	; 0x46
 800440c:	5a9b      	ldrh	r3, [r3, r2]
 800440e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004410:	0022      	movs	r2, r4
 8004412:	f7fe f8db 	bl	80025cc <HAL_DMA_Start_IT>
 8004416:	1e03      	subs	r3, r0, #0
 8004418:	d00e      	beq.n	8004438 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	2210      	movs	r2, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004426:	2317      	movs	r3, #23
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	225d      	movs	r2, #93	; 0x5d
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
    goto error;
 8004436:	e01e      	b.n	8004476 <HAL_SPI_Receive_DMA+0x262>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2240      	movs	r2, #64	; 0x40
 8004440:	4013      	ands	r3, r2
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d007      	beq.n	8004456 <HAL_SPI_Receive_DMA+0x242>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2120      	movs	r1, #32
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	225c      	movs	r2, #92	; 0x5c
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800447e:	2317      	movs	r3, #23
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	781b      	ldrb	r3, [r3, #0]
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b007      	add	sp, #28
 800448a:	bd90      	pop	{r4, r7, pc}
 800448c:	ffffbfff 	.word	0xffffbfff
 8004490:	ffffdfff 	.word	0xffffdfff
 8004494:	ffffefff 	.word	0xffffefff
 8004498:	08004a87 	.word	0x08004a87
 800449c:	08004949 	.word	0x08004949
 80044a0:	08004ac3 	.word	0x08004ac3

080044a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	001a      	movs	r2, r3
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044b6:	2317      	movs	r3, #23
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	225c      	movs	r2, #92	; 0x5c
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_TransmitReceive_DMA+0x28>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e198      	b.n	80047fe <HAL_SPI_TransmitReceive_DMA+0x35a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	225c      	movs	r2, #92	; 0x5c
 80044d0:	2101      	movs	r1, #1
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d4:	2016      	movs	r0, #22
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	215d      	movs	r1, #93	; 0x5d
 80044dc:	5c52      	ldrb	r2, [r2, r1]
 80044de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d012      	beq.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x70>
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	2382      	movs	r3, #130	; 0x82
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d108      	bne.n	800450a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_SPI_TransmitReceive_DMA+0x66>
 8004500:	2316      	movs	r3, #22
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d004      	beq.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800450a:	2317      	movs	r3, #23
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]
    goto error;
 8004512:	e16d      	b.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <HAL_SPI_TransmitReceive_DMA+0x84>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004520:	1cbb      	adds	r3, r7, #2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8004528:	2317      	movs	r3, #23
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004530:	e15e      	b.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	225d      	movs	r2, #93	; 0x5d
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	225d      	movs	r2, #93	; 0x5d
 8004542:	2105      	movs	r1, #5
 8004544:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1cba      	adds	r2, r7, #2
 8004556:	8812      	ldrh	r2, [r2, #0]
 8004558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1cba      	adds	r2, r7, #2
 800455e:	8812      	ldrh	r2, [r2, #0]
 8004560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1cba      	adds	r2, r7, #2
 800456c:	2144      	movs	r1, #68	; 0x44
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1cba      	adds	r2, r7, #2
 8004576:	2146      	movs	r1, #70	; 0x46
 8004578:	8812      	ldrh	r2, [r2, #0]
 800457a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	651a      	str	r2, [r3, #80]	; 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	23e0      	movs	r3, #224	; 0xe0
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	429a      	cmp	r2, r3
 8004592:	d80b      	bhi.n	80045ac <HAL_SPI_TransmitReceive_DMA+0x108>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	429a      	cmp	r2, r3
 80045a0:	d104      	bne.n	80045ac <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80045a2:	2317      	movs	r3, #23
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80045aa:	e121      	b.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }
#endif

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4994      	ldr	r1, [pc, #592]	; (8004808 <HAL_SPI_TransmitReceive_DMA+0x364>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	23e0      	movs	r3, #224	; 0xe0
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d908      	bls.n	80045da <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	498e      	ldr	r1, [pc, #568]	; (800480c <HAL_SPI_TransmitReceive_DMA+0x368>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e074      	b.n	80046c4 <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	0149      	lsls	r1, r1, #5
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d127      	bne.n	800464a <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045fe:	001a      	movs	r2, r3
 8004600:	2301      	movs	r3, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d10f      	bne.n	8004626 <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	497f      	ldr	r1, [pc, #508]	; (8004810 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8004612:	400a      	ands	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004624:	e011      	b.n	800464a <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	01c9      	lsls	r1, r1, #7
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	3301      	adds	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	429a      	cmp	r2, r3
 8004656:	d135      	bne.n	80046c4 <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	496a      	ldr	r1, [pc, #424]	; (800480c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8004664:	400a      	ands	r2, r1
 8004666:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2246      	movs	r2, #70	; 0x46
 800466c:	5a9b      	ldrh	r3, [r3, r2]
 800466e:	b29b      	uxth	r3, r3
 8004670:	001a      	movs	r2, r3
 8004672:	2301      	movs	r3, #1
 8004674:	4013      	ands	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4964      	ldr	r1, [pc, #400]	; (8004814 <HAL_SPI_TransmitReceive_DMA+0x370>)
 8004684:	400a      	ands	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2246      	movs	r2, #70	; 0x46
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	b299      	uxth	r1, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2246      	movs	r2, #70	; 0x46
 8004698:	5299      	strh	r1, [r3, r2]
 800469a:	e013      	b.n	80046c4 <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	0189      	lsls	r1, r1, #6
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2246      	movs	r2, #70	; 0x46
 80046b2:	5a9b      	ldrh	r3, [r3, r2]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	b299      	uxth	r1, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2246      	movs	r2, #70	; 0x46
 80046c2:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	225d      	movs	r2, #93	; 0x5d
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d108      	bne.n	80046e2 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	4a50      	ldr	r2, [pc, #320]	; (8004818 <HAL_SPI_TransmitReceive_DMA+0x374>)
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	4a4f      	ldr	r2, [pc, #316]	; (800481c <HAL_SPI_TransmitReceive_DMA+0x378>)
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
 80046e0:	e007      	b.n	80046f2 <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <HAL_SPI_TransmitReceive_DMA+0x37c>)
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	4a4d      	ldr	r2, [pc, #308]	; (8004824 <HAL_SPI_TransmitReceive_DMA+0x380>)
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	4a4c      	ldr	r2, [pc, #304]	; (8004828 <HAL_SPI_TransmitReceive_DMA+0x384>)
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	2200      	movs	r2, #0
 8004700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	0019      	movs	r1, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2246      	movs	r2, #70	; 0x46
 8004718:	5a9b      	ldrh	r3, [r3, r2]
 800471a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800471c:	0022      	movs	r2, r4
 800471e:	f7fd ff55 	bl	80025cc <HAL_DMA_Start_IT>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d00e      	beq.n	8004744 <HAL_SPI_TransmitReceive_DMA+0x2a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	2210      	movs	r2, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004732:	2317      	movs	r3, #23
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	225d      	movs	r2, #93	; 0x5d
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]
    goto error;
 8004742:	e055      	b.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2101      	movs	r1, #1
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	2200      	movs	r2, #0
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	0019      	movs	r1, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800478c:	f7fd ff1e 	bl	80025cc <HAL_DMA_Start_IT>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d00e      	beq.n	80047b2 <HAL_SPI_TransmitReceive_DMA+0x30e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	2210      	movs	r2, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047a0:	2317      	movs	r3, #23
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	225d      	movs	r2, #93	; 0x5d
 80047ac:	2101      	movs	r1, #1
 80047ae:	5499      	strb	r1, [r3, r2]
    goto error;
 80047b0:	e01e      	b.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2240      	movs	r2, #64	; 0x40
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d007      	beq.n	80047d0 <HAL_SPI_TransmitReceive_DMA+0x32c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2140      	movs	r1, #64	; 0x40
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2120      	movs	r1, #32
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2102      	movs	r1, #2
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	225c      	movs	r2, #92	; 0x5c
 80047f4:	2100      	movs	r1, #0
 80047f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047f8:	2317      	movs	r3, #23
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	781b      	ldrb	r3, [r3, #0]
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b007      	add	sp, #28
 8004804:	bd90      	pop	{r4, r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	ffff9fff 	.word	0xffff9fff
 800480c:	ffffefff 	.word	0xffffefff
 8004810:	ffffbfff 	.word	0xffffbfff
 8004814:	ffffdfff 	.word	0xffffdfff
 8004818:	08004a87 	.word	0x08004a87
 800481c:	08004949 	.word	0x08004949
 8004820:	08004aa5 	.word	0x08004aa5
 8004824:	080049d3 	.word	0x080049d3
 8004828:	08004ac3 	.word	0x08004ac3

0800482c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b002      	add	sp, #8
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048aa:	f7fd fdaf 	bl	800240c <HAL_GetTick>
 80048ae:	0003      	movs	r3, r0
 80048b0:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2220      	movs	r2, #32
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d03c      	beq.n	800493a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2120      	movs	r1, #32
 80048cc:	438a      	bics	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2102      	movs	r1, #2
 80048dc:	438a      	bics	r2, r1
 80048de:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2164      	movs	r1, #100	; 0x64
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fa4e 	bl	8004d88 <SPI_EndRxTxTransaction>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d005      	beq.n	80048fc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2220      	movs	r2, #32
 80048f6:	431a      	orrs	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	225d      	movs	r2, #93	; 0x5d
 8004924:	2101      	movs	r1, #1
 8004926:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff ffaa 	bl	800488c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004938:	e003      	b.n	8004942 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff ff75 	bl	800482c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004942:	46bd      	mov	sp, r7
 8004944:	b006      	add	sp, #24
 8004946:	bd80      	pop	{r7, pc}

08004948 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004956:	f7fd fd59 	bl	800240c <HAL_GetTick>
 800495a:	0003      	movs	r3, r0
 800495c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2220      	movs	r2, #32
 8004966:	4013      	ands	r3, r2
 8004968:	2b20      	cmp	r3, #32
 800496a:	d02b      	beq.n	80049c4 <SPI_DMAReceiveCplt+0x7c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2120      	movs	r1, #32
 8004978:	438a      	bics	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2103      	movs	r1, #3
 8004988:	438a      	bics	r2, r1
 800498a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2164      	movs	r1, #100	; 0x64
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f99a 	bl	8004ccc <SPI_EndRxTransaction>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d002      	beq.n	80049a2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2246      	movs	r2, #70	; 0x46
 80049a6:	2100      	movs	r1, #0
 80049a8:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	225d      	movs	r2, #93	; 0x5d
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <SPI_DMAReceiveCplt+0x7c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7ff ff65 	bl	800488c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049c2:	e003      	b.n	80049cc <SPI_DMAReceiveCplt+0x84>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7ff ff38 	bl	800483c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e0:	f7fd fd14 	bl	800240c <HAL_GetTick>
 80049e4:	0003      	movs	r3, r0
 80049e6:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2220      	movs	r2, #32
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d031      	beq.n	8004a5a <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2120      	movs	r1, #32
 8004a02:	438a      	bics	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 f9bb 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d005      	beq.n	8004a22 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2103      	movs	r1, #3
 8004a2e:	438a      	bics	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2246      	movs	r2, #70	; 0x46
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	225d      	movs	r2, #93	; 0x5d
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff ff1a 	bl	800488c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a58:	e003      	b.n	8004a62 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff fef5 	bl	800484c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b004      	add	sp, #16
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7ff feef 	bl	800485c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b004      	add	sp, #16
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7ff fee8 	bl	800486c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff fee1 	bl	800487c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2103      	movs	r1, #3
 8004adc:	438a      	bics	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	225d      	movs	r2, #93	; 0x5d
 8004af0:	2101      	movs	r1, #1
 8004af2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7ff fec8 	bl	800488c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b004      	add	sp, #16
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b14:	e050      	b.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	d04d      	beq.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b1c:	f7fd fc76 	bl	800240c <HAL_GetTick>
 8004b20:	0002      	movs	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d902      	bls.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d142      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	21e0      	movs	r1, #224	; 0xe0
 8004b3e:	438a      	bics	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	2382      	movs	r3, #130	; 0x82
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d113      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x72>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d005      	beq.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d107      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	438a      	bics	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d110      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4914      	ldr	r1, [pc, #80]	; (8004be0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004b8e:	400a      	ands	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	0189      	lsls	r1, r1, #6
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	225d      	movs	r2, #93	; 0x5d
 8004ba8:	2101      	movs	r1, #1
 8004baa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	225c      	movs	r2, #92	; 0x5c
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e00f      	b.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	425a      	negs	r2, r3
 8004bc8:	4153      	adcs	r3, r2
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	001a      	movs	r2, r3
 8004bce:	1dfb      	adds	r3, r7, #7
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d19f      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	ffffdfff 	.word	0xffffdfff

08004be4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bf2:	e05c      	b.n	8004cae <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	23c0      	movs	r3, #192	; 0xc0
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0x28>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	d04d      	beq.n	8004cae <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c12:	f7fd fbfb 	bl	800240c <HAL_GetTick>
 8004c16:	0002      	movs	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d902      	bls.n	8004c28 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d142      	bne.n	8004cae <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	21e0      	movs	r1, #224	; 0xe0
 8004c34:	438a      	bics	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	2382      	movs	r3, #130	; 0x82
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d113      	bne.n	8004c6c <SPI_WaitFifoStateUntilTimeout+0x88>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d005      	beq.n	8004c5c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	438a      	bics	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	019b      	lsls	r3, r3, #6
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d110      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4911      	ldr	r1, [pc, #68]	; (8004cc8 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0189      	lsls	r1, r1, #6
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	225d      	movs	r2, #93	; 0x5d
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	225c      	movs	r2, #92	; 0x5c
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e008      	b.n	8004cc0 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d19a      	bne.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	ffffdfff 	.word	0xffffdfff

08004ccc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	2382      	movs	r3, #130	; 0x82
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d113      	bne.n	8004d0c <SPI_EndRxTransaction+0x40>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d005      	beq.n	8004cfc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d107      	bne.n	8004d0c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	438a      	bics	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	0013      	movs	r3, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	f7ff fef3 	bl	8004b04 <SPI_WaitFlagStateUntilTimeout>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d007      	beq.n	8004d32 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	2220      	movs	r2, #32
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e026      	b.n	8004d80 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	2382      	movs	r3, #130	; 0x82
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d11f      	bne.n	8004d7e <SPI_EndRxTransaction+0xb2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d005      	beq.n	8004d56 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d113      	bne.n	8004d7e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	23c0      	movs	r3, #192	; 0xc0
 8004d5a:	00d9      	lsls	r1, r3, #3
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	0013      	movs	r3, r2
 8004d64:	2200      	movs	r2, #0
 8004d66:	f7ff ff3d 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d007      	beq.n	8004d7e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	2220      	movs	r2, #32
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e000      	b.n	8004d80 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	23c0      	movs	r3, #192	; 0xc0
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	0013      	movs	r3, r2
 8004da2:	2200      	movs	r2, #0
 8004da4:	f7ff ff1e 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d007      	beq.n	8004dbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	2220      	movs	r2, #32
 8004db2:	431a      	orrs	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e027      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	0013      	movs	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	f7ff fe9b 	bl	8004b04 <SPI_WaitFlagStateUntilTimeout>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d007      	beq.n	8004de2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e014      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	23c0      	movs	r3, #192	; 0xc0
 8004de6:	00d9      	lsls	r1, r3, #3
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	0013      	movs	r3, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7ff fef7 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004df6:	1e03      	subs	r3, r0, #0
 8004df8:	d007      	beq.n	8004e0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2220      	movs	r2, #32
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e000      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e044      	b.n	8004eb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2270      	movs	r2, #112	; 0x70
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7fd f9c1 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2224      	movs	r2, #36	; 0x24
 8004e42:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	438a      	bics	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 f9b0 	bl	80051bc <UART_SetConfig>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e024      	b.n	8004eb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 fb11 	bl	8005498 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	490d      	ldr	r1, [pc, #52]	; (8004eb8 <HAL_UART_Init+0xa4>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	212a      	movs	r1, #42	; 0x2a
 8004e92:	438a      	bics	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 fba9 	bl	8005600 <UART_CheckIdleState>
 8004eae:	0003      	movs	r3, r0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	ffffb7ff 	.word	0xffffb7ff

08004ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	1dbb      	adds	r3, r7, #6
 8004eca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d000      	beq.n	8004ed6 <HAL_UART_Transmit+0x1a>
 8004ed4:	e095      	b.n	8005002 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_UART_Transmit+0x28>
 8004edc:	1dbb      	adds	r3, r7, #6
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e08d      	b.n	8005004 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	015b      	lsls	r3, r3, #5
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d109      	bne.n	8004f08 <HAL_UART_Transmit+0x4c>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2201      	movs	r2, #1
 8004f00:	4013      	ands	r3, r2
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e07d      	b.n	8005004 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2270      	movs	r2, #112	; 0x70
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Transmit+0x5a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e076      	b.n	8005004 <HAL_UART_Transmit+0x148>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2270      	movs	r2, #112	; 0x70
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2221      	movs	r2, #33	; 0x21
 8004f28:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fd fa6f 	bl	800240c <HAL_GetTick>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1dba      	adds	r2, r7, #6
 8004f36:	2150      	movs	r1, #80	; 0x50
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1dba      	adds	r2, r7, #6
 8004f40:	2152      	movs	r1, #82	; 0x52
 8004f42:	8812      	ldrh	r2, [r2, #0]
 8004f44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	015b      	lsls	r3, r3, #5
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d108      	bne.n	8004f64 <HAL_UART_Transmit+0xa8>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e003      	b.n	8004f6c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f6c:	e02d      	b.n	8004fca <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	0013      	movs	r3, r2
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	f000 fb86 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 8004f80:	1e03      	subs	r3, r0, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e03d      	b.n	8005004 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	05d2      	lsls	r2, r2, #23
 8004f98:	0dd2      	lsrs	r2, r2, #23
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	e008      	b.n	8004fb8 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b292      	uxth	r2, r2
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2252      	movs	r2, #82	; 0x52
 8004fbc:	5a9b      	ldrh	r3, [r3, r2]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b299      	uxth	r1, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2252      	movs	r2, #82	; 0x52
 8004fc8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2252      	movs	r2, #82	; 0x52
 8004fce:	5a9b      	ldrh	r3, [r3, r2]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1cb      	bne.n	8004f6e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	0013      	movs	r3, r2
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	f000 fb52 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e009      	b.n	8005004 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2270      	movs	r2, #112	; 0x70
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b008      	add	sp, #32
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005020:	2b20      	cmp	r3, #32
 8005022:	d000      	beq.n	8005026 <HAL_UART_Receive+0x1a>
 8005024:	e0c2      	b.n	80051ac <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_UART_Receive+0x28>
 800502c:	1dbb      	adds	r3, r7, #6
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0ba      	b.n	80051ae <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	015b      	lsls	r3, r3, #5
 8005040:	429a      	cmp	r2, r3
 8005042:	d109      	bne.n	8005058 <HAL_UART_Receive+0x4c>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d001      	beq.n	8005058 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0aa      	b.n	80051ae <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2270      	movs	r2, #112	; 0x70
 800505c:	5c9b      	ldrb	r3, [r3, r2]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_UART_Receive+0x5a>
 8005062:	2302      	movs	r3, #2
 8005064:	e0a3      	b.n	80051ae <HAL_UART_Receive+0x1a2>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2270      	movs	r2, #112	; 0x70
 800506a:	2101      	movs	r1, #1
 800506c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2222      	movs	r2, #34	; 0x22
 8005078:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800507a:	f7fd f9c7 	bl	800240c <HAL_GetTick>
 800507e:	0003      	movs	r3, r0
 8005080:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1dba      	adds	r2, r7, #6
 8005086:	2158      	movs	r1, #88	; 0x58
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1dba      	adds	r2, r7, #6
 8005090:	215a      	movs	r1, #90	; 0x5a
 8005092:	8812      	ldrh	r2, [r2, #0]
 8005094:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	2380      	movs	r3, #128	; 0x80
 800509c:	015b      	lsls	r3, r3, #5
 800509e:	429a      	cmp	r2, r3
 80050a0:	d10d      	bne.n	80050be <HAL_UART_Receive+0xb2>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_UART_Receive+0xa8>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	225c      	movs	r2, #92	; 0x5c
 80050ae:	4942      	ldr	r1, [pc, #264]	; (80051b8 <HAL_UART_Receive+0x1ac>)
 80050b0:	5299      	strh	r1, [r3, r2]
 80050b2:	e01a      	b.n	80050ea <HAL_UART_Receive+0xde>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	225c      	movs	r2, #92	; 0x5c
 80050b8:	21ff      	movs	r1, #255	; 0xff
 80050ba:	5299      	strh	r1, [r3, r2]
 80050bc:	e015      	b.n	80050ea <HAL_UART_Receive+0xde>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_UART_Receive+0xd6>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Receive+0xcc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	225c      	movs	r2, #92	; 0x5c
 80050d2:	21ff      	movs	r1, #255	; 0xff
 80050d4:	5299      	strh	r1, [r3, r2]
 80050d6:	e008      	b.n	80050ea <HAL_UART_Receive+0xde>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	225c      	movs	r2, #92	; 0x5c
 80050dc:	217f      	movs	r1, #127	; 0x7f
 80050de:	5299      	strh	r1, [r3, r2]
 80050e0:	e003      	b.n	80050ea <HAL_UART_Receive+0xde>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	225c      	movs	r2, #92	; 0x5c
 80050e6:	2100      	movs	r1, #0
 80050e8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80050ea:	2312      	movs	r3, #18
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	215c      	movs	r1, #92	; 0x5c
 80050f2:	5a52      	ldrh	r2, [r2, r1]
 80050f4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	015b      	lsls	r3, r3, #5
 80050fe:	429a      	cmp	r2, r3
 8005100:	d108      	bne.n	8005114 <HAL_UART_Receive+0x108>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	e003      	b.n	800511c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800511c:	e037      	b.n	800518e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	0013      	movs	r3, r2
 8005128:	2200      	movs	r2, #0
 800512a:	2120      	movs	r1, #32
 800512c:	f000 faae 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 8005130:	1e03      	subs	r3, r0, #0
 8005132:	d001      	beq.n	8005138 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e03a      	b.n	80051ae <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10e      	bne.n	800515c <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005144:	b29b      	uxth	r3, r3
 8005146:	2212      	movs	r2, #18
 8005148:	18ba      	adds	r2, r7, r2
 800514a:	8812      	ldrh	r2, [r2, #0]
 800514c:	4013      	ands	r3, r2
 800514e:	b29a      	uxth	r2, r3
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	3302      	adds	r3, #2
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e00f      	b.n	800517c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005162:	b29b      	uxth	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2212      	movs	r2, #18
 8005168:	18ba      	adds	r2, r7, r2
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	4013      	ands	r3, r2
 8005170:	b2da      	uxtb	r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	225a      	movs	r2, #90	; 0x5a
 8005180:	5a9b      	ldrh	r3, [r3, r2]
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b299      	uxth	r1, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	225a      	movs	r2, #90	; 0x5a
 800518c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	225a      	movs	r2, #90	; 0x5a
 8005192:	5a9b      	ldrh	r3, [r3, r2]
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1c1      	bne.n	800511e <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2270      	movs	r2, #112	; 0x70
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
  }
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b008      	add	sp, #32
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	000001ff 	.word	0x000001ff

080051bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c8:	2317      	movs	r3, #23
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4aa3      	ldr	r2, [pc, #652]	; (800547c <UART_SetConfig+0x2c0>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a9e      	ldr	r2, [pc, #632]	; (8005480 <UART_SetConfig+0x2c4>)
 8005206:	4013      	ands	r3, r2
 8005208:	0019      	movs	r1, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4a95      	ldr	r2, [pc, #596]	; (8005484 <UART_SetConfig+0x2c8>)
 800522e:	4013      	ands	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800523c:	4b92      	ldr	r3, [pc, #584]	; (8005488 <UART_SetConfig+0x2cc>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2203      	movs	r2, #3
 8005242:	4013      	ands	r3, r2
 8005244:	2b01      	cmp	r3, #1
 8005246:	d00f      	beq.n	8005268 <UART_SetConfig+0xac>
 8005248:	d304      	bcc.n	8005254 <UART_SetConfig+0x98>
 800524a:	2b02      	cmp	r3, #2
 800524c:	d011      	beq.n	8005272 <UART_SetConfig+0xb6>
 800524e:	2b03      	cmp	r3, #3
 8005250:	d005      	beq.n	800525e <UART_SetConfig+0xa2>
 8005252:	e013      	b.n	800527c <UART_SetConfig+0xc0>
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e012      	b.n	8005284 <UART_SetConfig+0xc8>
 800525e:	231f      	movs	r3, #31
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2202      	movs	r2, #2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e00d      	b.n	8005284 <UART_SetConfig+0xc8>
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2204      	movs	r2, #4
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e008      	b.n	8005284 <UART_SetConfig+0xc8>
 8005272:	231f      	movs	r3, #31
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	2208      	movs	r2, #8
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e003      	b.n	8005284 <UART_SetConfig+0xc8>
 800527c:	231f      	movs	r3, #31
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2210      	movs	r2, #16
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	429a      	cmp	r2, r3
 8005290:	d000      	beq.n	8005294 <UART_SetConfig+0xd8>
 8005292:	e07d      	b.n	8005390 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8005294:	231f      	movs	r3, #31
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d01c      	beq.n	80052d8 <UART_SetConfig+0x11c>
 800529e:	dc02      	bgt.n	80052a6 <UART_SetConfig+0xea>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <UART_SetConfig+0xf4>
 80052a4:	e04b      	b.n	800533e <UART_SetConfig+0x182>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d025      	beq.n	80052f6 <UART_SetConfig+0x13a>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d037      	beq.n	800531e <UART_SetConfig+0x162>
 80052ae:	e046      	b.n	800533e <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe f834 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	005a      	lsls	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	18d2      	adds	r2, r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	0019      	movs	r1, r3
 80052ca:	0010      	movs	r0, r2
 80052cc:	f7fa ff1c 	bl	8000108 <__udivsi3>
 80052d0:	0003      	movs	r3, r0
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	61bb      	str	r3, [r7, #24]
        break;
 80052d6:	e037      	b.n	8005348 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	4a6b      	ldr	r2, [pc, #428]	; (800548c <UART_SetConfig+0x2d0>)
 80052e0:	189a      	adds	r2, r3, r2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0019      	movs	r1, r3
 80052e8:	0010      	movs	r0, r2
 80052ea:	f7fa ff0d 	bl	8000108 <__udivsi3>
 80052ee:	0003      	movs	r3, r0
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	61bb      	str	r3, [r7, #24]
        break;
 80052f4:	e028      	b.n	8005348 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fd ffa3 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80052fa:	0003      	movs	r3, r0
 80052fc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	005a      	lsls	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	18d2      	adds	r2, r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	0019      	movs	r1, r3
 8005310:	0010      	movs	r0, r2
 8005312:	f7fa fef9 	bl	8000108 <__udivsi3>
 8005316:	0003      	movs	r3, r0
 8005318:	b29b      	uxth	r3, r3
 800531a:	61bb      	str	r3, [r7, #24]
        break;
 800531c:	e014      	b.n	8005348 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	0252      	lsls	r2, r2, #9
 8005328:	189a      	adds	r2, r3, r2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	0019      	movs	r1, r3
 8005330:	0010      	movs	r0, r2
 8005332:	f7fa fee9 	bl	8000108 <__udivsi3>
 8005336:	0003      	movs	r3, r0
 8005338:	b29b      	uxth	r3, r3
 800533a:	61bb      	str	r3, [r7, #24]
        break;
 800533c:	e004      	b.n	8005348 <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 800533e:	2317      	movs	r3, #23
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
        break;
 8005346:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d91b      	bls.n	8005386 <UART_SetConfig+0x1ca>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	4a4f      	ldr	r2, [pc, #316]	; (8005490 <UART_SetConfig+0x2d4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d817      	bhi.n	8005386 <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	b29a      	uxth	r2, r3
 800535a:	200a      	movs	r0, #10
 800535c:	183b      	adds	r3, r7, r0
 800535e:	210f      	movs	r1, #15
 8005360:	438a      	bics	r2, r1
 8005362:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	2207      	movs	r2, #7
 800536c:	4013      	ands	r3, r2
 800536e:	b299      	uxth	r1, r3
 8005370:	183b      	adds	r3, r7, r0
 8005372:	183a      	adds	r2, r7, r0
 8005374:	8812      	ldrh	r2, [r2, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	183a      	adds	r2, r7, r0
 8005380:	8812      	ldrh	r2, [r2, #0]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e06c      	b.n	8005460 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8005386:	2317      	movs	r3, #23
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e067      	b.n	8005460 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8005390:	231f      	movs	r3, #31
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d01b      	beq.n	80053d2 <UART_SetConfig+0x216>
 800539a:	dc02      	bgt.n	80053a2 <UART_SetConfig+0x1e6>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <UART_SetConfig+0x1f0>
 80053a0:	e049      	b.n	8005436 <UART_SetConfig+0x27a>
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d024      	beq.n	80053f0 <UART_SetConfig+0x234>
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d035      	beq.n	8005416 <UART_SetConfig+0x25a>
 80053aa:	e044      	b.n	8005436 <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fd ffb6 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 80053b0:	0003      	movs	r3, r0
 80053b2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085a      	lsrs	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	18d2      	adds	r2, r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0019      	movs	r1, r3
 80053c4:	0010      	movs	r0, r2
 80053c6:	f7fa fe9f 	bl	8000108 <__udivsi3>
 80053ca:	0003      	movs	r3, r0
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e036      	b.n	8005440 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	4a2e      	ldr	r2, [pc, #184]	; (8005494 <UART_SetConfig+0x2d8>)
 80053da:	189a      	adds	r2, r3, r2
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	0019      	movs	r1, r3
 80053e2:	0010      	movs	r0, r2
 80053e4:	f7fa fe90 	bl	8000108 <__udivsi3>
 80053e8:	0003      	movs	r3, r0
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	61bb      	str	r3, [r7, #24]
        break;
 80053ee:	e027      	b.n	8005440 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f0:	f7fd ff26 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80053f4:	0003      	movs	r3, r0
 80053f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	085a      	lsrs	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	18d2      	adds	r2, r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	0019      	movs	r1, r3
 8005408:	0010      	movs	r0, r2
 800540a:	f7fa fe7d 	bl	8000108 <__udivsi3>
 800540e:	0003      	movs	r3, r0
 8005410:	b29b      	uxth	r3, r3
 8005412:	61bb      	str	r3, [r7, #24]
        break;
 8005414:	e014      	b.n	8005440 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	2280      	movs	r2, #128	; 0x80
 800541e:	0212      	lsls	r2, r2, #8
 8005420:	189a      	adds	r2, r3, r2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	0019      	movs	r1, r3
 8005428:	0010      	movs	r0, r2
 800542a:	f7fa fe6d 	bl	8000108 <__udivsi3>
 800542e:	0003      	movs	r3, r0
 8005430:	b29b      	uxth	r3, r3
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e004      	b.n	8005440 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
        break;
 800543e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b0f      	cmp	r3, #15
 8005444:	d908      	bls.n	8005458 <UART_SetConfig+0x29c>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <UART_SetConfig+0x2d4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d804      	bhi.n	8005458 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	e003      	b.n	8005460 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8005458:	2317      	movs	r3, #23
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800546c:	2317      	movs	r3, #23
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	781b      	ldrb	r3, [r3, #0]
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b008      	add	sp, #32
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	ffff69f3 	.word	0xffff69f3
 8005480:	ffffcfff 	.word	0xffffcfff
 8005484:	fffff4ff 	.word	0xfffff4ff
 8005488:	40021000 	.word	0x40021000
 800548c:	00f42400 	.word	0x00f42400
 8005490:	0000ffff 	.word	0x0000ffff
 8005494:	007a1200 	.word	0x007a1200

08005498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2201      	movs	r2, #1
 80054a6:	4013      	ands	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a4a      	ldr	r2, [pc, #296]	; (80055dc <UART_AdvFeatureConfig+0x144>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2202      	movs	r2, #2
 80054c8:	4013      	ands	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4a43      	ldr	r2, [pc, #268]	; (80055e0 <UART_AdvFeatureConfig+0x148>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2204      	movs	r2, #4
 80054ea:	4013      	ands	r3, r2
 80054ec:	d00b      	beq.n	8005506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a3b      	ldr	r2, [pc, #236]	; (80055e4 <UART_AdvFeatureConfig+0x14c>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2208      	movs	r2, #8
 800550c:	4013      	ands	r3, r2
 800550e:	d00b      	beq.n	8005528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <UART_AdvFeatureConfig+0x150>)
 8005518:	4013      	ands	r3, r2
 800551a:	0019      	movs	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2210      	movs	r2, #16
 800552e:	4013      	ands	r3, r2
 8005530:	d00b      	beq.n	800554a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <UART_AdvFeatureConfig+0x154>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2220      	movs	r2, #32
 8005550:	4013      	ands	r3, r2
 8005552:	d00b      	beq.n	800556c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4a25      	ldr	r2, [pc, #148]	; (80055f0 <UART_AdvFeatureConfig+0x158>)
 800555c:	4013      	ands	r3, r2
 800555e:	0019      	movs	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	4013      	ands	r3, r2
 8005574:	d01d      	beq.n	80055b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <UART_AdvFeatureConfig+0x15c>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	035b      	lsls	r3, r3, #13
 8005596:	429a      	cmp	r2, r3
 8005598:	d10b      	bne.n	80055b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <UART_AdvFeatureConfig+0x160>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	4013      	ands	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <UART_AdvFeatureConfig+0x164>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	0019      	movs	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]
  }
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b002      	add	sp, #8
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	fffdffff 	.word	0xfffdffff
 80055e0:	fffeffff 	.word	0xfffeffff
 80055e4:	fffbffff 	.word	0xfffbffff
 80055e8:	ffff7fff 	.word	0xffff7fff
 80055ec:	ffffefff 	.word	0xffffefff
 80055f0:	ffffdfff 	.word	0xffffdfff
 80055f4:	ffefffff 	.word	0xffefffff
 80055f8:	ff9fffff 	.word	0xff9fffff
 80055fc:	fff7ffff 	.word	0xfff7ffff

08005600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800560e:	f7fc fefd 	bl	800240c <HAL_GetTick>
 8005612:	0003      	movs	r3, r0
 8005614:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2208      	movs	r2, #8
 800561e:	4013      	ands	r3, r2
 8005620:	2b08      	cmp	r3, #8
 8005622:	d10d      	bne.n	8005640 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	0399      	lsls	r1, r3, #14
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <UART_CheckIdleState+0x88>)
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	0013      	movs	r3, r2
 8005632:	2200      	movs	r2, #0
 8005634:	f000 f82a 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 8005638:	1e03      	subs	r3, r0, #0
 800563a:	d001      	beq.n	8005640 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e01f      	b.n	8005680 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2204      	movs	r2, #4
 8005648:	4013      	ands	r3, r2
 800564a:	2b04      	cmp	r3, #4
 800564c:	d10d      	bne.n	800566a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	03d9      	lsls	r1, r3, #15
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <UART_CheckIdleState+0x88>)
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	0013      	movs	r3, r2
 800565c:	2200      	movs	r2, #0
 800565e:	f000 f815 	bl	800568c <UART_WaitOnFlagUntilTimeout>
 8005662:	1e03      	subs	r3, r0, #0
 8005664:	d001      	beq.n	800566a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e00a      	b.n	8005680 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2270      	movs	r2, #112	; 0x70
 800567a:	2100      	movs	r1, #0
 800567c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	0018      	movs	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	b004      	add	sp, #16
 8005686:	bd80      	pop	{r7, pc}
 8005688:	01ffffff 	.word	0x01ffffff

0800568c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	1dfb      	adds	r3, r7, #7
 800569a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569c:	e05d      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	3301      	adds	r3, #1
 80056a2:	d05a      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7fc feb2 	bl	800240c <HAL_GetTick>
 80056a8:	0002      	movs	r2, r0
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11b      	bne.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	492f      	ldr	r1, [pc, #188]	; (8005784 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80056c6:	400a      	ands	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2101      	movs	r1, #1
 80056d6:	438a      	bics	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2270      	movs	r2, #112	; 0x70
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e043      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	4013      	ands	r3, r2
 80056fc:	d02d      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	401a      	ands	r2, r3
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	429a      	cmp	r2, r3
 8005710:	d123      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	0112      	lsls	r2, r2, #4
 800571a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4917      	ldr	r1, [pc, #92]	; (8005784 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005728:	400a      	ands	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2270      	movs	r2, #112	; 0x70
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e00f      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	425a      	negs	r2, r3
 800576a:	4153      	adcs	r3, r2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	001a      	movs	r2, r3
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d092      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	fffffe5f 	.word	0xfffffe5f

08005788 <__errno>:
 8005788:	4b01      	ldr	r3, [pc, #4]	; (8005790 <__errno+0x8>)
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	4770      	bx	lr
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	2000000c 	.word	0x2000000c

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	2600      	movs	r6, #0
 8005798:	4d0c      	ldr	r5, [pc, #48]	; (80057cc <__libc_init_array+0x38>)
 800579a:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579c:	1b64      	subs	r4, r4, r5
 800579e:	10a4      	asrs	r4, r4, #2
 80057a0:	42a6      	cmp	r6, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	2600      	movs	r6, #0
 80057a6:	f001 f8a3 	bl	80068f0 <_init>
 80057aa:	4d0a      	ldr	r5, [pc, #40]	; (80057d4 <__libc_init_array+0x40>)
 80057ac:	4c0a      	ldr	r4, [pc, #40]	; (80057d8 <__libc_init_array+0x44>)
 80057ae:	1b64      	subs	r4, r4, r5
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	42a6      	cmp	r6, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	00b3      	lsls	r3, r6, #2
 80057ba:	58eb      	ldr	r3, [r5, r3]
 80057bc:	4798      	blx	r3
 80057be:	3601      	adds	r6, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	00b3      	lsls	r3, r6, #2
 80057c4:	58eb      	ldr	r3, [r5, r3]
 80057c6:	4798      	blx	r3
 80057c8:	3601      	adds	r6, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	08006b60 	.word	0x08006b60
 80057d0:	08006b60 	.word	0x08006b60
 80057d4:	08006b60 	.word	0x08006b60
 80057d8:	08006b64 	.word	0x08006b64

080057dc <memset>:
 80057dc:	0003      	movs	r3, r0
 80057de:	1812      	adds	r2, r2, r0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <memset+0xa>
 80057e4:	4770      	bx	lr
 80057e6:	7019      	strb	r1, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	e7f9      	b.n	80057e0 <memset+0x4>

080057ec <iprintf>:
 80057ec:	b40f      	push	{r0, r1, r2, r3}
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <iprintf+0x30>)
 80057f0:	b513      	push	{r0, r1, r4, lr}
 80057f2:	681c      	ldr	r4, [r3, #0]
 80057f4:	2c00      	cmp	r4, #0
 80057f6:	d005      	beq.n	8005804 <iprintf+0x18>
 80057f8:	69a3      	ldr	r3, [r4, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <iprintf+0x18>
 80057fe:	0020      	movs	r0, r4
 8005800:	f000 fafc 	bl	8005dfc <__sinit>
 8005804:	ab05      	add	r3, sp, #20
 8005806:	9a04      	ldr	r2, [sp, #16]
 8005808:	68a1      	ldr	r1, [r4, #8]
 800580a:	0020      	movs	r0, r4
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	f000 fccf 	bl	80061b0 <_vfiprintf_r>
 8005812:	bc16      	pop	{r1, r2, r4}
 8005814:	bc08      	pop	{r3}
 8005816:	b004      	add	sp, #16
 8005818:	4718      	bx	r3
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	2000000c 	.word	0x2000000c

08005820 <putchar>:
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <putchar+0x24>)
 8005822:	b570      	push	{r4, r5, r6, lr}
 8005824:	681c      	ldr	r4, [r3, #0]
 8005826:	0005      	movs	r5, r0
 8005828:	2c00      	cmp	r4, #0
 800582a:	d005      	beq.n	8005838 <putchar+0x18>
 800582c:	69a3      	ldr	r3, [r4, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <putchar+0x18>
 8005832:	0020      	movs	r0, r4
 8005834:	f000 fae2 	bl	8005dfc <__sinit>
 8005838:	0029      	movs	r1, r5
 800583a:	68a2      	ldr	r2, [r4, #8]
 800583c:	0020      	movs	r0, r4
 800583e:	f000 ff43 	bl	80066c8 <_putc_r>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	2000000c 	.word	0x2000000c

08005848 <_puts_r>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	0005      	movs	r5, r0
 800584c:	000e      	movs	r6, r1
 800584e:	2800      	cmp	r0, #0
 8005850:	d004      	beq.n	800585c <_puts_r+0x14>
 8005852:	6983      	ldr	r3, [r0, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <_puts_r+0x14>
 8005858:	f000 fad0 	bl	8005dfc <__sinit>
 800585c:	69ab      	ldr	r3, [r5, #24]
 800585e:	68ac      	ldr	r4, [r5, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <_puts_r+0x22>
 8005864:	0028      	movs	r0, r5
 8005866:	f000 fac9 	bl	8005dfc <__sinit>
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <_puts_r+0xb4>)
 800586c:	429c      	cmp	r4, r3
 800586e:	d10f      	bne.n	8005890 <_puts_r+0x48>
 8005870:	686c      	ldr	r4, [r5, #4]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	d502      	bpl.n	800587e <_puts_r+0x36>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11f      	bne.n	80058be <_puts_r+0x76>
 800587e:	0021      	movs	r1, r4
 8005880:	0028      	movs	r0, r5
 8005882:	f000 f94d 	bl	8005b20 <__swsetup_r>
 8005886:	2800      	cmp	r0, #0
 8005888:	d019      	beq.n	80058be <_puts_r+0x76>
 800588a:	2001      	movs	r0, #1
 800588c:	4240      	negs	r0, r0
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <_puts_r+0xb8>)
 8005892:	429c      	cmp	r4, r3
 8005894:	d101      	bne.n	800589a <_puts_r+0x52>
 8005896:	68ac      	ldr	r4, [r5, #8]
 8005898:	e7eb      	b.n	8005872 <_puts_r+0x2a>
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <_puts_r+0xbc>)
 800589c:	429c      	cmp	r4, r3
 800589e:	d1e8      	bne.n	8005872 <_puts_r+0x2a>
 80058a0:	68ec      	ldr	r4, [r5, #12]
 80058a2:	e7e6      	b.n	8005872 <_puts_r+0x2a>
 80058a4:	3601      	adds	r6, #1
 80058a6:	60a3      	str	r3, [r4, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da04      	bge.n	80058b6 <_puts_r+0x6e>
 80058ac:	69a2      	ldr	r2, [r4, #24]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	dc16      	bgt.n	80058e0 <_puts_r+0x98>
 80058b2:	290a      	cmp	r1, #10
 80058b4:	d014      	beq.n	80058e0 <_puts_r+0x98>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	7019      	strb	r1, [r3, #0]
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	7831      	ldrb	r1, [r6, #0]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d1ed      	bne.n	80058a4 <_puts_r+0x5c>
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da0f      	bge.n	80058ee <_puts_r+0xa6>
 80058ce:	0022      	movs	r2, r4
 80058d0:	310a      	adds	r1, #10
 80058d2:	0028      	movs	r0, r5
 80058d4:	f000 f8ce 	bl	8005a74 <__swbuf_r>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d0d6      	beq.n	800588a <_puts_r+0x42>
 80058dc:	200a      	movs	r0, #10
 80058de:	e7d6      	b.n	800588e <_puts_r+0x46>
 80058e0:	0022      	movs	r2, r4
 80058e2:	0028      	movs	r0, r5
 80058e4:	f000 f8c6 	bl	8005a74 <__swbuf_r>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d1e8      	bne.n	80058be <_puts_r+0x76>
 80058ec:	e7cd      	b.n	800588a <_puts_r+0x42>
 80058ee:	200a      	movs	r0, #10
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	7018      	strb	r0, [r3, #0]
 80058f8:	e7c9      	b.n	800588e <_puts_r+0x46>
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	08006ae4 	.word	0x08006ae4
 8005900:	08006b04 	.word	0x08006b04
 8005904:	08006ac4 	.word	0x08006ac4

08005908 <puts>:
 8005908:	b510      	push	{r4, lr}
 800590a:	4b03      	ldr	r3, [pc, #12]	; (8005918 <puts+0x10>)
 800590c:	0001      	movs	r1, r0
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	f7ff ff9a 	bl	8005848 <_puts_r>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	2000000c 	.word	0x2000000c

0800591c <setvbuf>:
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	001d      	movs	r5, r3
 8005920:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <setvbuf+0x144>)
 8005922:	b085      	sub	sp, #20
 8005924:	681e      	ldr	r6, [r3, #0]
 8005926:	0004      	movs	r4, r0
 8005928:	000f      	movs	r7, r1
 800592a:	9200      	str	r2, [sp, #0]
 800592c:	2e00      	cmp	r6, #0
 800592e:	d005      	beq.n	800593c <setvbuf+0x20>
 8005930:	69b3      	ldr	r3, [r6, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <setvbuf+0x20>
 8005936:	0030      	movs	r0, r6
 8005938:	f000 fa60 	bl	8005dfc <__sinit>
 800593c:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <setvbuf+0x148>)
 800593e:	429c      	cmp	r4, r3
 8005940:	d150      	bne.n	80059e4 <setvbuf+0xc8>
 8005942:	6874      	ldr	r4, [r6, #4]
 8005944:	9b00      	ldr	r3, [sp, #0]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d005      	beq.n	8005956 <setvbuf+0x3a>
 800594a:	2b01      	cmp	r3, #1
 800594c:	d900      	bls.n	8005950 <setvbuf+0x34>
 800594e:	e084      	b.n	8005a5a <setvbuf+0x13e>
 8005950:	2d00      	cmp	r5, #0
 8005952:	da00      	bge.n	8005956 <setvbuf+0x3a>
 8005954:	e081      	b.n	8005a5a <setvbuf+0x13e>
 8005956:	0021      	movs	r1, r4
 8005958:	0030      	movs	r0, r6
 800595a:	f000 f9e1 	bl	8005d20 <_fflush_r>
 800595e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005960:	2900      	cmp	r1, #0
 8005962:	d008      	beq.n	8005976 <setvbuf+0x5a>
 8005964:	0023      	movs	r3, r4
 8005966:	3344      	adds	r3, #68	; 0x44
 8005968:	4299      	cmp	r1, r3
 800596a:	d002      	beq.n	8005972 <setvbuf+0x56>
 800596c:	0030      	movs	r0, r6
 800596e:	f000 fb4f 	bl	8006010 <_free_r>
 8005972:	2300      	movs	r3, #0
 8005974:	6363      	str	r3, [r4, #52]	; 0x34
 8005976:	2300      	movs	r3, #0
 8005978:	61a3      	str	r3, [r4, #24]
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	d503      	bpl.n	800598a <setvbuf+0x6e>
 8005982:	6921      	ldr	r1, [r4, #16]
 8005984:	0030      	movs	r0, r6
 8005986:	f000 fb43 	bl	8006010 <_free_r>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	4a36      	ldr	r2, [pc, #216]	; (8005a68 <setvbuf+0x14c>)
 800598e:	4013      	ands	r3, r2
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	9b00      	ldr	r3, [sp, #0]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d05a      	beq.n	8005a4e <setvbuf+0x132>
 8005998:	ab03      	add	r3, sp, #12
 800599a:	aa02      	add	r2, sp, #8
 800599c:	0021      	movs	r1, r4
 800599e:	0030      	movs	r0, r6
 80059a0:	f000 fac0 	bl	8005f24 <__swhatbuf_r>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	4318      	orrs	r0, r3
 80059a8:	81a0      	strh	r0, [r4, #12]
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	d124      	bne.n	80059f8 <setvbuf+0xdc>
 80059ae:	9d02      	ldr	r5, [sp, #8]
 80059b0:	0028      	movs	r0, r5
 80059b2:	f000 fb23 	bl	8005ffc <malloc>
 80059b6:	9501      	str	r5, [sp, #4]
 80059b8:	1e07      	subs	r7, r0, #0
 80059ba:	d142      	bne.n	8005a42 <setvbuf+0x126>
 80059bc:	9b02      	ldr	r3, [sp, #8]
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	d139      	bne.n	8005a38 <setvbuf+0x11c>
 80059c4:	2001      	movs	r0, #1
 80059c6:	4240      	negs	r0, r0
 80059c8:	2302      	movs	r3, #2
 80059ca:	89a2      	ldrh	r2, [r4, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	2300      	movs	r3, #0
 80059d2:	60a3      	str	r3, [r4, #8]
 80059d4:	0023      	movs	r3, r4
 80059d6:	3347      	adds	r3, #71	; 0x47
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	2301      	movs	r3, #1
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	b005      	add	sp, #20
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <setvbuf+0x150>)
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d101      	bne.n	80059ee <setvbuf+0xd2>
 80059ea:	68b4      	ldr	r4, [r6, #8]
 80059ec:	e7aa      	b.n	8005944 <setvbuf+0x28>
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <setvbuf+0x154>)
 80059f0:	429c      	cmp	r4, r3
 80059f2:	d1a7      	bne.n	8005944 <setvbuf+0x28>
 80059f4:	68f4      	ldr	r4, [r6, #12]
 80059f6:	e7a5      	b.n	8005944 <setvbuf+0x28>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	d0d9      	beq.n	80059b0 <setvbuf+0x94>
 80059fc:	69b3      	ldr	r3, [r6, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <setvbuf+0xec>
 8005a02:	0030      	movs	r0, r6
 8005a04:	f000 f9fa 	bl	8005dfc <__sinit>
 8005a08:	9b00      	ldr	r3, [sp, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d103      	bne.n	8005a16 <setvbuf+0xfa>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	9a00      	ldr	r2, [sp, #0]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	81a2      	strh	r2, [r4, #12]
 8005a16:	2008      	movs	r0, #8
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	6027      	str	r7, [r4, #0]
 8005a1c:	6127      	str	r7, [r4, #16]
 8005a1e:	6165      	str	r5, [r4, #20]
 8005a20:	4018      	ands	r0, r3
 8005a22:	d018      	beq.n	8005a56 <setvbuf+0x13a>
 8005a24:	2001      	movs	r0, #1
 8005a26:	4018      	ands	r0, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4298      	cmp	r0, r3
 8005a2c:	d011      	beq.n	8005a52 <setvbuf+0x136>
 8005a2e:	426d      	negs	r5, r5
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	61a5      	str	r5, [r4, #24]
 8005a34:	0018      	movs	r0, r3
 8005a36:	e7d3      	b.n	80059e0 <setvbuf+0xc4>
 8005a38:	9801      	ldr	r0, [sp, #4]
 8005a3a:	f000 fadf 	bl	8005ffc <malloc>
 8005a3e:	1e07      	subs	r7, r0, #0
 8005a40:	d0c0      	beq.n	80059c4 <setvbuf+0xa8>
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	89a2      	ldrh	r2, [r4, #12]
 8005a46:	9d01      	ldr	r5, [sp, #4]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	e7d6      	b.n	80059fc <setvbuf+0xe0>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e7ba      	b.n	80059c8 <setvbuf+0xac>
 8005a52:	60a5      	str	r5, [r4, #8]
 8005a54:	e7c4      	b.n	80059e0 <setvbuf+0xc4>
 8005a56:	60a0      	str	r0, [r4, #8]
 8005a58:	e7c2      	b.n	80059e0 <setvbuf+0xc4>
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	4240      	negs	r0, r0
 8005a5e:	e7bf      	b.n	80059e0 <setvbuf+0xc4>
 8005a60:	2000000c 	.word	0x2000000c
 8005a64:	08006ae4 	.word	0x08006ae4
 8005a68:	fffff35c 	.word	0xfffff35c
 8005a6c:	08006b04 	.word	0x08006b04
 8005a70:	08006ac4 	.word	0x08006ac4

08005a74 <__swbuf_r>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	0005      	movs	r5, r0
 8005a78:	000e      	movs	r6, r1
 8005a7a:	0014      	movs	r4, r2
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d004      	beq.n	8005a8a <__swbuf_r+0x16>
 8005a80:	6983      	ldr	r3, [r0, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <__swbuf_r+0x16>
 8005a86:	f000 f9b9 	bl	8005dfc <__sinit>
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <__swbuf_r+0xa0>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	d12d      	bne.n	8005aec <__swbuf_r+0x78>
 8005a90:	686c      	ldr	r4, [r5, #4]
 8005a92:	69a3      	ldr	r3, [r4, #24]
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	071b      	lsls	r3, r3, #28
 8005a9a:	d531      	bpl.n	8005b00 <__swbuf_r+0x8c>
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02e      	beq.n	8005b00 <__swbuf_r+0x8c>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	b2f7      	uxtb	r7, r6
 8005aa8:	1a98      	subs	r0, r3, r2
 8005aaa:	6963      	ldr	r3, [r4, #20]
 8005aac:	b2f6      	uxtb	r6, r6
 8005aae:	4283      	cmp	r3, r0
 8005ab0:	dc05      	bgt.n	8005abe <__swbuf_r+0x4a>
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	0028      	movs	r0, r5
 8005ab6:	f000 f933 	bl	8005d20 <_fflush_r>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d126      	bne.n	8005b0c <__swbuf_r+0x98>
 8005abe:	68a3      	ldr	r3, [r4, #8]
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	60a3      	str	r3, [r4, #8]
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	701f      	strb	r7, [r3, #0]
 8005ace:	6963      	ldr	r3, [r4, #20]
 8005ad0:	4283      	cmp	r3, r0
 8005ad2:	d004      	beq.n	8005ade <__swbuf_r+0x6a>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	07db      	lsls	r3, r3, #31
 8005ad8:	d51a      	bpl.n	8005b10 <__swbuf_r+0x9c>
 8005ada:	2e0a      	cmp	r6, #10
 8005adc:	d118      	bne.n	8005b10 <__swbuf_r+0x9c>
 8005ade:	0021      	movs	r1, r4
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	f000 f91d 	bl	8005d20 <_fflush_r>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d012      	beq.n	8005b10 <__swbuf_r+0x9c>
 8005aea:	e00f      	b.n	8005b0c <__swbuf_r+0x98>
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <__swbuf_r+0xa4>)
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d101      	bne.n	8005af6 <__swbuf_r+0x82>
 8005af2:	68ac      	ldr	r4, [r5, #8]
 8005af4:	e7cd      	b.n	8005a92 <__swbuf_r+0x1e>
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <__swbuf_r+0xa8>)
 8005af8:	429c      	cmp	r4, r3
 8005afa:	d1ca      	bne.n	8005a92 <__swbuf_r+0x1e>
 8005afc:	68ec      	ldr	r4, [r5, #12]
 8005afe:	e7c8      	b.n	8005a92 <__swbuf_r+0x1e>
 8005b00:	0021      	movs	r1, r4
 8005b02:	0028      	movs	r0, r5
 8005b04:	f000 f80c 	bl	8005b20 <__swsetup_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d0ca      	beq.n	8005aa2 <__swbuf_r+0x2e>
 8005b0c:	2601      	movs	r6, #1
 8005b0e:	4276      	negs	r6, r6
 8005b10:	0030      	movs	r0, r6
 8005b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b14:	08006ae4 	.word	0x08006ae4
 8005b18:	08006b04 	.word	0x08006b04
 8005b1c:	08006ac4 	.word	0x08006ac4

08005b20 <__swsetup_r>:
 8005b20:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <__swsetup_r+0xdc>)
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	681d      	ldr	r5, [r3, #0]
 8005b26:	0006      	movs	r6, r0
 8005b28:	000c      	movs	r4, r1
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	d005      	beq.n	8005b3a <__swsetup_r+0x1a>
 8005b2e:	69ab      	ldr	r3, [r5, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <__swsetup_r+0x1a>
 8005b34:	0028      	movs	r0, r5
 8005b36:	f000 f961 	bl	8005dfc <__sinit>
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <__swsetup_r+0xe0>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	d10f      	bne.n	8005b60 <__swsetup_r+0x40>
 8005b40:	686c      	ldr	r4, [r5, #4]
 8005b42:	230c      	movs	r3, #12
 8005b44:	5ee2      	ldrsh	r2, [r4, r3]
 8005b46:	b293      	uxth	r3, r2
 8005b48:	0719      	lsls	r1, r3, #28
 8005b4a:	d42d      	bmi.n	8005ba8 <__swsetup_r+0x88>
 8005b4c:	06d9      	lsls	r1, r3, #27
 8005b4e:	d411      	bmi.n	8005b74 <__swsetup_r+0x54>
 8005b50:	2309      	movs	r3, #9
 8005b52:	2001      	movs	r0, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	3337      	adds	r3, #55	; 0x37
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	4240      	negs	r0, r0
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <__swsetup_r+0xe4>)
 8005b62:	429c      	cmp	r4, r3
 8005b64:	d101      	bne.n	8005b6a <__swsetup_r+0x4a>
 8005b66:	68ac      	ldr	r4, [r5, #8]
 8005b68:	e7eb      	b.n	8005b42 <__swsetup_r+0x22>
 8005b6a:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <__swsetup_r+0xe8>)
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	d1e8      	bne.n	8005b42 <__swsetup_r+0x22>
 8005b70:	68ec      	ldr	r4, [r5, #12]
 8005b72:	e7e6      	b.n	8005b42 <__swsetup_r+0x22>
 8005b74:	075b      	lsls	r3, r3, #29
 8005b76:	d513      	bpl.n	8005ba0 <__swsetup_r+0x80>
 8005b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d008      	beq.n	8005b90 <__swsetup_r+0x70>
 8005b7e:	0023      	movs	r3, r4
 8005b80:	3344      	adds	r3, #68	; 0x44
 8005b82:	4299      	cmp	r1, r3
 8005b84:	d002      	beq.n	8005b8c <__swsetup_r+0x6c>
 8005b86:	0030      	movs	r0, r6
 8005b88:	f000 fa42 	bl	8006010 <_free_r>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6363      	str	r3, [r4, #52]	; 0x34
 8005b90:	2224      	movs	r2, #36	; 0x24
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	4393      	bics	r3, r2
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6063      	str	r3, [r4, #4]
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	89a2      	ldrh	r2, [r4, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <__swsetup_r+0xa6>
 8005bae:	21a0      	movs	r1, #160	; 0xa0
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	0089      	lsls	r1, r1, #2
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	400b      	ands	r3, r1
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <__swsetup_r+0xa6>
 8005bbe:	0021      	movs	r1, r4
 8005bc0:	0030      	movs	r0, r6
 8005bc2:	f000 f9d7 	bl	8005f74 <__smakebuf_r>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	89a2      	ldrh	r2, [r4, #12]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d011      	beq.n	8005bf2 <__swsetup_r+0xd2>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60a3      	str	r3, [r4, #8]
 8005bd2:	6963      	ldr	r3, [r4, #20]
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	61a3      	str	r3, [r4, #24]
 8005bd8:	2000      	movs	r0, #0
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	d1be      	bne.n	8005b5e <__swsetup_r+0x3e>
 8005be0:	230c      	movs	r3, #12
 8005be2:	5ee2      	ldrsh	r2, [r4, r3]
 8005be4:	0613      	lsls	r3, r2, #24
 8005be6:	d5ba      	bpl.n	8005b5e <__swsetup_r+0x3e>
 8005be8:	2340      	movs	r3, #64	; 0x40
 8005bea:	4313      	orrs	r3, r2
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	3801      	subs	r0, #1
 8005bf0:	e7b5      	b.n	8005b5e <__swsetup_r+0x3e>
 8005bf2:	0792      	lsls	r2, r2, #30
 8005bf4:	d400      	bmi.n	8005bf8 <__swsetup_r+0xd8>
 8005bf6:	6963      	ldr	r3, [r4, #20]
 8005bf8:	60a3      	str	r3, [r4, #8]
 8005bfa:	e7ed      	b.n	8005bd8 <__swsetup_r+0xb8>
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	08006ae4 	.word	0x08006ae4
 8005c04:	08006b04 	.word	0x08006b04
 8005c08:	08006ac4 	.word	0x08006ac4

08005c0c <__sflush_r>:
 8005c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0e:	898a      	ldrh	r2, [r1, #12]
 8005c10:	0005      	movs	r5, r0
 8005c12:	000c      	movs	r4, r1
 8005c14:	0713      	lsls	r3, r2, #28
 8005c16:	d460      	bmi.n	8005cda <__sflush_r+0xce>
 8005c18:	684b      	ldr	r3, [r1, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	dc04      	bgt.n	8005c28 <__sflush_r+0x1c>
 8005c1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc01      	bgt.n	8005c28 <__sflush_r+0x1c>
 8005c24:	2000      	movs	r0, #0
 8005c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d0fa      	beq.n	8005c24 <__sflush_r+0x18>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	682e      	ldr	r6, [r5, #0]
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	015b      	lsls	r3, r3, #5
 8005c38:	6a21      	ldr	r1, [r4, #32]
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	d034      	beq.n	8005ca8 <__sflush_r+0x9c>
 8005c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	075b      	lsls	r3, r3, #29
 8005c44:	d506      	bpl.n	8005c54 <__sflush_r+0x48>
 8005c46:	6863      	ldr	r3, [r4, #4]
 8005c48:	1ac0      	subs	r0, r0, r3
 8005c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <__sflush_r+0x48>
 8005c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c52:	1ac0      	subs	r0, r0, r3
 8005c54:	0002      	movs	r2, r0
 8005c56:	6a21      	ldr	r1, [r4, #32]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	0028      	movs	r0, r5
 8005c5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c5e:	47b8      	blx	r7
 8005c60:	89a1      	ldrh	r1, [r4, #12]
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	d106      	bne.n	8005c74 <__sflush_r+0x68>
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	2b1d      	cmp	r3, #29
 8005c6a:	d830      	bhi.n	8005cce <__sflush_r+0xc2>
 8005c6c:	4a2b      	ldr	r2, [pc, #172]	; (8005d1c <__sflush_r+0x110>)
 8005c6e:	40da      	lsrs	r2, r3
 8005c70:	07d3      	lsls	r3, r2, #31
 8005c72:	d52c      	bpl.n	8005cce <__sflush_r+0xc2>
 8005c74:	2300      	movs	r3, #0
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	04cb      	lsls	r3, r1, #19
 8005c7e:	d505      	bpl.n	8005c8c <__sflush_r+0x80>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <__sflush_r+0x7e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d100      	bne.n	8005c8c <__sflush_r+0x80>
 8005c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8e:	602e      	str	r6, [r5, #0]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d0c7      	beq.n	8005c24 <__sflush_r+0x18>
 8005c94:	0023      	movs	r3, r4
 8005c96:	3344      	adds	r3, #68	; 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__sflush_r+0x96>
 8005c9c:	0028      	movs	r0, r5
 8005c9e:	f000 f9b7 	bl	8006010 <_free_r>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ca6:	e7be      	b.n	8005c26 <__sflush_r+0x1a>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	0028      	movs	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d1c6      	bne.n	8005c40 <__sflush_r+0x34>
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0c3      	beq.n	8005c40 <__sflush_r+0x34>
 8005cb8:	2b1d      	cmp	r3, #29
 8005cba:	d001      	beq.n	8005cc0 <__sflush_r+0xb4>
 8005cbc:	2b16      	cmp	r3, #22
 8005cbe:	d101      	bne.n	8005cc4 <__sflush_r+0xb8>
 8005cc0:	602e      	str	r6, [r5, #0]
 8005cc2:	e7af      	b.n	8005c24 <__sflush_r+0x18>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	89a2      	ldrh	r2, [r4, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	e7ab      	b.n	8005c26 <__sflush_r+0x1a>
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	4240      	negs	r0, r0
 8005cd8:	e7a5      	b.n	8005c26 <__sflush_r+0x1a>
 8005cda:	690f      	ldr	r7, [r1, #16]
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	d0a1      	beq.n	8005c24 <__sflush_r+0x18>
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	600f      	str	r7, [r1, #0]
 8005ce4:	1bdb      	subs	r3, r3, r7
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	0792      	lsls	r2, r2, #30
 8005cec:	d100      	bne.n	8005cf0 <__sflush_r+0xe4>
 8005cee:	694b      	ldr	r3, [r1, #20]
 8005cf0:	60a3      	str	r3, [r4, #8]
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dc00      	bgt.n	8005cfa <__sflush_r+0xee>
 8005cf8:	e794      	b.n	8005c24 <__sflush_r+0x18>
 8005cfa:	9b01      	ldr	r3, [sp, #4]
 8005cfc:	003a      	movs	r2, r7
 8005cfe:	6a21      	ldr	r1, [r4, #32]
 8005d00:	0028      	movs	r0, r5
 8005d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d04:	47b0      	blx	r6
 8005d06:	2800      	cmp	r0, #0
 8005d08:	dc03      	bgt.n	8005d12 <__sflush_r+0x106>
 8005d0a:	2340      	movs	r3, #64	; 0x40
 8005d0c:	89a2      	ldrh	r2, [r4, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	e7df      	b.n	8005cd2 <__sflush_r+0xc6>
 8005d12:	9b01      	ldr	r3, [sp, #4]
 8005d14:	183f      	adds	r7, r7, r0
 8005d16:	1a1b      	subs	r3, r3, r0
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	e7ea      	b.n	8005cf2 <__sflush_r+0xe6>
 8005d1c:	20400001 	.word	0x20400001

08005d20 <_fflush_r>:
 8005d20:	690b      	ldr	r3, [r1, #16]
 8005d22:	b570      	push	{r4, r5, r6, lr}
 8005d24:	0005      	movs	r5, r0
 8005d26:	000c      	movs	r4, r1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <_fflush_r+0x10>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d004      	beq.n	8005d3e <_fflush_r+0x1e>
 8005d34:	6983      	ldr	r3, [r0, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <_fflush_r+0x1e>
 8005d3a:	f000 f85f 	bl	8005dfc <__sinit>
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <_fflush_r+0x4c>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	d109      	bne.n	8005d58 <_fflush_r+0x38>
 8005d44:	686c      	ldr	r4, [r5, #4]
 8005d46:	220c      	movs	r2, #12
 8005d48:	5ea3      	ldrsh	r3, [r4, r2]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ee      	beq.n	8005d2c <_fflush_r+0xc>
 8005d4e:	0021      	movs	r1, r4
 8005d50:	0028      	movs	r0, r5
 8005d52:	f7ff ff5b 	bl	8005c0c <__sflush_r>
 8005d56:	e7ea      	b.n	8005d2e <_fflush_r+0xe>
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <_fflush_r+0x50>)
 8005d5a:	429c      	cmp	r4, r3
 8005d5c:	d101      	bne.n	8005d62 <_fflush_r+0x42>
 8005d5e:	68ac      	ldr	r4, [r5, #8]
 8005d60:	e7f1      	b.n	8005d46 <_fflush_r+0x26>
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <_fflush_r+0x54>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d1ee      	bne.n	8005d46 <_fflush_r+0x26>
 8005d68:	68ec      	ldr	r4, [r5, #12]
 8005d6a:	e7ec      	b.n	8005d46 <_fflush_r+0x26>
 8005d6c:	08006ae4 	.word	0x08006ae4
 8005d70:	08006b04 	.word	0x08006b04
 8005d74:	08006ac4 	.word	0x08006ac4

08005d78 <std>:
 8005d78:	2300      	movs	r3, #0
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	0004      	movs	r4, r0
 8005d7e:	6003      	str	r3, [r0, #0]
 8005d80:	6043      	str	r3, [r0, #4]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	; 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6103      	str	r3, [r0, #16]
 8005d8c:	6143      	str	r3, [r0, #20]
 8005d8e:	6183      	str	r3, [r0, #24]
 8005d90:	0019      	movs	r1, r3
 8005d92:	2208      	movs	r2, #8
 8005d94:	305c      	adds	r0, #92	; 0x5c
 8005d96:	f7ff fd21 	bl	80057dc <memset>
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <std+0x38>)
 8005d9c:	6224      	str	r4, [r4, #32]
 8005d9e:	6263      	str	r3, [r4, #36]	; 0x24
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <std+0x3c>)
 8005da2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <std+0x40>)
 8005da6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <std+0x44>)
 8005daa:	6323      	str	r3, [r4, #48]	; 0x30
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	08006759 	.word	0x08006759
 8005db4:	08006781 	.word	0x08006781
 8005db8:	080067b9 	.word	0x080067b9
 8005dbc:	080067e5 	.word	0x080067e5

08005dc0 <_cleanup_r>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	4902      	ldr	r1, [pc, #8]	; (8005dcc <_cleanup_r+0xc>)
 8005dc4:	f000 f88c 	bl	8005ee0 <_fwalk_reent>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	08005d21 	.word	0x08005d21

08005dd0 <__sfmoreglue>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	2568      	movs	r5, #104	; 0x68
 8005dd4:	1e4a      	subs	r2, r1, #1
 8005dd6:	4355      	muls	r5, r2
 8005dd8:	000e      	movs	r6, r1
 8005dda:	0029      	movs	r1, r5
 8005ddc:	3174      	adds	r1, #116	; 0x74
 8005dde:	f000 f961 	bl	80060a4 <_malloc_r>
 8005de2:	1e04      	subs	r4, r0, #0
 8005de4:	d008      	beq.n	8005df8 <__sfmoreglue+0x28>
 8005de6:	2100      	movs	r1, #0
 8005de8:	002a      	movs	r2, r5
 8005dea:	6001      	str	r1, [r0, #0]
 8005dec:	6046      	str	r6, [r0, #4]
 8005dee:	300c      	adds	r0, #12
 8005df0:	60a0      	str	r0, [r4, #8]
 8005df2:	3268      	adds	r2, #104	; 0x68
 8005df4:	f7ff fcf2 	bl	80057dc <memset>
 8005df8:	0020      	movs	r0, r4
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}

08005dfc <__sinit>:
 8005dfc:	6983      	ldr	r3, [r0, #24]
 8005dfe:	b513      	push	{r0, r1, r4, lr}
 8005e00:	0004      	movs	r4, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d128      	bne.n	8005e58 <__sinit+0x5c>
 8005e06:	6483      	str	r3, [r0, #72]	; 0x48
 8005e08:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005e0a:	6503      	str	r3, [r0, #80]	; 0x50
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <__sinit+0x60>)
 8005e0e:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <__sinit+0x64>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6282      	str	r2, [r0, #40]	; 0x28
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	4298      	cmp	r0, r3
 8005e18:	d101      	bne.n	8005e1e <__sinit+0x22>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	6183      	str	r3, [r0, #24]
 8005e1e:	0020      	movs	r0, r4
 8005e20:	f000 f820 	bl	8005e64 <__sfp>
 8005e24:	6060      	str	r0, [r4, #4]
 8005e26:	0020      	movs	r0, r4
 8005e28:	f000 f81c 	bl	8005e64 <__sfp>
 8005e2c:	60a0      	str	r0, [r4, #8]
 8005e2e:	0020      	movs	r0, r4
 8005e30:	f000 f818 	bl	8005e64 <__sfp>
 8005e34:	2200      	movs	r2, #0
 8005e36:	60e0      	str	r0, [r4, #12]
 8005e38:	2104      	movs	r1, #4
 8005e3a:	6860      	ldr	r0, [r4, #4]
 8005e3c:	f7ff ff9c 	bl	8005d78 <std>
 8005e40:	2201      	movs	r2, #1
 8005e42:	2109      	movs	r1, #9
 8005e44:	68a0      	ldr	r0, [r4, #8]
 8005e46:	f7ff ff97 	bl	8005d78 <std>
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	2112      	movs	r1, #18
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	f7ff ff92 	bl	8005d78 <std>
 8005e54:	2301      	movs	r3, #1
 8005e56:	61a3      	str	r3, [r4, #24]
 8005e58:	bd13      	pop	{r0, r1, r4, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	08006ac0 	.word	0x08006ac0
 8005e60:	08005dc1 	.word	0x08005dc1

08005e64 <__sfp>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <__sfp+0x74>)
 8005e68:	0007      	movs	r7, r0
 8005e6a:	681e      	ldr	r6, [r3, #0]
 8005e6c:	69b3      	ldr	r3, [r6, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <__sfp+0x14>
 8005e72:	0030      	movs	r0, r6
 8005e74:	f7ff ffc2 	bl	8005dfc <__sinit>
 8005e78:	3648      	adds	r6, #72	; 0x48
 8005e7a:	68b4      	ldr	r4, [r6, #8]
 8005e7c:	6873      	ldr	r3, [r6, #4]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	d504      	bpl.n	8005e8c <__sfp+0x28>
 8005e82:	6833      	ldr	r3, [r6, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <__sfp+0x34>
 8005e88:	6836      	ldr	r6, [r6, #0]
 8005e8a:	e7f6      	b.n	8005e7a <__sfp+0x16>
 8005e8c:	220c      	movs	r2, #12
 8005e8e:	5ea5      	ldrsh	r5, [r4, r2]
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	d00d      	beq.n	8005eb0 <__sfp+0x4c>
 8005e94:	3468      	adds	r4, #104	; 0x68
 8005e96:	e7f2      	b.n	8005e7e <__sfp+0x1a>
 8005e98:	2104      	movs	r1, #4
 8005e9a:	0038      	movs	r0, r7
 8005e9c:	f7ff ff98 	bl	8005dd0 <__sfmoreglue>
 8005ea0:	6030      	str	r0, [r6, #0]
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d1f0      	bne.n	8005e88 <__sfp+0x24>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	0004      	movs	r4, r0
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	0020      	movs	r0, r4
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	0020      	movs	r0, r4
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <__sfp+0x78>)
 8005eb4:	6665      	str	r5, [r4, #100]	; 0x64
 8005eb6:	6025      	str	r5, [r4, #0]
 8005eb8:	6065      	str	r5, [r4, #4]
 8005eba:	60a5      	str	r5, [r4, #8]
 8005ebc:	60e3      	str	r3, [r4, #12]
 8005ebe:	6125      	str	r5, [r4, #16]
 8005ec0:	6165      	str	r5, [r4, #20]
 8005ec2:	61a5      	str	r5, [r4, #24]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	0029      	movs	r1, r5
 8005ec8:	305c      	adds	r0, #92	; 0x5c
 8005eca:	f7ff fc87 	bl	80057dc <memset>
 8005ece:	6365      	str	r5, [r4, #52]	; 0x34
 8005ed0:	63a5      	str	r5, [r4, #56]	; 0x38
 8005ed2:	64a5      	str	r5, [r4, #72]	; 0x48
 8005ed4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005ed6:	e7e9      	b.n	8005eac <__sfp+0x48>
 8005ed8:	08006ac0 	.word	0x08006ac0
 8005edc:	ffff0001 	.word	0xffff0001

08005ee0 <_fwalk_reent>:
 8005ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee2:	0004      	movs	r4, r0
 8005ee4:	0007      	movs	r7, r0
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	9101      	str	r1, [sp, #4]
 8005eea:	3448      	adds	r4, #72	; 0x48
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	d101      	bne.n	8005ef4 <_fwalk_reent+0x14>
 8005ef0:	0030      	movs	r0, r6
 8005ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ef4:	6863      	ldr	r3, [r4, #4]
 8005ef6:	68a5      	ldr	r5, [r4, #8]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	9b00      	ldr	r3, [sp, #0]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	d501      	bpl.n	8005f06 <_fwalk_reent+0x26>
 8005f02:	6824      	ldr	r4, [r4, #0]
 8005f04:	e7f2      	b.n	8005eec <_fwalk_reent+0xc>
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d908      	bls.n	8005f1e <_fwalk_reent+0x3e>
 8005f0c:	220e      	movs	r2, #14
 8005f0e:	5eab      	ldrsh	r3, [r5, r2]
 8005f10:	3301      	adds	r3, #1
 8005f12:	d004      	beq.n	8005f1e <_fwalk_reent+0x3e>
 8005f14:	0029      	movs	r1, r5
 8005f16:	0038      	movs	r0, r7
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	4306      	orrs	r6, r0
 8005f1e:	3568      	adds	r5, #104	; 0x68
 8005f20:	e7eb      	b.n	8005efa <_fwalk_reent+0x1a>
	...

08005f24 <__swhatbuf_r>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	000e      	movs	r6, r1
 8005f28:	001d      	movs	r5, r3
 8005f2a:	230e      	movs	r3, #14
 8005f2c:	5ec9      	ldrsh	r1, [r1, r3]
 8005f2e:	b096      	sub	sp, #88	; 0x58
 8005f30:	0014      	movs	r4, r2
 8005f32:	2900      	cmp	r1, #0
 8005f34:	da07      	bge.n	8005f46 <__swhatbuf_r+0x22>
 8005f36:	2300      	movs	r3, #0
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	89b3      	ldrh	r3, [r6, #12]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	d411      	bmi.n	8005f64 <__swhatbuf_r+0x40>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	e00f      	b.n	8005f66 <__swhatbuf_r+0x42>
 8005f46:	466a      	mov	r2, sp
 8005f48:	f000 fc78 	bl	800683c <_fstat_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	dbf2      	blt.n	8005f36 <__swhatbuf_r+0x12>
 8005f50:	22f0      	movs	r2, #240	; 0xf0
 8005f52:	9b01      	ldr	r3, [sp, #4]
 8005f54:	0212      	lsls	r2, r2, #8
 8005f56:	4013      	ands	r3, r2
 8005f58:	4a05      	ldr	r2, [pc, #20]	; (8005f70 <__swhatbuf_r+0x4c>)
 8005f5a:	189b      	adds	r3, r3, r2
 8005f5c:	425a      	negs	r2, r3
 8005f5e:	4153      	adcs	r3, r2
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	e7ed      	b.n	8005f40 <__swhatbuf_r+0x1c>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	2000      	movs	r0, #0
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	b016      	add	sp, #88	; 0x58
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	ffffe000 	.word	0xffffe000

08005f74 <__smakebuf_r>:
 8005f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f76:	2602      	movs	r6, #2
 8005f78:	898b      	ldrh	r3, [r1, #12]
 8005f7a:	0005      	movs	r5, r0
 8005f7c:	000c      	movs	r4, r1
 8005f7e:	4233      	tst	r3, r6
 8005f80:	d006      	beq.n	8005f90 <__smakebuf_r+0x1c>
 8005f82:	0023      	movs	r3, r4
 8005f84:	3347      	adds	r3, #71	; 0x47
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	6163      	str	r3, [r4, #20]
 8005f8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005f90:	ab01      	add	r3, sp, #4
 8005f92:	466a      	mov	r2, sp
 8005f94:	f7ff ffc6 	bl	8005f24 <__swhatbuf_r>
 8005f98:	9900      	ldr	r1, [sp, #0]
 8005f9a:	0007      	movs	r7, r0
 8005f9c:	0028      	movs	r0, r5
 8005f9e:	f000 f881 	bl	80060a4 <_malloc_r>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d108      	bne.n	8005fb8 <__smakebuf_r+0x44>
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	5ea3      	ldrsh	r3, [r4, r2]
 8005faa:	059a      	lsls	r2, r3, #22
 8005fac:	d4ef      	bmi.n	8005f8e <__smakebuf_r+0x1a>
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4393      	bics	r3, r2
 8005fb2:	431e      	orrs	r6, r3
 8005fb4:	81a6      	strh	r6, [r4, #12]
 8005fb6:	e7e4      	b.n	8005f82 <__smakebuf_r+0xe>
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <__smakebuf_r+0x84>)
 8005fba:	62ab      	str	r3, [r5, #40]	; 0x28
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	89a2      	ldrh	r2, [r4, #12]
 8005fc0:	6020      	str	r0, [r4, #0]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	9b00      	ldr	r3, [sp, #0]
 8005fc8:	6120      	str	r0, [r4, #16]
 8005fca:	6163      	str	r3, [r4, #20]
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <__smakebuf_r+0x7a>
 8005fd2:	230e      	movs	r3, #14
 8005fd4:	5ee1      	ldrsh	r1, [r4, r3]
 8005fd6:	0028      	movs	r0, r5
 8005fd8:	f000 fc42 	bl	8006860 <_isatty_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d006      	beq.n	8005fee <__smakebuf_r+0x7a>
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	4393      	bics	r3, r2
 8005fe6:	001a      	movs	r2, r3
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	89a0      	ldrh	r0, [r4, #12]
 8005ff0:	4338      	orrs	r0, r7
 8005ff2:	81a0      	strh	r0, [r4, #12]
 8005ff4:	e7cb      	b.n	8005f8e <__smakebuf_r+0x1a>
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	08005dc1 	.word	0x08005dc1

08005ffc <malloc>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4b03      	ldr	r3, [pc, #12]	; (800600c <malloc+0x10>)
 8006000:	0001      	movs	r1, r0
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f000 f84e 	bl	80060a4 <_malloc_r>
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	2000000c 	.word	0x2000000c

08006010 <_free_r>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	0005      	movs	r5, r0
 8006014:	2900      	cmp	r1, #0
 8006016:	d010      	beq.n	800603a <_free_r+0x2a>
 8006018:	1f0c      	subs	r4, r1, #4
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da00      	bge.n	8006022 <_free_r+0x12>
 8006020:	18e4      	adds	r4, r4, r3
 8006022:	0028      	movs	r0, r5
 8006024:	f000 fc4d 	bl	80068c2 <__malloc_lock>
 8006028:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <_free_r+0x90>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <_free_r+0x2c>
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	6014      	str	r4, [r2, #0]
 8006034:	0028      	movs	r0, r5
 8006036:	f000 fc45 	bl	80068c4 <__malloc_unlock>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	42a3      	cmp	r3, r4
 800603e:	d909      	bls.n	8006054 <_free_r+0x44>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	1860      	adds	r0, r4, r1
 8006044:	4283      	cmp	r3, r0
 8006046:	d1f3      	bne.n	8006030 <_free_r+0x20>
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	1841      	adds	r1, r0, r1
 800604e:	6021      	str	r1, [r4, #0]
 8006050:	e7ee      	b.n	8006030 <_free_r+0x20>
 8006052:	0013      	movs	r3, r2
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	2a00      	cmp	r2, #0
 8006058:	d001      	beq.n	800605e <_free_r+0x4e>
 800605a:	42a2      	cmp	r2, r4
 800605c:	d9f9      	bls.n	8006052 <_free_r+0x42>
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	1858      	adds	r0, r3, r1
 8006062:	42a0      	cmp	r0, r4
 8006064:	d10b      	bne.n	800607e <_free_r+0x6e>
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	1809      	adds	r1, r1, r0
 800606a:	1858      	adds	r0, r3, r1
 800606c:	6019      	str	r1, [r3, #0]
 800606e:	4282      	cmp	r2, r0
 8006070:	d1e0      	bne.n	8006034 <_free_r+0x24>
 8006072:	6810      	ldr	r0, [r2, #0]
 8006074:	6852      	ldr	r2, [r2, #4]
 8006076:	1841      	adds	r1, r0, r1
 8006078:	6019      	str	r1, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	e7da      	b.n	8006034 <_free_r+0x24>
 800607e:	42a0      	cmp	r0, r4
 8006080:	d902      	bls.n	8006088 <_free_r+0x78>
 8006082:	230c      	movs	r3, #12
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	e7d5      	b.n	8006034 <_free_r+0x24>
 8006088:	6821      	ldr	r1, [r4, #0]
 800608a:	1860      	adds	r0, r4, r1
 800608c:	4282      	cmp	r2, r0
 800608e:	d103      	bne.n	8006098 <_free_r+0x88>
 8006090:	6810      	ldr	r0, [r2, #0]
 8006092:	6852      	ldr	r2, [r2, #4]
 8006094:	1841      	adds	r1, r0, r1
 8006096:	6021      	str	r1, [r4, #0]
 8006098:	6062      	str	r2, [r4, #4]
 800609a:	605c      	str	r4, [r3, #4]
 800609c:	e7ca      	b.n	8006034 <_free_r+0x24>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	20000120 	.word	0x20000120

080060a4 <_malloc_r>:
 80060a4:	2303      	movs	r3, #3
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	1ccd      	adds	r5, r1, #3
 80060aa:	439d      	bics	r5, r3
 80060ac:	3508      	adds	r5, #8
 80060ae:	0006      	movs	r6, r0
 80060b0:	2d0c      	cmp	r5, #12
 80060b2:	d21e      	bcs.n	80060f2 <_malloc_r+0x4e>
 80060b4:	250c      	movs	r5, #12
 80060b6:	42a9      	cmp	r1, r5
 80060b8:	d81d      	bhi.n	80060f6 <_malloc_r+0x52>
 80060ba:	0030      	movs	r0, r6
 80060bc:	f000 fc01 	bl	80068c2 <__malloc_lock>
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <_malloc_r+0xb4>)
 80060c2:	6814      	ldr	r4, [r2, #0]
 80060c4:	0021      	movs	r1, r4
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d119      	bne.n	80060fe <_malloc_r+0x5a>
 80060ca:	4c24      	ldr	r4, [pc, #144]	; (800615c <_malloc_r+0xb8>)
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <_malloc_r+0x36>
 80060d2:	0030      	movs	r0, r6
 80060d4:	f000 fb2e 	bl	8006734 <_sbrk_r>
 80060d8:	6020      	str	r0, [r4, #0]
 80060da:	0029      	movs	r1, r5
 80060dc:	0030      	movs	r0, r6
 80060de:	f000 fb29 	bl	8006734 <_sbrk_r>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d12b      	bne.n	800613e <_malloc_r+0x9a>
 80060e6:	230c      	movs	r3, #12
 80060e8:	0030      	movs	r0, r6
 80060ea:	6033      	str	r3, [r6, #0]
 80060ec:	f000 fbea 	bl	80068c4 <__malloc_unlock>
 80060f0:	e003      	b.n	80060fa <_malloc_r+0x56>
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	dadf      	bge.n	80060b6 <_malloc_r+0x12>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	2000      	movs	r0, #0
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	680b      	ldr	r3, [r1, #0]
 8006100:	1b5b      	subs	r3, r3, r5
 8006102:	d419      	bmi.n	8006138 <_malloc_r+0x94>
 8006104:	2b0b      	cmp	r3, #11
 8006106:	d903      	bls.n	8006110 <_malloc_r+0x6c>
 8006108:	600b      	str	r3, [r1, #0]
 800610a:	18cc      	adds	r4, r1, r3
 800610c:	6025      	str	r5, [r4, #0]
 800610e:	e003      	b.n	8006118 <_malloc_r+0x74>
 8006110:	684b      	ldr	r3, [r1, #4]
 8006112:	428c      	cmp	r4, r1
 8006114:	d10d      	bne.n	8006132 <_malloc_r+0x8e>
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	0030      	movs	r0, r6
 800611a:	f000 fbd3 	bl	80068c4 <__malloc_unlock>
 800611e:	0020      	movs	r0, r4
 8006120:	2207      	movs	r2, #7
 8006122:	300b      	adds	r0, #11
 8006124:	1d23      	adds	r3, r4, #4
 8006126:	4390      	bics	r0, r2
 8006128:	1ac3      	subs	r3, r0, r3
 800612a:	d0e7      	beq.n	80060fc <_malloc_r+0x58>
 800612c:	425a      	negs	r2, r3
 800612e:	50e2      	str	r2, [r4, r3]
 8006130:	e7e4      	b.n	80060fc <_malloc_r+0x58>
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	000c      	movs	r4, r1
 8006136:	e7ef      	b.n	8006118 <_malloc_r+0x74>
 8006138:	000c      	movs	r4, r1
 800613a:	6849      	ldr	r1, [r1, #4]
 800613c:	e7c3      	b.n	80060c6 <_malloc_r+0x22>
 800613e:	2303      	movs	r3, #3
 8006140:	1cc4      	adds	r4, r0, #3
 8006142:	439c      	bics	r4, r3
 8006144:	42a0      	cmp	r0, r4
 8006146:	d0e1      	beq.n	800610c <_malloc_r+0x68>
 8006148:	1a21      	subs	r1, r4, r0
 800614a:	0030      	movs	r0, r6
 800614c:	f000 faf2 	bl	8006734 <_sbrk_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d1db      	bne.n	800610c <_malloc_r+0x68>
 8006154:	e7c7      	b.n	80060e6 <_malloc_r+0x42>
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	20000120 	.word	0x20000120
 800615c:	20000124 	.word	0x20000124

08006160 <__sfputc_r>:
 8006160:	6893      	ldr	r3, [r2, #8]
 8006162:	b510      	push	{r4, lr}
 8006164:	3b01      	subs	r3, #1
 8006166:	6093      	str	r3, [r2, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	da04      	bge.n	8006176 <__sfputc_r+0x16>
 800616c:	6994      	ldr	r4, [r2, #24]
 800616e:	42a3      	cmp	r3, r4
 8006170:	db07      	blt.n	8006182 <__sfputc_r+0x22>
 8006172:	290a      	cmp	r1, #10
 8006174:	d005      	beq.n	8006182 <__sfputc_r+0x22>
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	1c58      	adds	r0, r3, #1
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	7019      	strb	r1, [r3, #0]
 800617e:	0008      	movs	r0, r1
 8006180:	bd10      	pop	{r4, pc}
 8006182:	f7ff fc77 	bl	8005a74 <__swbuf_r>
 8006186:	0001      	movs	r1, r0
 8006188:	e7f9      	b.n	800617e <__sfputc_r+0x1e>

0800618a <__sfputs_r>:
 800618a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618c:	0006      	movs	r6, r0
 800618e:	000f      	movs	r7, r1
 8006190:	0014      	movs	r4, r2
 8006192:	18d5      	adds	r5, r2, r3
 8006194:	42ac      	cmp	r4, r5
 8006196:	d101      	bne.n	800619c <__sfputs_r+0x12>
 8006198:	2000      	movs	r0, #0
 800619a:	e007      	b.n	80061ac <__sfputs_r+0x22>
 800619c:	7821      	ldrb	r1, [r4, #0]
 800619e:	003a      	movs	r2, r7
 80061a0:	0030      	movs	r0, r6
 80061a2:	f7ff ffdd 	bl	8006160 <__sfputc_r>
 80061a6:	3401      	adds	r4, #1
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d1f3      	bne.n	8006194 <__sfputs_r+0xa>
 80061ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061b0 <_vfiprintf_r>:
 80061b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b2:	b0a1      	sub	sp, #132	; 0x84
 80061b4:	9003      	str	r0, [sp, #12]
 80061b6:	000f      	movs	r7, r1
 80061b8:	0016      	movs	r6, r2
 80061ba:	001d      	movs	r5, r3
 80061bc:	2800      	cmp	r0, #0
 80061be:	d005      	beq.n	80061cc <_vfiprintf_r+0x1c>
 80061c0:	6983      	ldr	r3, [r0, #24]
 80061c2:	9305      	str	r3, [sp, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <_vfiprintf_r+0x1c>
 80061c8:	f7ff fe18 	bl	8005dfc <__sinit>
 80061cc:	4b7b      	ldr	r3, [pc, #492]	; (80063bc <_vfiprintf_r+0x20c>)
 80061ce:	429f      	cmp	r7, r3
 80061d0:	d15c      	bne.n	800628c <_vfiprintf_r+0xdc>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	685f      	ldr	r7, [r3, #4]
 80061d6:	89bb      	ldrh	r3, [r7, #12]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d563      	bpl.n	80062a4 <_vfiprintf_r+0xf4>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d060      	beq.n	80062a4 <_vfiprintf_r+0xf4>
 80061e2:	2300      	movs	r3, #0
 80061e4:	ac08      	add	r4, sp, #32
 80061e6:	6163      	str	r3, [r4, #20]
 80061e8:	3320      	adds	r3, #32
 80061ea:	7663      	strb	r3, [r4, #25]
 80061ec:	3310      	adds	r3, #16
 80061ee:	76a3      	strb	r3, [r4, #26]
 80061f0:	9507      	str	r5, [sp, #28]
 80061f2:	0035      	movs	r5, r6
 80061f4:	782b      	ldrb	r3, [r5, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <_vfiprintf_r+0x4e>
 80061fa:	2b25      	cmp	r3, #37	; 0x25
 80061fc:	d15c      	bne.n	80062b8 <_vfiprintf_r+0x108>
 80061fe:	1bab      	subs	r3, r5, r6
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	d00c      	beq.n	800621e <_vfiprintf_r+0x6e>
 8006204:	0032      	movs	r2, r6
 8006206:	0039      	movs	r1, r7
 8006208:	9803      	ldr	r0, [sp, #12]
 800620a:	f7ff ffbe 	bl	800618a <__sfputs_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d100      	bne.n	8006214 <_vfiprintf_r+0x64>
 8006212:	e0c4      	b.n	800639e <_vfiprintf_r+0x1ee>
 8006214:	6962      	ldr	r2, [r4, #20]
 8006216:	9b05      	ldr	r3, [sp, #20]
 8006218:	4694      	mov	ip, r2
 800621a:	4463      	add	r3, ip
 800621c:	6163      	str	r3, [r4, #20]
 800621e:	782b      	ldrb	r3, [r5, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d100      	bne.n	8006226 <_vfiprintf_r+0x76>
 8006224:	e0bb      	b.n	800639e <_vfiprintf_r+0x1ee>
 8006226:	2201      	movs	r2, #1
 8006228:	2300      	movs	r3, #0
 800622a:	4252      	negs	r2, r2
 800622c:	6062      	str	r2, [r4, #4]
 800622e:	a904      	add	r1, sp, #16
 8006230:	3254      	adds	r2, #84	; 0x54
 8006232:	1852      	adds	r2, r2, r1
 8006234:	1c6e      	adds	r6, r5, #1
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	60e3      	str	r3, [r4, #12]
 800623a:	60a3      	str	r3, [r4, #8]
 800623c:	7013      	strb	r3, [r2, #0]
 800623e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006240:	7831      	ldrb	r1, [r6, #0]
 8006242:	2205      	movs	r2, #5
 8006244:	485e      	ldr	r0, [pc, #376]	; (80063c0 <_vfiprintf_r+0x210>)
 8006246:	f000 fb31 	bl	80068ac <memchr>
 800624a:	1c75      	adds	r5, r6, #1
 800624c:	2800      	cmp	r0, #0
 800624e:	d135      	bne.n	80062bc <_vfiprintf_r+0x10c>
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	06d3      	lsls	r3, r2, #27
 8006254:	d504      	bpl.n	8006260 <_vfiprintf_r+0xb0>
 8006256:	2353      	movs	r3, #83	; 0x53
 8006258:	a904      	add	r1, sp, #16
 800625a:	185b      	adds	r3, r3, r1
 800625c:	2120      	movs	r1, #32
 800625e:	7019      	strb	r1, [r3, #0]
 8006260:	0713      	lsls	r3, r2, #28
 8006262:	d504      	bpl.n	800626e <_vfiprintf_r+0xbe>
 8006264:	2353      	movs	r3, #83	; 0x53
 8006266:	a904      	add	r1, sp, #16
 8006268:	185b      	adds	r3, r3, r1
 800626a:	212b      	movs	r1, #43	; 0x2b
 800626c:	7019      	strb	r1, [r3, #0]
 800626e:	7833      	ldrb	r3, [r6, #0]
 8006270:	2b2a      	cmp	r3, #42	; 0x2a
 8006272:	d02c      	beq.n	80062ce <_vfiprintf_r+0x11e>
 8006274:	0035      	movs	r5, r6
 8006276:	2100      	movs	r1, #0
 8006278:	200a      	movs	r0, #10
 800627a:	68e3      	ldr	r3, [r4, #12]
 800627c:	782a      	ldrb	r2, [r5, #0]
 800627e:	1c6e      	adds	r6, r5, #1
 8006280:	3a30      	subs	r2, #48	; 0x30
 8006282:	2a09      	cmp	r2, #9
 8006284:	d964      	bls.n	8006350 <_vfiprintf_r+0x1a0>
 8006286:	2900      	cmp	r1, #0
 8006288:	d02e      	beq.n	80062e8 <_vfiprintf_r+0x138>
 800628a:	e026      	b.n	80062da <_vfiprintf_r+0x12a>
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <_vfiprintf_r+0x214>)
 800628e:	429f      	cmp	r7, r3
 8006290:	d102      	bne.n	8006298 <_vfiprintf_r+0xe8>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	689f      	ldr	r7, [r3, #8]
 8006296:	e79e      	b.n	80061d6 <_vfiprintf_r+0x26>
 8006298:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <_vfiprintf_r+0x218>)
 800629a:	429f      	cmp	r7, r3
 800629c:	d19b      	bne.n	80061d6 <_vfiprintf_r+0x26>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	68df      	ldr	r7, [r3, #12]
 80062a2:	e798      	b.n	80061d6 <_vfiprintf_r+0x26>
 80062a4:	0039      	movs	r1, r7
 80062a6:	9803      	ldr	r0, [sp, #12]
 80062a8:	f7ff fc3a 	bl	8005b20 <__swsetup_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d098      	beq.n	80061e2 <_vfiprintf_r+0x32>
 80062b0:	2001      	movs	r0, #1
 80062b2:	4240      	negs	r0, r0
 80062b4:	b021      	add	sp, #132	; 0x84
 80062b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b8:	3501      	adds	r5, #1
 80062ba:	e79b      	b.n	80061f4 <_vfiprintf_r+0x44>
 80062bc:	4b40      	ldr	r3, [pc, #256]	; (80063c0 <_vfiprintf_r+0x210>)
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	1ac0      	subs	r0, r0, r3
 80062c2:	2301      	movs	r3, #1
 80062c4:	4083      	lsls	r3, r0
 80062c6:	4313      	orrs	r3, r2
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	002e      	movs	r6, r5
 80062cc:	e7b8      	b.n	8006240 <_vfiprintf_r+0x90>
 80062ce:	9b07      	ldr	r3, [sp, #28]
 80062d0:	1d19      	adds	r1, r3, #4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	9107      	str	r1, [sp, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	db01      	blt.n	80062de <_vfiprintf_r+0x12e>
 80062da:	930b      	str	r3, [sp, #44]	; 0x2c
 80062dc:	e004      	b.n	80062e8 <_vfiprintf_r+0x138>
 80062de:	425b      	negs	r3, r3
 80062e0:	60e3      	str	r3, [r4, #12]
 80062e2:	2302      	movs	r3, #2
 80062e4:	4313      	orrs	r3, r2
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	782b      	ldrb	r3, [r5, #0]
 80062ea:	2b2e      	cmp	r3, #46	; 0x2e
 80062ec:	d10a      	bne.n	8006304 <_vfiprintf_r+0x154>
 80062ee:	786b      	ldrb	r3, [r5, #1]
 80062f0:	2b2a      	cmp	r3, #42	; 0x2a
 80062f2:	d135      	bne.n	8006360 <_vfiprintf_r+0x1b0>
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	3502      	adds	r5, #2
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9207      	str	r2, [sp, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	db2b      	blt.n	800635a <_vfiprintf_r+0x1aa>
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	4e31      	ldr	r6, [pc, #196]	; (80063cc <_vfiprintf_r+0x21c>)
 8006306:	7829      	ldrb	r1, [r5, #0]
 8006308:	2203      	movs	r2, #3
 800630a:	0030      	movs	r0, r6
 800630c:	f000 face 	bl	80068ac <memchr>
 8006310:	2800      	cmp	r0, #0
 8006312:	d006      	beq.n	8006322 <_vfiprintf_r+0x172>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	1b80      	subs	r0, r0, r6
 8006318:	4083      	lsls	r3, r0
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	3501      	adds	r5, #1
 800631e:	4313      	orrs	r3, r2
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	7829      	ldrb	r1, [r5, #0]
 8006324:	2206      	movs	r2, #6
 8006326:	482a      	ldr	r0, [pc, #168]	; (80063d0 <_vfiprintf_r+0x220>)
 8006328:	1c6e      	adds	r6, r5, #1
 800632a:	7621      	strb	r1, [r4, #24]
 800632c:	f000 fabe 	bl	80068ac <memchr>
 8006330:	2800      	cmp	r0, #0
 8006332:	d03a      	beq.n	80063aa <_vfiprintf_r+0x1fa>
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <_vfiprintf_r+0x224>)
 8006336:	2b00      	cmp	r3, #0
 8006338:	d125      	bne.n	8006386 <_vfiprintf_r+0x1d6>
 800633a:	2207      	movs	r2, #7
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	3307      	adds	r3, #7
 8006340:	4393      	bics	r3, r2
 8006342:	3308      	adds	r3, #8
 8006344:	9307      	str	r3, [sp, #28]
 8006346:	6963      	ldr	r3, [r4, #20]
 8006348:	9a04      	ldr	r2, [sp, #16]
 800634a:	189b      	adds	r3, r3, r2
 800634c:	6163      	str	r3, [r4, #20]
 800634e:	e750      	b.n	80061f2 <_vfiprintf_r+0x42>
 8006350:	4343      	muls	r3, r0
 8006352:	2101      	movs	r1, #1
 8006354:	189b      	adds	r3, r3, r2
 8006356:	0035      	movs	r5, r6
 8006358:	e790      	b.n	800627c <_vfiprintf_r+0xcc>
 800635a:	2301      	movs	r3, #1
 800635c:	425b      	negs	r3, r3
 800635e:	e7d0      	b.n	8006302 <_vfiprintf_r+0x152>
 8006360:	2300      	movs	r3, #0
 8006362:	200a      	movs	r0, #10
 8006364:	001a      	movs	r2, r3
 8006366:	3501      	adds	r5, #1
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	7829      	ldrb	r1, [r5, #0]
 800636c:	1c6e      	adds	r6, r5, #1
 800636e:	3930      	subs	r1, #48	; 0x30
 8006370:	2909      	cmp	r1, #9
 8006372:	d903      	bls.n	800637c <_vfiprintf_r+0x1cc>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0c5      	beq.n	8006304 <_vfiprintf_r+0x154>
 8006378:	9209      	str	r2, [sp, #36]	; 0x24
 800637a:	e7c3      	b.n	8006304 <_vfiprintf_r+0x154>
 800637c:	4342      	muls	r2, r0
 800637e:	2301      	movs	r3, #1
 8006380:	1852      	adds	r2, r2, r1
 8006382:	0035      	movs	r5, r6
 8006384:	e7f1      	b.n	800636a <_vfiprintf_r+0x1ba>
 8006386:	ab07      	add	r3, sp, #28
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	003a      	movs	r2, r7
 800638c:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <_vfiprintf_r+0x228>)
 800638e:	0021      	movs	r1, r4
 8006390:	9803      	ldr	r0, [sp, #12]
 8006392:	e000      	b.n	8006396 <_vfiprintf_r+0x1e6>
 8006394:	bf00      	nop
 8006396:	9004      	str	r0, [sp, #16]
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	3301      	adds	r3, #1
 800639c:	d1d3      	bne.n	8006346 <_vfiprintf_r+0x196>
 800639e:	89bb      	ldrh	r3, [r7, #12]
 80063a0:	065b      	lsls	r3, r3, #25
 80063a2:	d500      	bpl.n	80063a6 <_vfiprintf_r+0x1f6>
 80063a4:	e784      	b.n	80062b0 <_vfiprintf_r+0x100>
 80063a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063a8:	e784      	b.n	80062b4 <_vfiprintf_r+0x104>
 80063aa:	ab07      	add	r3, sp, #28
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	003a      	movs	r2, r7
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <_vfiprintf_r+0x228>)
 80063b2:	0021      	movs	r1, r4
 80063b4:	9803      	ldr	r0, [sp, #12]
 80063b6:	f000 f87f 	bl	80064b8 <_printf_i>
 80063ba:	e7ec      	b.n	8006396 <_vfiprintf_r+0x1e6>
 80063bc:	08006ae4 	.word	0x08006ae4
 80063c0:	08006b24 	.word	0x08006b24
 80063c4:	08006b04 	.word	0x08006b04
 80063c8:	08006ac4 	.word	0x08006ac4
 80063cc:	08006b2a 	.word	0x08006b2a
 80063d0:	08006b2e 	.word	0x08006b2e
 80063d4:	00000000 	.word	0x00000000
 80063d8:	0800618b 	.word	0x0800618b

080063dc <_printf_common>:
 80063dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063de:	0015      	movs	r5, r2
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	688a      	ldr	r2, [r1, #8]
 80063e4:	690b      	ldr	r3, [r1, #16]
 80063e6:	9000      	str	r0, [sp, #0]
 80063e8:	000c      	movs	r4, r1
 80063ea:	4293      	cmp	r3, r2
 80063ec:	da00      	bge.n	80063f0 <_printf_common+0x14>
 80063ee:	0013      	movs	r3, r2
 80063f0:	0022      	movs	r2, r4
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	3243      	adds	r2, #67	; 0x43
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d001      	beq.n	8006400 <_printf_common+0x24>
 80063fc:	3301      	adds	r3, #1
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	069b      	lsls	r3, r3, #26
 8006404:	d502      	bpl.n	800640c <_printf_common+0x30>
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	3302      	adds	r3, #2
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	2706      	movs	r7, #6
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	401f      	ands	r7, r3
 8006412:	d027      	beq.n	8006464 <_printf_common+0x88>
 8006414:	0023      	movs	r3, r4
 8006416:	3343      	adds	r3, #67	; 0x43
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	1e5a      	subs	r2, r3, #1
 800641c:	4193      	sbcs	r3, r2
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	0692      	lsls	r2, r2, #26
 8006422:	d430      	bmi.n	8006486 <_printf_common+0xaa>
 8006424:	0022      	movs	r2, r4
 8006426:	9901      	ldr	r1, [sp, #4]
 8006428:	3243      	adds	r2, #67	; 0x43
 800642a:	9800      	ldr	r0, [sp, #0]
 800642c:	9e08      	ldr	r6, [sp, #32]
 800642e:	47b0      	blx	r6
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d025      	beq.n	8006480 <_printf_common+0xa4>
 8006434:	2306      	movs	r3, #6
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	682a      	ldr	r2, [r5, #0]
 800643a:	68e1      	ldr	r1, [r4, #12]
 800643c:	4003      	ands	r3, r0
 800643e:	2500      	movs	r5, #0
 8006440:	2b04      	cmp	r3, #4
 8006442:	d103      	bne.n	800644c <_printf_common+0x70>
 8006444:	1a8d      	subs	r5, r1, r2
 8006446:	43eb      	mvns	r3, r5
 8006448:	17db      	asrs	r3, r3, #31
 800644a:	401d      	ands	r5, r3
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	4293      	cmp	r3, r2
 8006452:	dd01      	ble.n	8006458 <_printf_common+0x7c>
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	18ed      	adds	r5, r5, r3
 8006458:	2700      	movs	r7, #0
 800645a:	42bd      	cmp	r5, r7
 800645c:	d120      	bne.n	80064a0 <_printf_common+0xc4>
 800645e:	2000      	movs	r0, #0
 8006460:	e010      	b.n	8006484 <_printf_common+0xa8>
 8006462:	3701      	adds	r7, #1
 8006464:	68e3      	ldr	r3, [r4, #12]
 8006466:	682a      	ldr	r2, [r5, #0]
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	42bb      	cmp	r3, r7
 800646c:	ddd2      	ble.n	8006414 <_printf_common+0x38>
 800646e:	0022      	movs	r2, r4
 8006470:	2301      	movs	r3, #1
 8006472:	3219      	adds	r2, #25
 8006474:	9901      	ldr	r1, [sp, #4]
 8006476:	9800      	ldr	r0, [sp, #0]
 8006478:	9e08      	ldr	r6, [sp, #32]
 800647a:	47b0      	blx	r6
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d1f0      	bne.n	8006462 <_printf_common+0x86>
 8006480:	2001      	movs	r0, #1
 8006482:	4240      	negs	r0, r0
 8006484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006486:	2030      	movs	r0, #48	; 0x30
 8006488:	18e1      	adds	r1, r4, r3
 800648a:	3143      	adds	r1, #67	; 0x43
 800648c:	7008      	strb	r0, [r1, #0]
 800648e:	0021      	movs	r1, r4
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	3145      	adds	r1, #69	; 0x45
 8006494:	7809      	ldrb	r1, [r1, #0]
 8006496:	18a2      	adds	r2, r4, r2
 8006498:	3243      	adds	r2, #67	; 0x43
 800649a:	3302      	adds	r3, #2
 800649c:	7011      	strb	r1, [r2, #0]
 800649e:	e7c1      	b.n	8006424 <_printf_common+0x48>
 80064a0:	0022      	movs	r2, r4
 80064a2:	2301      	movs	r3, #1
 80064a4:	321a      	adds	r2, #26
 80064a6:	9901      	ldr	r1, [sp, #4]
 80064a8:	9800      	ldr	r0, [sp, #0]
 80064aa:	9e08      	ldr	r6, [sp, #32]
 80064ac:	47b0      	blx	r6
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa4>
 80064b2:	3701      	adds	r7, #1
 80064b4:	e7d1      	b.n	800645a <_printf_common+0x7e>
	...

080064b8 <_printf_i>:
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	9204      	str	r2, [sp, #16]
 80064be:	000a      	movs	r2, r1
 80064c0:	3243      	adds	r2, #67	; 0x43
 80064c2:	9305      	str	r3, [sp, #20]
 80064c4:	9003      	str	r0, [sp, #12]
 80064c6:	9202      	str	r2, [sp, #8]
 80064c8:	7e0a      	ldrb	r2, [r1, #24]
 80064ca:	000c      	movs	r4, r1
 80064cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ce:	2a6e      	cmp	r2, #110	; 0x6e
 80064d0:	d100      	bne.n	80064d4 <_printf_i+0x1c>
 80064d2:	e086      	b.n	80065e2 <_printf_i+0x12a>
 80064d4:	d81f      	bhi.n	8006516 <_printf_i+0x5e>
 80064d6:	2a63      	cmp	r2, #99	; 0x63
 80064d8:	d033      	beq.n	8006542 <_printf_i+0x8a>
 80064da:	d808      	bhi.n	80064ee <_printf_i+0x36>
 80064dc:	2a00      	cmp	r2, #0
 80064de:	d100      	bne.n	80064e2 <_printf_i+0x2a>
 80064e0:	e08c      	b.n	80065fc <_printf_i+0x144>
 80064e2:	2a58      	cmp	r2, #88	; 0x58
 80064e4:	d04d      	beq.n	8006582 <_printf_i+0xca>
 80064e6:	0025      	movs	r5, r4
 80064e8:	3542      	adds	r5, #66	; 0x42
 80064ea:	702a      	strb	r2, [r5, #0]
 80064ec:	e030      	b.n	8006550 <_printf_i+0x98>
 80064ee:	2a64      	cmp	r2, #100	; 0x64
 80064f0:	d001      	beq.n	80064f6 <_printf_i+0x3e>
 80064f2:	2a69      	cmp	r2, #105	; 0x69
 80064f4:	d1f7      	bne.n	80064e6 <_printf_i+0x2e>
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	6825      	ldr	r5, [r4, #0]
 80064fa:	1d0a      	adds	r2, r1, #4
 80064fc:	0628      	lsls	r0, r5, #24
 80064fe:	d529      	bpl.n	8006554 <_printf_i+0x9c>
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	2800      	cmp	r0, #0
 8006506:	da03      	bge.n	8006510 <_printf_i+0x58>
 8006508:	232d      	movs	r3, #45	; 0x2d
 800650a:	9a02      	ldr	r2, [sp, #8]
 800650c:	4240      	negs	r0, r0
 800650e:	7013      	strb	r3, [r2, #0]
 8006510:	4e6b      	ldr	r6, [pc, #428]	; (80066c0 <_printf_i+0x208>)
 8006512:	270a      	movs	r7, #10
 8006514:	e04f      	b.n	80065b6 <_printf_i+0xfe>
 8006516:	2a73      	cmp	r2, #115	; 0x73
 8006518:	d074      	beq.n	8006604 <_printf_i+0x14c>
 800651a:	d808      	bhi.n	800652e <_printf_i+0x76>
 800651c:	2a6f      	cmp	r2, #111	; 0x6f
 800651e:	d01f      	beq.n	8006560 <_printf_i+0xa8>
 8006520:	2a70      	cmp	r2, #112	; 0x70
 8006522:	d1e0      	bne.n	80064e6 <_printf_i+0x2e>
 8006524:	2220      	movs	r2, #32
 8006526:	6809      	ldr	r1, [r1, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	6022      	str	r2, [r4, #0]
 800652c:	e003      	b.n	8006536 <_printf_i+0x7e>
 800652e:	2a75      	cmp	r2, #117	; 0x75
 8006530:	d016      	beq.n	8006560 <_printf_i+0xa8>
 8006532:	2a78      	cmp	r2, #120	; 0x78
 8006534:	d1d7      	bne.n	80064e6 <_printf_i+0x2e>
 8006536:	0022      	movs	r2, r4
 8006538:	2178      	movs	r1, #120	; 0x78
 800653a:	3245      	adds	r2, #69	; 0x45
 800653c:	7011      	strb	r1, [r2, #0]
 800653e:	4e61      	ldr	r6, [pc, #388]	; (80066c4 <_printf_i+0x20c>)
 8006540:	e022      	b.n	8006588 <_printf_i+0xd0>
 8006542:	0025      	movs	r5, r4
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	3542      	adds	r5, #66	; 0x42
 8006548:	1d11      	adds	r1, r2, #4
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	6813      	ldr	r3, [r2, #0]
 800654e:	702b      	strb	r3, [r5, #0]
 8006550:	2301      	movs	r3, #1
 8006552:	e065      	b.n	8006620 <_printf_i+0x168>
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	0669      	lsls	r1, r5, #25
 800655a:	d5d3      	bpl.n	8006504 <_printf_i+0x4c>
 800655c:	b200      	sxth	r0, r0
 800655e:	e7d1      	b.n	8006504 <_printf_i+0x4c>
 8006560:	6819      	ldr	r1, [r3, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	1d08      	adds	r0, r1, #4
 8006566:	6018      	str	r0, [r3, #0]
 8006568:	6808      	ldr	r0, [r1, #0]
 800656a:	062e      	lsls	r6, r5, #24
 800656c:	d505      	bpl.n	800657a <_printf_i+0xc2>
 800656e:	4e54      	ldr	r6, [pc, #336]	; (80066c0 <_printf_i+0x208>)
 8006570:	2708      	movs	r7, #8
 8006572:	2a6f      	cmp	r2, #111	; 0x6f
 8006574:	d01b      	beq.n	80065ae <_printf_i+0xf6>
 8006576:	270a      	movs	r7, #10
 8006578:	e019      	b.n	80065ae <_printf_i+0xf6>
 800657a:	066d      	lsls	r5, r5, #25
 800657c:	d5f7      	bpl.n	800656e <_printf_i+0xb6>
 800657e:	b280      	uxth	r0, r0
 8006580:	e7f5      	b.n	800656e <_printf_i+0xb6>
 8006582:	3145      	adds	r1, #69	; 0x45
 8006584:	4e4e      	ldr	r6, [pc, #312]	; (80066c0 <_printf_i+0x208>)
 8006586:	700a      	strb	r2, [r1, #0]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	1d01      	adds	r1, r0, #4
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	0615      	lsls	r5, r2, #24
 8006594:	d521      	bpl.n	80065da <_printf_i+0x122>
 8006596:	07d3      	lsls	r3, r2, #31
 8006598:	d502      	bpl.n	80065a0 <_printf_i+0xe8>
 800659a:	2320      	movs	r3, #32
 800659c:	431a      	orrs	r2, r3
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	2710      	movs	r7, #16
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d103      	bne.n	80065ae <_printf_i+0xf6>
 80065a6:	2320      	movs	r3, #32
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	439a      	bics	r2, r3
 80065ac:	6022      	str	r2, [r4, #0]
 80065ae:	0023      	movs	r3, r4
 80065b0:	2200      	movs	r2, #0
 80065b2:	3343      	adds	r3, #67	; 0x43
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	db58      	blt.n	8006670 <_printf_i+0x1b8>
 80065be:	2204      	movs	r2, #4
 80065c0:	6821      	ldr	r1, [r4, #0]
 80065c2:	4391      	bics	r1, r2
 80065c4:	6021      	str	r1, [r4, #0]
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d154      	bne.n	8006674 <_printf_i+0x1bc>
 80065ca:	9d02      	ldr	r5, [sp, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d05a      	beq.n	8006686 <_printf_i+0x1ce>
 80065d0:	0025      	movs	r5, r4
 80065d2:	7833      	ldrb	r3, [r6, #0]
 80065d4:	3542      	adds	r5, #66	; 0x42
 80065d6:	702b      	strb	r3, [r5, #0]
 80065d8:	e055      	b.n	8006686 <_printf_i+0x1ce>
 80065da:	0655      	lsls	r5, r2, #25
 80065dc:	d5db      	bpl.n	8006596 <_printf_i+0xde>
 80065de:	b280      	uxth	r0, r0
 80065e0:	e7d9      	b.n	8006596 <_printf_i+0xde>
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	680d      	ldr	r5, [r1, #0]
 80065e6:	1d10      	adds	r0, r2, #4
 80065e8:	6949      	ldr	r1, [r1, #20]
 80065ea:	6018      	str	r0, [r3, #0]
 80065ec:	6813      	ldr	r3, [r2, #0]
 80065ee:	062e      	lsls	r6, r5, #24
 80065f0:	d501      	bpl.n	80065f6 <_printf_i+0x13e>
 80065f2:	6019      	str	r1, [r3, #0]
 80065f4:	e002      	b.n	80065fc <_printf_i+0x144>
 80065f6:	066d      	lsls	r5, r5, #25
 80065f8:	d5fb      	bpl.n	80065f2 <_printf_i+0x13a>
 80065fa:	8019      	strh	r1, [r3, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9d02      	ldr	r5, [sp, #8]
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	e04f      	b.n	80066a4 <_printf_i+0x1ec>
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	1d11      	adds	r1, r2, #4
 8006608:	6019      	str	r1, [r3, #0]
 800660a:	6815      	ldr	r5, [r2, #0]
 800660c:	2100      	movs	r1, #0
 800660e:	6862      	ldr	r2, [r4, #4]
 8006610:	0028      	movs	r0, r5
 8006612:	f000 f94b 	bl	80068ac <memchr>
 8006616:	2800      	cmp	r0, #0
 8006618:	d001      	beq.n	800661e <_printf_i+0x166>
 800661a:	1b40      	subs	r0, r0, r5
 800661c:	6060      	str	r0, [r4, #4]
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	2300      	movs	r3, #0
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	7013      	strb	r3, [r2, #0]
 8006628:	e03c      	b.n	80066a4 <_printf_i+0x1ec>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	002a      	movs	r2, r5
 800662e:	9904      	ldr	r1, [sp, #16]
 8006630:	9803      	ldr	r0, [sp, #12]
 8006632:	9d05      	ldr	r5, [sp, #20]
 8006634:	47a8      	blx	r5
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d03e      	beq.n	80066b8 <_printf_i+0x200>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	079b      	lsls	r3, r3, #30
 800663e:	d415      	bmi.n	800666c <_printf_i+0x1b4>
 8006640:	9b07      	ldr	r3, [sp, #28]
 8006642:	68e0      	ldr	r0, [r4, #12]
 8006644:	4298      	cmp	r0, r3
 8006646:	da39      	bge.n	80066bc <_printf_i+0x204>
 8006648:	0018      	movs	r0, r3
 800664a:	e037      	b.n	80066bc <_printf_i+0x204>
 800664c:	0022      	movs	r2, r4
 800664e:	2301      	movs	r3, #1
 8006650:	3219      	adds	r2, #25
 8006652:	9904      	ldr	r1, [sp, #16]
 8006654:	9803      	ldr	r0, [sp, #12]
 8006656:	9e05      	ldr	r6, [sp, #20]
 8006658:	47b0      	blx	r6
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d02c      	beq.n	80066b8 <_printf_i+0x200>
 800665e:	3501      	adds	r5, #1
 8006660:	68e3      	ldr	r3, [r4, #12]
 8006662:	9a07      	ldr	r2, [sp, #28]
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	42ab      	cmp	r3, r5
 8006668:	dcf0      	bgt.n	800664c <_printf_i+0x194>
 800666a:	e7e9      	b.n	8006640 <_printf_i+0x188>
 800666c:	2500      	movs	r5, #0
 800666e:	e7f7      	b.n	8006660 <_printf_i+0x1a8>
 8006670:	2800      	cmp	r0, #0
 8006672:	d0ad      	beq.n	80065d0 <_printf_i+0x118>
 8006674:	9d02      	ldr	r5, [sp, #8]
 8006676:	0039      	movs	r1, r7
 8006678:	f7f9 fdcc 	bl	8000214 <__aeabi_uidivmod>
 800667c:	5c73      	ldrb	r3, [r6, r1]
 800667e:	3d01      	subs	r5, #1
 8006680:	702b      	strb	r3, [r5, #0]
 8006682:	2800      	cmp	r0, #0
 8006684:	d1f7      	bne.n	8006676 <_printf_i+0x1be>
 8006686:	2f08      	cmp	r7, #8
 8006688:	d109      	bne.n	800669e <_printf_i+0x1e6>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	07db      	lsls	r3, r3, #31
 800668e:	d506      	bpl.n	800669e <_printf_i+0x1e6>
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	4293      	cmp	r3, r2
 8006696:	dc02      	bgt.n	800669e <_printf_i+0x1e6>
 8006698:	2330      	movs	r3, #48	; 0x30
 800669a:	3d01      	subs	r5, #1
 800669c:	702b      	strb	r3, [r5, #0]
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	1b5b      	subs	r3, r3, r5
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	aa07      	add	r2, sp, #28
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	0021      	movs	r1, r4
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	9803      	ldr	r0, [sp, #12]
 80066b0:	f7ff fe94 	bl	80063dc <_printf_common>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d1b8      	bne.n	800662a <_printf_i+0x172>
 80066b8:	2001      	movs	r0, #1
 80066ba:	4240      	negs	r0, r0
 80066bc:	b009      	add	sp, #36	; 0x24
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	08006b35 	.word	0x08006b35
 80066c4:	08006b46 	.word	0x08006b46

080066c8 <_putc_r>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	0006      	movs	r6, r0
 80066cc:	000d      	movs	r5, r1
 80066ce:	0014      	movs	r4, r2
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d004      	beq.n	80066de <_putc_r+0x16>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <_putc_r+0x16>
 80066da:	f7ff fb8f 	bl	8005dfc <__sinit>
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <_putc_r+0x60>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	d111      	bne.n	8006708 <_putc_r+0x40>
 80066e4:	6874      	ldr	r4, [r6, #4]
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	60a3      	str	r3, [r4, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da05      	bge.n	80066fc <_putc_r+0x34>
 80066f0:	69a2      	ldr	r2, [r4, #24]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	db12      	blt.n	800671c <_putc_r+0x54>
 80066f6:	b2eb      	uxtb	r3, r5
 80066f8:	2b0a      	cmp	r3, #10
 80066fa:	d00f      	beq.n	800671c <_putc_r+0x54>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	b2e8      	uxtb	r0, r5
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	6022      	str	r2, [r4, #0]
 8006704:	701d      	strb	r5, [r3, #0]
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	4b08      	ldr	r3, [pc, #32]	; (800672c <_putc_r+0x64>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d101      	bne.n	8006712 <_putc_r+0x4a>
 800670e:	68b4      	ldr	r4, [r6, #8]
 8006710:	e7e9      	b.n	80066e6 <_putc_r+0x1e>
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <_putc_r+0x68>)
 8006714:	429c      	cmp	r4, r3
 8006716:	d1e6      	bne.n	80066e6 <_putc_r+0x1e>
 8006718:	68f4      	ldr	r4, [r6, #12]
 800671a:	e7e4      	b.n	80066e6 <_putc_r+0x1e>
 800671c:	0022      	movs	r2, r4
 800671e:	0029      	movs	r1, r5
 8006720:	0030      	movs	r0, r6
 8006722:	f7ff f9a7 	bl	8005a74 <__swbuf_r>
 8006726:	e7ee      	b.n	8006706 <_putc_r+0x3e>
 8006728:	08006ae4 	.word	0x08006ae4
 800672c:	08006b04 	.word	0x08006b04
 8006730:	08006ac4 	.word	0x08006ac4

08006734 <_sbrk_r>:
 8006734:	2300      	movs	r3, #0
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	4c06      	ldr	r4, [pc, #24]	; (8006754 <_sbrk_r+0x20>)
 800673a:	0005      	movs	r5, r0
 800673c:	0008      	movs	r0, r1
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	f7fb fda4 	bl	800228c <_sbrk>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d103      	bne.n	8006750 <_sbrk_r+0x1c>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d000      	beq.n	8006750 <_sbrk_r+0x1c>
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	20000218 	.word	0x20000218

08006758 <__sread>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	000c      	movs	r4, r1
 800675c:	250e      	movs	r5, #14
 800675e:	5f49      	ldrsh	r1, [r1, r5]
 8006760:	f000 f8b2 	bl	80068c8 <_read_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	db03      	blt.n	8006770 <__sread+0x18>
 8006768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800676a:	181b      	adds	r3, r3, r0
 800676c:	6563      	str	r3, [r4, #84]	; 0x54
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	4a02      	ldr	r2, [pc, #8]	; (800677c <__sread+0x24>)
 8006774:	4013      	ands	r3, r2
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	e7f9      	b.n	800676e <__sread+0x16>
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	ffffefff 	.word	0xffffefff

08006780 <__swrite>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	001f      	movs	r7, r3
 8006784:	898b      	ldrh	r3, [r1, #12]
 8006786:	0005      	movs	r5, r0
 8006788:	000c      	movs	r4, r1
 800678a:	0016      	movs	r6, r2
 800678c:	05db      	lsls	r3, r3, #23
 800678e:	d505      	bpl.n	800679c <__swrite+0x1c>
 8006790:	230e      	movs	r3, #14
 8006792:	5ec9      	ldrsh	r1, [r1, r3]
 8006794:	2200      	movs	r2, #0
 8006796:	2302      	movs	r3, #2
 8006798:	f000 f874 	bl	8006884 <_lseek_r>
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <__swrite+0x34>)
 80067a0:	0028      	movs	r0, r5
 80067a2:	4013      	ands	r3, r2
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	0032      	movs	r2, r6
 80067a8:	230e      	movs	r3, #14
 80067aa:	5ee1      	ldrsh	r1, [r4, r3]
 80067ac:	003b      	movs	r3, r7
 80067ae:	f000 f81f 	bl	80067f0 <_write_r>
 80067b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b4:	ffffefff 	.word	0xffffefff

080067b8 <__sseek>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	000c      	movs	r4, r1
 80067bc:	250e      	movs	r5, #14
 80067be:	5f49      	ldrsh	r1, [r1, r5]
 80067c0:	f000 f860 	bl	8006884 <_lseek_r>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	1c42      	adds	r2, r0, #1
 80067c8:	d103      	bne.n	80067d2 <__sseek+0x1a>
 80067ca:	4a05      	ldr	r2, [pc, #20]	; (80067e0 <__sseek+0x28>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	0152      	lsls	r2, r2, #5
 80067d6:	4313      	orrs	r3, r2
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	6560      	str	r0, [r4, #84]	; 0x54
 80067dc:	e7f8      	b.n	80067d0 <__sseek+0x18>
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	ffffefff 	.word	0xffffefff

080067e4 <__sclose>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	230e      	movs	r3, #14
 80067e8:	5ec9      	ldrsh	r1, [r1, r3]
 80067ea:	f000 f815 	bl	8006818 <_close_r>
 80067ee:	bd10      	pop	{r4, pc}

080067f0 <_write_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	0005      	movs	r5, r0
 80067f4:	0008      	movs	r0, r1
 80067f6:	0011      	movs	r1, r2
 80067f8:	2200      	movs	r2, #0
 80067fa:	4c06      	ldr	r4, [pc, #24]	; (8006814 <_write_r+0x24>)
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	001a      	movs	r2, r3
 8006800:	f7fb fbd2 	bl	8001fa8 <_write>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d103      	bne.n	8006810 <_write_r+0x20>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d000      	beq.n	8006810 <_write_r+0x20>
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20000218 	.word	0x20000218

08006818 <_close_r>:
 8006818:	2300      	movs	r3, #0
 800681a:	b570      	push	{r4, r5, r6, lr}
 800681c:	4c06      	ldr	r4, [pc, #24]	; (8006838 <_close_r+0x20>)
 800681e:	0005      	movs	r5, r0
 8006820:	0008      	movs	r0, r1
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	f7fb fbee 	bl	8002004 <_close>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d103      	bne.n	8006834 <_close_r+0x1c>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d000      	beq.n	8006834 <_close_r+0x1c>
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	20000218 	.word	0x20000218

0800683c <_fstat_r>:
 800683c:	2300      	movs	r3, #0
 800683e:	b570      	push	{r4, r5, r6, lr}
 8006840:	4c06      	ldr	r4, [pc, #24]	; (800685c <_fstat_r+0x20>)
 8006842:	0005      	movs	r5, r0
 8006844:	0008      	movs	r0, r1
 8006846:	0011      	movs	r1, r2
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	f7fb fc2d 	bl	80020a8 <_fstat>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d103      	bne.n	800685a <_fstat_r+0x1e>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d000      	beq.n	800685a <_fstat_r+0x1e>
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	20000218 	.word	0x20000218

08006860 <_isatty_r>:
 8006860:	2300      	movs	r3, #0
 8006862:	b570      	push	{r4, r5, r6, lr}
 8006864:	4c06      	ldr	r4, [pc, #24]	; (8006880 <_isatty_r+0x20>)
 8006866:	0005      	movs	r5, r0
 8006868:	0008      	movs	r0, r1
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	f7fb fb86 	bl	8001f7c <_isatty>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d103      	bne.n	800687c <_isatty_r+0x1c>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d000      	beq.n	800687c <_isatty_r+0x1c>
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	bd70      	pop	{r4, r5, r6, pc}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	20000218 	.word	0x20000218

08006884 <_lseek_r>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	0005      	movs	r5, r0
 8006888:	0008      	movs	r0, r1
 800688a:	0011      	movs	r1, r2
 800688c:	2200      	movs	r2, #0
 800688e:	4c06      	ldr	r4, [pc, #24]	; (80068a8 <_lseek_r+0x24>)
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	001a      	movs	r2, r3
 8006894:	f7fb fbcd 	bl	8002032 <_lseek>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d103      	bne.n	80068a4 <_lseek_r+0x20>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d000      	beq.n	80068a4 <_lseek_r+0x20>
 80068a2:	602b      	str	r3, [r5, #0]
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	20000218 	.word	0x20000218

080068ac <memchr>:
 80068ac:	b2c9      	uxtb	r1, r1
 80068ae:	1882      	adds	r2, r0, r2
 80068b0:	4290      	cmp	r0, r2
 80068b2:	d101      	bne.n	80068b8 <memchr+0xc>
 80068b4:	2000      	movs	r0, #0
 80068b6:	4770      	bx	lr
 80068b8:	7803      	ldrb	r3, [r0, #0]
 80068ba:	428b      	cmp	r3, r1
 80068bc:	d0fb      	beq.n	80068b6 <memchr+0xa>
 80068be:	3001      	adds	r0, #1
 80068c0:	e7f6      	b.n	80068b0 <memchr+0x4>

080068c2 <__malloc_lock>:
 80068c2:	4770      	bx	lr

080068c4 <__malloc_unlock>:
 80068c4:	4770      	bx	lr
	...

080068c8 <_read_r>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	0005      	movs	r5, r0
 80068cc:	0008      	movs	r0, r1
 80068ce:	0011      	movs	r1, r2
 80068d0:	2200      	movs	r2, #0
 80068d2:	4c06      	ldr	r4, [pc, #24]	; (80068ec <_read_r+0x24>)
 80068d4:	6022      	str	r2, [r4, #0]
 80068d6:	001a      	movs	r2, r3
 80068d8:	f7fb fbbc 	bl	8002054 <_read>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d103      	bne.n	80068e8 <_read_r+0x20>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d000      	beq.n	80068e8 <_read_r+0x20>
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	20000218 	.word	0x20000218

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
