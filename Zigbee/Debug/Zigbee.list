
Zigbee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004500  08004500  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004500  08004500  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08004578  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004578  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000947e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001955  00000000  00000000  00029516  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e657  00000000  00000000  0002bf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d71  00000000  00000000  0003a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004a8dd  00000000  00000000  00042330  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008cc0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  0008cc88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043a0 	.word	0x080043a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080043a0 	.word	0x080043a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <mrf_read_short>:

static mrf_rx_info_t mrf_rx_info;
static mrf_tx_info_t mrf_tx_info;


uint8_t mrf_read_short(uint8_t address) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
    mrf_select();
 800022c:	f000 fd36 	bl	8000c9c <mrf_select>
    // 0 top for short addressing, 0 bottom for read
    spi_tx(address<<1 & 0b01111110);
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	b2db      	uxtb	r3, r3
 8000238:	227e      	movs	r2, #126	; 0x7e
 800023a:	4013      	ands	r3, r2
 800023c:	b2db      	uxtb	r3, r3
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fd44 	bl	8000ccc <spi_tx>
    uint8_t res = spi_tx(0x0);
 8000244:	250f      	movs	r5, #15
 8000246:	197c      	adds	r4, r7, r5
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fd3f 	bl	8000ccc <spi_tx>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]
    mrf_deselect();
 8000252:	f000 fd2f 	bl	8000cb4 <mrf_deselect>
    return res;
 8000256:	197b      	adds	r3, r7, r5
 8000258:	781b      	ldrb	r3, [r3, #0]
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	b004      	add	sp, #16
 8000260:	bdb0      	pop	{r4, r5, r7, pc}

08000262 <mrf_read_long>:

uint8_t mrf_read_long(uint16_t address) {
 8000262:	b5b0      	push	{r4, r5, r7, lr}
 8000264:	b084      	sub	sp, #16
 8000266:	af00      	add	r7, sp, #0
 8000268:	0002      	movs	r2, r0
 800026a:	1dbb      	adds	r3, r7, #6
 800026c:	801a      	strh	r2, [r3, #0]
    mrf_select();
 800026e:	f000 fd15 	bl	8000c9c <mrf_select>
    uint8_t ahigh = address >> 3;
 8000272:	1dbb      	adds	r3, r7, #6
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	08db      	lsrs	r3, r3, #3
 8000278:	b29a      	uxth	r2, r3
 800027a:	210f      	movs	r1, #15
 800027c:	187b      	adds	r3, r7, r1
 800027e:	701a      	strb	r2, [r3, #0]
    uint8_t alow = address << 5;
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	240e      	movs	r4, #14
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0152      	lsls	r2, r2, #5
 800028c:	701a      	strb	r2, [r3, #0]
    spi_tx(0x80 | ahigh);  // high bit for long
 800028e:	187b      	adds	r3, r7, r1
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	4252      	negs	r2, r2
 8000296:	4313      	orrs	r3, r2
 8000298:	b2db      	uxtb	r3, r3
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fd16 	bl	8000ccc <spi_tx>
    spi_tx(alow);
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fd11 	bl	8000ccc <spi_tx>
    uint8_t res = spi_tx(0);
 80002aa:	250d      	movs	r5, #13
 80002ac:	197c      	adds	r4, r7, r5
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 fd0c 	bl	8000ccc <spi_tx>
 80002b4:	0003      	movs	r3, r0
 80002b6:	7023      	strb	r3, [r4, #0]
    mrf_deselect();
 80002b8:	f000 fcfc 	bl	8000cb4 <mrf_deselect>
    return res;
 80002bc:	197b      	adds	r3, r7, r5
 80002be:	781b      	ldrb	r3, [r3, #0]
}
 80002c0:	0018      	movs	r0, r3
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b004      	add	sp, #16
 80002c6:	bdb0      	pop	{r4, r5, r7, pc}

080002c8 <mrf_write_short>:


void mrf_write_short(uint8_t address, uint8_t data) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	0002      	movs	r2, r0
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	701a      	strb	r2, [r3, #0]
 80002d4:	1dbb      	adds	r3, r7, #6
 80002d6:	1c0a      	adds	r2, r1, #0
 80002d8:	701a      	strb	r2, [r3, #0]
    mrf_select();
 80002da:	f000 fcdf 	bl	8000c9c <mrf_select>
    // 0 for top address, 1 bottom for write
    spi_tx((address<<1 & 0b01111110) | 0x01);
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	227e      	movs	r2, #126	; 0x7e
 80002e8:	4013      	ands	r3, r2
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	2201      	movs	r2, #1
 80002ee:	4313      	orrs	r3, r2
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fce9 	bl	8000ccc <spi_tx>
    spi_tx(data);
 80002fa:	1dbb      	adds	r3, r7, #6
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fce4 	bl	8000ccc <spi_tx>
    mrf_deselect();
 8000304:	f000 fcd6 	bl	8000cb4 <mrf_deselect>
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}

08000310 <mrf_write_long>:

void mrf_write_long(uint16_t address, uint8_t data) {
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	1dbb      	adds	r3, r7, #6
 800031a:	801a      	strh	r2, [r3, #0]
 800031c:	1d7b      	adds	r3, r7, #5
 800031e:	1c0a      	adds	r2, r1, #0
 8000320:	701a      	strb	r2, [r3, #0]
    mrf_select();
 8000322:	f000 fcbb 	bl	8000c9c <mrf_select>
    uint8_t ahigh = address >> 3;
 8000326:	1dbb      	adds	r3, r7, #6
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	08db      	lsrs	r3, r3, #3
 800032c:	b29a      	uxth	r2, r3
 800032e:	210f      	movs	r1, #15
 8000330:	187b      	adds	r3, r7, r1
 8000332:	701a      	strb	r2, [r3, #0]
    uint8_t alow = address << 5;
 8000334:	1dbb      	adds	r3, r7, #6
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	240e      	movs	r4, #14
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0152      	lsls	r2, r2, #5
 8000340:	701a      	strb	r2, [r3, #0]
    spi_tx(0x80 | ahigh);  // high bit for long
 8000342:	187b      	adds	r3, r7, r1
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	4252      	negs	r2, r2
 800034a:	4313      	orrs	r3, r2
 800034c:	b2db      	uxtb	r3, r3
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fcbc 	bl	8000ccc <spi_tx>
    spi_tx(alow | 0x10);  // last bit for write
 8000354:	193b      	adds	r3, r7, r4
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2210      	movs	r2, #16
 800035a:	4313      	orrs	r3, r2
 800035c:	b2db      	uxtb	r3, r3
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fcb4 	bl	8000ccc <spi_tx>
    spi_tx(data);
 8000364:	1d7b      	adds	r3, r7, #5
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fcaf 	bl	8000ccc <spi_tx>
    mrf_deselect();
 800036e:	f000 fca1 	bl	8000cb4 <mrf_deselect>
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b005      	add	sp, #20
 8000378:	bd90      	pop	{r4, r7, pc}

0800037a <mrf_pan_read>:

uint16_t mrf_pan_read(void) {
 800037a:	b590      	push	{r4, r7, lr}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
    uint8_t panh = mrf_read_short(MRF_PANIDH);
 8000380:	1dfc      	adds	r4, r7, #7
 8000382:	2002      	movs	r0, #2
 8000384:	f7ff ff4c 	bl	8000220 <mrf_read_short>
 8000388:	0003      	movs	r3, r0
 800038a:	7023      	strb	r3, [r4, #0]
    return panh << 8 | mrf_read_short(MRF_PANIDL);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	021b      	lsls	r3, r3, #8
 8000392:	b21c      	sxth	r4, r3
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff ff43 	bl	8000220 <mrf_read_short>
 800039a:	0003      	movs	r3, r0
 800039c:	b21b      	sxth	r3, r3
 800039e:	4323      	orrs	r3, r4
 80003a0:	b21b      	sxth	r3, r3
 80003a2:	b29b      	uxth	r3, r3
}
 80003a4:	0018      	movs	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b003      	add	sp, #12
 80003aa:	bd90      	pop	{r4, r7, pc}

080003ac <mrf_pan_write>:

void mrf_pan_write(uint16_t panid) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	0002      	movs	r2, r0
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	801a      	strh	r2, [r3, #0]
    mrf_write_short(MRF_PANIDH, panid >> 8);
 80003b8:	1dbb      	adds	r3, r7, #6
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	0a1b      	lsrs	r3, r3, #8
 80003be:	b29b      	uxth	r3, r3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	0019      	movs	r1, r3
 80003c4:	2002      	movs	r0, #2
 80003c6:	f7ff ff7f 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_PANIDL, panid & 0xff);
 80003ca:	1dbb      	adds	r3, r7, #6
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	0019      	movs	r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ff78 	bl	80002c8 <mrf_write_short>
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b002      	add	sp, #8
 80003de:	bd80      	pop	{r7, pc}

080003e0 <mrf_address16_write>:

void mrf_set_ignorebytes(uint8_t count) {
    ignore_bytes = count;
}

void mrf_address16_write(uint16_t address16) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	0002      	movs	r2, r0
 80003e8:	1dbb      	adds	r3, r7, #6
 80003ea:	801a      	strh	r2, [r3, #0]
    mrf_write_short(MRF_SADRH, address16 >> 8);
 80003ec:	1dbb      	adds	r3, r7, #6
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	0a1b      	lsrs	r3, r3, #8
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	0019      	movs	r1, r3
 80003f8:	2004      	movs	r0, #4
 80003fa:	f7ff ff65 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_SADRL, address16 & 0xff);
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	0019      	movs	r1, r3
 8000406:	2003      	movs	r0, #3
 8000408:	f7ff ff5e 	bl	80002c8 <mrf_write_short>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}

08000414 <mrf_address16_read>:

uint16_t mrf_address16_read(void) {
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
    uint8_t a16h = mrf_read_short(MRF_SADRH);
 800041a:	1dfc      	adds	r4, r7, #7
 800041c:	2004      	movs	r0, #4
 800041e:	f7ff feff 	bl	8000220 <mrf_read_short>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
    return a16h << 8 | mrf_read_short(MRF_SADRL);
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	021b      	lsls	r3, r3, #8
 800042c:	b21c      	sxth	r4, r3
 800042e:	2003      	movs	r0, #3
 8000430:	f7ff fef6 	bl	8000220 <mrf_read_short>
 8000434:	0003      	movs	r3, r0
 8000436:	b21b      	sxth	r3, r3
 8000438:	4323      	orrs	r3, r4
 800043a:	b21b      	sxth	r3, r3
 800043c:	b29b      	uxth	r3, r3
}
 800043e:	0018      	movs	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	b003      	add	sp, #12
 8000444:	bd90      	pop	{r4, r7, pc}
	...

08000448 <mrf_send16>:

/**
 * Simple send 16, with acks, not much of anything.. assumes src16 and local pan only.
 * @param data
 */
void mrf_send16(uint16_t dest16, uint8_t len, char * data) {
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	603a      	str	r2, [r7, #0]
 8000450:	1dbb      	adds	r3, r7, #6
 8000452:	1c02      	adds	r2, r0, #0
 8000454:	801a      	strh	r2, [r3, #0]
 8000456:	1d7b      	adds	r3, r7, #5
 8000458:	1c0a      	adds	r2, r1, #0
 800045a:	701a      	strb	r2, [r3, #0]

    int i = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
    mrf_write_long(i++, 9);  // header length
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	617a      	str	r2, [r7, #20]
 8000466:	b29b      	uxth	r3, r3
 8000468:	2109      	movs	r1, #9
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ff50 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, 9+ignore_bytes+len);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	617a      	str	r2, [r7, #20]
 8000476:	b298      	uxth	r0, r3
 8000478:	4b4f      	ldr	r3, [pc, #316]	; (80005b8 <mrf_send16+0x170>)
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	1d7b      	adds	r3, r7, #5
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	18d3      	adds	r3, r2, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	3309      	adds	r3, #9
 8000486:	b2db      	uxtb	r3, r3
 8000488:	0019      	movs	r1, r3
 800048a:	f7ff ff41 	bl	8000310 <mrf_write_long>

// 0 | pan compression | ack | no security | no data pending | data frame[3 bits]
//    mrf_write_long(i++, 0b01100001); // first byte of Frame Control
    mrf_write_long(i++, 0b01000001); // first byte of Frame Control
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	617a      	str	r2, [r7, #20]
 8000494:	b29b      	uxth	r3, r3
 8000496:	2141      	movs	r1, #65	; 0x41
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff ff39 	bl	8000310 <mrf_write_long>

// 16 bit source, 802.15.4 (2003), 16 bit dest,
    mrf_write_long(i++, 0b10001000); // second byte of frame control
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	617a      	str	r2, [r7, #20]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	2188      	movs	r1, #136	; 0x88
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff ff31 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, 1);  // sequence number 1
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	617a      	str	r2, [r7, #20]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2101      	movs	r1, #1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ff29 	bl	8000310 <mrf_write_long>

    uint16_t panid = mrf_pan_read();
 80004be:	240e      	movs	r4, #14
 80004c0:	0025      	movs	r5, r4
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f7ff ff59 	bl	800037a <mrf_pan_read>
 80004c8:	0003      	movs	r3, r0
 80004ca:	8023      	strh	r3, [r4, #0]

    mrf_write_long(i++, panid & 0xff);  // dest panid
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	617a      	str	r2, [r7, #20]
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	002c      	movs	r4, r5
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	0019      	movs	r1, r3
 80004de:	0010      	movs	r0, r2
 80004e0:	f7ff ff16 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, panid >> 8);
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	617a      	str	r2, [r7, #20]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	0019      	movs	r1, r3
 80004f8:	0010      	movs	r0, r2
 80004fa:	f7ff ff09 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, dest16 & 0xff);  // dest16 low
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	617a      	str	r2, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	0019      	movs	r1, r3
 800050e:	0010      	movs	r0, r2
 8000510:	f7ff fefe 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, dest16 >> 8); // dest16 high
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	617a      	str	r2, [r7, #20]
 800051a:	b29a      	uxth	r2, r3
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	0019      	movs	r1, r3
 8000528:	0010      	movs	r0, r2
 800052a:	f7ff fef1 	bl	8000310 <mrf_write_long>

    uint16_t src16 = mrf_address16_read();
 800052e:	240c      	movs	r4, #12
 8000530:	0025      	movs	r5, r4
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f7ff ff6e 	bl	8000414 <mrf_address16_read>
 8000538:	0003      	movs	r3, r0
 800053a:	8023      	strh	r3, [r4, #0]
    mrf_write_long(i++, src16 & 0xff); // src16 low
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	617a      	str	r2, [r7, #20]
 8000542:	b29a      	uxth	r2, r3
 8000544:	002c      	movs	r4, r5
 8000546:	193b      	adds	r3, r7, r4
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	0019      	movs	r1, r3
 800054e:	0010      	movs	r0, r2
 8000550:	f7ff fede 	bl	8000310 <mrf_write_long>
    mrf_write_long(i++, src16 >> 8); // src16 high
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	b29a      	uxth	r2, r3
 800055c:	193b      	adds	r3, r7, r4
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	0019      	movs	r1, r3
 8000568:	0010      	movs	r0, r2
 800056a:	f7ff fed1 	bl	8000310 <mrf_write_long>

    /*
     * This is used to adjust for Maxstream headers inserted between
     * 802.15.4. headers and data payload.
     */
    i += ignore_bytes;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <mrf_send16+0x170>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	001a      	movs	r2, r3
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	189b      	adds	r3, r3, r2
 8000578:	617b      	str	r3, [r7, #20]
    for (int q = 0; q < len; q++) {
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	e00d      	b.n	800059c <mrf_send16+0x154>
        mrf_write_long(i++, data[q]);
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	617a      	str	r2, [r7, #20]
 8000586:	b298      	uxth	r0, r3
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	0019      	movs	r1, r3
 8000592:	f7ff febd 	bl	8000310 <mrf_write_long>
    for (int q = 0; q < len; q++) {
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	3301      	adds	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	1d7b      	adds	r3, r7, #5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbec      	blt.n	8000580 <mrf_send16+0x138>
    }
    // ack on, and go!
//    mrf_write_short(MRF_TXNCON, (1<<MRF_TXNACKREQ | 1<<MRF_TXNTRIG));
    mrf_write_short(MRF_TXNCON, (1<<MRF_TXNTRIG));
 80005a6:	2101      	movs	r1, #1
 80005a8:	201b      	movs	r0, #27
 80005aa:	f7ff fe8d 	bl	80002c8 <mrf_write_short>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b006      	add	sp, #24
 80005b4:	bdb0      	pop	{r4, r5, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	2000010b 	.word	0x2000010b

080005bc <mrf_set_interrupts>:

void mrf_set_interrupts(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    // interrupts for rx and tx normal complete
    mrf_write_short(MRF_INTCON, 0b11110110);
 80005c0:	21f6      	movs	r1, #246	; 0xf6
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f7ff fe80 	bl	80002c8 <mrf_write_short>
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <mrf_set_channel>:

// Set the channel to 12, 2.41Ghz, xbee channel 0xC
void mrf_set_channel(void) {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
    mrf_write_long(MRF_RFCON0, 0x13);
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	2113      	movs	r1, #19
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff fe99 	bl	8000310 <mrf_write_long>
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <mrf_init>:

void mrf_init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
 // Seems a bit ridiculous when I use reset pin anyway
    mrf_write_short(MRF_SOFTRST, 0x7); // from manual
 80005e8:	2107      	movs	r1, #7
 80005ea:	202a      	movs	r0, #42	; 0x2a
 80005ec:	f7ff fe6c 	bl	80002c8 <mrf_write_short>
    while ((mrf_read_short(MRF_SOFTRST) & 0x7) != 0) {
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	202a      	movs	r0, #42	; 0x2a
 80005f4:	f7ff fe14 	bl	8000220 <mrf_read_short>
 80005f8:	0003      	movs	r3, r0
 80005fa:	001a      	movs	r2, r3
 80005fc:	2307      	movs	r3, #7
 80005fe:	4013      	ands	r3, r2
 8000600:	d1f7      	bne.n	80005f2 <mrf_init+0xe>
        ; // wait for soft reset to finish
    }

    mrf_write_short(MRF_PACON2, 0x98); // – Initialize FIFOEN = 1 and TXONTS = 0x6.
 8000602:	2198      	movs	r1, #152	; 0x98
 8000604:	2018      	movs	r0, #24
 8000606:	f7ff fe5f 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_TXSTBL, 0x95); // – Initialize RFSTBL = 0x9.
 800060a:	2195      	movs	r1, #149	; 0x95
 800060c:	202e      	movs	r0, #46	; 0x2e
 800060e:	f7ff fe5b 	bl	80002c8 <mrf_write_short>

    mrf_write_long(MRF_RFCON0, 0x03); // – Initialize RFOPT = 0x03.
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	2103      	movs	r1, #3
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff fe79 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_RFCON1, 0x01); // – Initialize VCOOPT = 0x02.
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <mrf_init+0xb8>)
 8000620:	2101      	movs	r1, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff fe74 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_RFCON2, 0x80); // – Enable PLL (PLLEN = 1).
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <mrf_init+0xbc>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff fe6f 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_RFCON6, 0x90); // – Initialize TXFIL = 1 and 20MRECVR = 1.
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <mrf_init+0xc0>)
 8000634:	2190      	movs	r1, #144	; 0x90
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff fe6a 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_RFCON7, 0x80); // – Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator).
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <mrf_init+0xc4>)
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fe65 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_RFCON8, 0x10); // – Initialize RFVCO = 1.
 8000646:	2382      	movs	r3, #130	; 0x82
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	2110      	movs	r1, #16
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fe5f 	bl	8000310 <mrf_write_long>
    mrf_write_long(MRF_SLPCON1, 0x21); // – Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01.
 8000652:	2388      	movs	r3, #136	; 0x88
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	2121      	movs	r1, #33	; 0x21
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fe59 	bl	8000310 <mrf_write_long>

    //  Configuration for nonbeacon-enabled devices (see Section 3.8 “Beacon-Enabled and Nonbeacon-Enabled Networks”):
    mrf_write_short(MRF_BBREG2, 0x80); // Set CCA mode to ED
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	203a      	movs	r0, #58	; 0x3a
 8000662:	f7ff fe31 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_CCAEDTH, 0x60); // – Set CCA ED threshold.
 8000666:	2160      	movs	r1, #96	; 0x60
 8000668:	203f      	movs	r0, #63	; 0x3f
 800066a:	f7ff fe2d 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_BBREG6, 0x40); // – Set appended RSSI value to RXFIFO.
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	203e      	movs	r0, #62	; 0x3e
 8000672:	f7ff fe29 	bl	80002c8 <mrf_write_short>
    mrf_set_interrupts();
 8000676:	f7ff ffa1 	bl	80005bc <mrf_set_interrupts>
    mrf_set_channel();
 800067a:	f7ff ffa8 	bl	80005ce <mrf_set_channel>
    // max power is by default.. just leave it...
    //Set transmitter power - See “REGISTER 2-62: RF CONTROL 3 REGISTER (ADDRESS: 0x203)”.
    mrf_write_short(MRF_RFCTL, 0x04); //  – Reset RF state machine.
 800067e:	2104      	movs	r1, #4
 8000680:	2036      	movs	r0, #54	; 0x36
 8000682:	f7ff fe21 	bl	80002c8 <mrf_write_short>
    mrf_write_short(MRF_RFCTL, 0x00); // part 2
 8000686:	2100      	movs	r1, #0
 8000688:	2036      	movs	r0, #54	; 0x36
 800068a:	f7ff fe1d 	bl	80002c8 <mrf_write_short>
    _delay_ms(1); // delay at least 192usec
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fb34 	bl	8000cfc <_delay_ms>
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	00000201 	.word	0x00000201
 80006a0:	00000202 	.word	0x00000202
 80006a4:	00000206 	.word	0x00000206
 80006a8:	00000207 	.word	0x00000207

080006ac <mrf_interrupt_handler>:
 * Otherwise, you run the risk of having a new packet trample all over the current packet.
 * (TODO: why is this so hard to get right?!)
 *
 * Note, this is really only a problem in promiscuous mode...
 */
void mrf_interrupt_handler(void) {
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 80006b2:	250b      	movs	r5, #11
 80006b4:	197c      	adds	r4, r7, r5
 80006b6:	2031      	movs	r0, #49	; 0x31
 80006b8:	f7ff fdb2 	bl	8000220 <mrf_read_short>
 80006bc:	0003      	movs	r3, r0
 80006be:	7023      	strb	r3, [r4, #0]
    if (last_interrupt & MRF_I_RXIF) {
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2208      	movs	r2, #8
 80006c6:	4013      	ands	r3, r2
 80006c8:	d100      	bne.n	80006cc <mrf_interrupt_handler+0x20>
 80006ca:	e0b2      	b.n	8000832 <mrf_interrupt_handler+0x186>
        flag_got_rx++;
 80006cc:	4b70      	ldr	r3, [pc, #448]	; (8000890 <mrf_interrupt_handler+0x1e4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b6e      	ldr	r3, [pc, #440]	; (8000890 <mrf_interrupt_handler+0x1e4>)
 80006d8:	701a      	strb	r2, [r3, #0]
        // read out the packet data...
        mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 80006da:	2104      	movs	r1, #4
 80006dc:	2039      	movs	r0, #57	; 0x39
 80006de:	f7ff fdf3 	bl	80002c8 <mrf_write_short>
        uint8_t frame_length = mrf_read_long(0x300);  // read start of rxfifo for
 80006e2:	230a      	movs	r3, #10
 80006e4:	18fc      	adds	r4, r7, r3
 80006e6:	23c0      	movs	r3, #192	; 0xc0
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fdb9 	bl	8000262 <mrf_read_long>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]

        uint16_t frame_control = mrf_read_long(0x301);
 80006f4:	4b67      	ldr	r3, [pc, #412]	; (8000894 <mrf_interrupt_handler+0x1e8>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fdb3 	bl	8000262 <mrf_read_long>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	2408      	movs	r4, #8
 8000702:	193b      	adds	r3, r7, r4
 8000704:	801a      	strh	r2, [r3, #0]
        frame_control |= mrf_read_long(0x302) << 8;
 8000706:	4b64      	ldr	r3, [pc, #400]	; (8000898 <mrf_interrupt_handler+0x1ec>)
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff fdaa 	bl	8000262 <mrf_read_long>
 800070e:	0003      	movs	r3, r0
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21a      	sxth	r2, r3
 8000714:	0021      	movs	r1, r4
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2000      	movs	r0, #0
 800071a:	5e1b      	ldrsh	r3, [r3, r0]
 800071c:	4313      	orrs	r3, r2
 800071e:	b21a      	sxth	r2, r3
 8000720:	187b      	adds	r3, r7, r1
 8000722:	801a      	strh	r2, [r3, #0]
        mrf_rx_info.frame_type = frame_control & 0x07;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2207      	movs	r2, #7
 800072c:	4013      	ands	r3, r2
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b5a      	ldr	r3, [pc, #360]	; (800089c <mrf_interrupt_handler+0x1f0>)
 8000732:	705a      	strb	r2, [r3, #1]
        mrf_rx_info.pan_compression = (frame_control >> 6) & 0x1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	099b      	lsrs	r3, r3, #6
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <mrf_interrupt_handler+0x1f0>)
 8000746:	711a      	strb	r2, [r3, #4]
        mrf_rx_info.ack_bit = (frame_control >> 5) & 0x1;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	095b      	lsrs	r3, r3, #5
 800074e:	b29b      	uxth	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b50      	ldr	r3, [pc, #320]	; (800089c <mrf_interrupt_handler+0x1f0>)
 800075a:	70da      	strb	r2, [r3, #3]
        mrf_rx_info.dest_addr_mode = (frame_control >> 10) & 0x3;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	0a9b      	lsrs	r3, r3, #10
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2203      	movs	r2, #3
 8000768:	4013      	ands	r3, r2
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b4b      	ldr	r3, [pc, #300]	; (800089c <mrf_interrupt_handler+0x1f0>)
 800076e:	719a      	strb	r2, [r3, #6]
        mrf_rx_info.frame_version = (frame_control >> 12) & 0x3;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	0b1b      	lsrs	r3, r3, #12
 8000776:	b29b      	uxth	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2203      	movs	r2, #3
 800077c:	4013      	ands	r3, r2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b46      	ldr	r3, [pc, #280]	; (800089c <mrf_interrupt_handler+0x1f0>)
 8000782:	715a      	strb	r2, [r3, #5]
        mrf_rx_info.src_addr_mode = (frame_control >> 14) & 0x3;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	0b9b      	lsrs	r3, r3, #14
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2203      	movs	r2, #3
 8000790:	4013      	ands	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b41      	ldr	r3, [pc, #260]	; (800089c <mrf_interrupt_handler+0x1f0>)
 8000796:	71da      	strb	r2, [r3, #7]
        mrf_rx_info.sequence_number = mrf_read_long(0x303);
 8000798:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <mrf_interrupt_handler+0x1f4>)
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fd61 	bl	8000262 <mrf_read_long>
 80007a0:	0003      	movs	r3, r0
 80007a2:	001a      	movs	r2, r3
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <mrf_interrupt_handler+0x1f0>)
 80007a6:	721a      	strb	r2, [r3, #8]

        // only three bytes have been removed, frame control and sequence id
        // the data starts at 4 though, because byte 0 was the mrf length
        // also hide the FCS bytes, even though we've copied them into the rx buffer
        for (int i = 0; i <= frame_length - 4; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e013      	b.n	80007d6 <mrf_interrupt_handler+0x12a>
            mrf_rx_buf[i] = mrf_read_long(0x304 + i);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	22c1      	movs	r2, #193	; 0xc1
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	4694      	mov	ip, r2
 80007b8:	4463      	add	r3, ip
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fd50 	bl	8000262 <mrf_read_long>
 80007c2:	0003      	movs	r3, r0
 80007c4:	0019      	movs	r1, r3
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <mrf_interrupt_handler+0x1f8>)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	18d3      	adds	r3, r2, r3
 80007cc:	1c0a      	adds	r2, r1, #0
 80007ce:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i <= frame_length - 4; i++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	230a      	movs	r3, #10
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3b04      	subs	r3, #4
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dde4      	ble.n	80007ae <mrf_interrupt_handler+0x102>
        }
        mrf_rx_info.frame_length = frame_length - 3 - 2;
 80007e4:	240a      	movs	r4, #10
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3b05      	subs	r3, #5
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <mrf_interrupt_handler+0x1f0>)
 80007f0:	701a      	strb	r2, [r3, #0]
        mrf_rx_info.lqi = mrf_read_long(0x300 + frame_length + 1);
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	4a26      	ldr	r2, [pc, #152]	; (8000894 <mrf_interrupt_handler+0x1e8>)
 80007fa:	4694      	mov	ip, r2
 80007fc:	4463      	add	r3, ip
 80007fe:	b29b      	uxth	r3, r3
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fd2e 	bl	8000262 <mrf_read_long>
 8000806:	0003      	movs	r3, r0
 8000808:	001a      	movs	r2, r3
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <mrf_interrupt_handler+0x1f0>)
 800080c:	725a      	strb	r2, [r3, #9]
        mrf_rx_info.rssi = mrf_read_long(0x300 + frame_length + 2);
 800080e:	193b      	adds	r3, r7, r4
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <mrf_interrupt_handler+0x1ec>)
 8000816:	4694      	mov	ip, r2
 8000818:	4463      	add	r3, ip
 800081a:	b29b      	uxth	r3, r3
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fd20 	bl	8000262 <mrf_read_long>
 8000822:	0003      	movs	r3, r0
 8000824:	001a      	movs	r2, r3
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <mrf_interrupt_handler+0x1f0>)
 8000828:	729a      	strb	r2, [r3, #10]

        mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 800082a:	2100      	movs	r1, #0
 800082c:	2039      	movs	r0, #57	; 0x39
 800082e:	f7ff fd4b 	bl	80002c8 <mrf_write_short>
    }
    if (last_interrupt & MRF_I_TXNIF) {
 8000832:	230b      	movs	r3, #11
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4013      	ands	r3, r2
 800083c:	d023      	beq.n	8000886 <mrf_interrupt_handler+0x1da>
        flag_got_tx++;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <mrf_interrupt_handler+0x1fc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	3301      	adds	r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <mrf_interrupt_handler+0x1fc>)
 800084a:	701a      	strb	r2, [r3, #0]
        uint8_t tmp = mrf_read_short(MRF_TXSTAT);
 800084c:	1dfc      	adds	r4, r7, #7
 800084e:	2024      	movs	r0, #36	; 0x24
 8000850:	f7ff fce6 	bl	8000220 <mrf_read_short>
 8000854:	0003      	movs	r3, r0
 8000856:	7023      	strb	r3, [r4, #0]
        // 1 means it failed, we want 1 to mean it worked.
        mrf_tx_info.tx_ok = !(tmp & ~(1 << TXNSTAT));
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2201      	movs	r2, #1
 800085e:	4393      	bics	r3, r2
 8000860:	425a      	negs	r2, r3
 8000862:	4153      	adcs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	001a      	movs	r2, r3
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <mrf_interrupt_handler+0x200>)
 800086a:	701a      	strb	r2, [r3, #0]
        mrf_tx_info.retries = tmp >> 6;
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	099b      	lsrs	r3, r3, #6
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <mrf_interrupt_handler+0x200>)
 8000876:	705a      	strb	r2, [r3, #1]
        mrf_tx_info.channel_busy = (tmp & (1 << CCAFAIL));
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2220      	movs	r2, #32
 800087e:	4013      	ands	r3, r2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <mrf_interrupt_handler+0x200>)
 8000884:	709a      	strb	r2, [r3, #2]
    }
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b004      	add	sp, #16
 800088c:	bdb0      	pop	{r4, r5, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000129 	.word	0x20000129
 8000894:	00000301 	.word	0x00000301
 8000898:	00000302 	.word	0x00000302
 800089c:	2000010c 	.word	0x2000010c
 80008a0:	00000303 	.word	0x00000303
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	20000128 	.word	0x20000128
 80008ac:	20000118 	.word	0x20000118

080008b0 <mrf_check_flags>:

/**
 * Call this function periodically, it will invoke your nominated handlers
 */
void mrf_check_flags(void (*rx_handler) (mrf_rx_info_t *rxinfo, uint8_t *rxbuffer),
                     void (*tx_handler) (mrf_tx_info_t *txinfo)){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
    // TODO - we could check whether the flags are > 1 here, indicating data was lost?
    if (flag_got_rx) {
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <mrf_check_flags+0x4c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d007      	beq.n	80008d4 <mrf_check_flags+0x24>
        flag_got_rx = 0;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <mrf_check_flags+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
        rx_handler(&mrf_rx_info, mrf_rx_buf);
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <mrf_check_flags+0x50>)
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <mrf_check_flags+0x54>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	0010      	movs	r0, r2
 80008d2:	4798      	blx	r3
    }
    if (flag_got_tx) {
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <mrf_check_flags+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d009      	beq.n	80008f2 <mrf_check_flags+0x42>
        flag_got_tx = 0;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <mrf_check_flags+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
        if (tx_handler) {
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <mrf_check_flags+0x42>
            tx_handler(&mrf_tx_info);
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <mrf_check_flags+0x5c>)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0010      	movs	r0, r2
 80008f0:	4798      	blx	r3
        }
    }
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000129 	.word	0x20000129
 8000900:	2000008c 	.word	0x2000008c
 8000904:	2000010c 	.word	0x2000010c
 8000908:	20000128 	.word	0x20000128
 800090c:	20000118 	.word	0x20000118

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fc0a 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f84e 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f912 	bl	8000b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000920:	f000 f8a2 	bl	8000a68 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000924:	f000 f8de 	bl	8000ae4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Init MRF
  RetargetInit(&huart1);
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <main+0x84>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f9f8 	bl	8000d20 <RetargetInit>
  printf("Starting up...");
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <main+0x88>)
 8000932:	0018      	movs	r0, r3
 8000934:	f002 fcfc 	bl	8003330 <iprintf>
  mrf_deselect();
 8000938:	f000 f9bc 	bl	8000cb4 <mrf_deselect>
  mrf_init();
 800093c:	f7ff fe52 	bl	80005e4 <mrf_init>

  mrf_pan_write(PAN_ID);
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <main+0x8c>)
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff fd32 	bl	80003ac <mrf_pan_write>
  if (MODE == 0){
	  printf("set as transmitter...");
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0x90>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fcf0 	bl	8003330 <iprintf>
	  mrf_address16_write((uint16_t) DEVICE_ID);
 8000950:	2041      	movs	r0, #65	; 0x41
 8000952:	f7ff fd45 	bl	80003e0 <mrf_address16_write>
  else{
	  printf("set as receiver...");
	  mrf_address16_write(0x0001);
	  mrf_set_ignorebytes(2);
  }
  printf("done!\n");
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <main+0x94>)
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fd63 	bl	8003424 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	if (MODE == 0){
		mrf_send16(0xFFFF, 1, (char) DEVICE_ID);
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <main+0x98>)
 8000960:	2241      	movs	r2, #65	; 0x41
 8000962:	2101      	movs	r1, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fd6f 	bl	8000448 <mrf_send16>
		HAL_Delay(1000);
 800096a:	23fa      	movs	r3, #250	; 0xfa
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fc40 	bl	80011f4 <HAL_Delay>
		mrf_check_flags(&handle_rx, &handle_tx);
		_delay_ms(10);

		HAL_Delay(200);
	}
	mrf_check_flags(&handle_rx, &handle_tx);
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <main+0x9c>)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <main+0xa0>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff98 	bl	80008b0 <mrf_check_flags>
	if (HAL_GPIO_ReadPin(MRF_INT_GPIO_Port, MRF_INT_Pin) == 0){
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <main+0xa4>)
 8000982:	2110      	movs	r1, #16
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fe73 	bl	8001670 <HAL_GPIO_ReadPin>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d1e7      	bne.n	800095e <main+0x4e>
		mrf_interrupt_handler();
 800098e:	f7ff fe8d 	bl	80006ac <mrf_interrupt_handler>
	if (MODE == 0){
 8000992:	e7e4      	b.n	800095e <main+0x4e>
 8000994:	2000012c 	.word	0x2000012c
 8000998:	080043b8 	.word	0x080043b8
 800099c:	0000cafe 	.word	0x0000cafe
 80009a0:	080043c8 	.word	0x080043c8
 80009a4:	080043e0 	.word	0x080043e0
 80009a8:	0000ffff 	.word	0x0000ffff
 80009ac:	08000c55 	.word	0x08000c55
 80009b0:	08000c2d 	.word	0x08000c2d
 80009b4:	48000400 	.word	0x48000400

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b095      	sub	sp, #84	; 0x54
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	2420      	movs	r4, #32
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	0018      	movs	r0, r3
 80009c4:	2330      	movs	r3, #48	; 0x30
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f002 fca9 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ce:	2310      	movs	r3, #16
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f002 fca1 	bl	8003320 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009de:	003b      	movs	r3, r7
 80009e0:	0018      	movs	r0, r3
 80009e2:	2310      	movs	r3, #16
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f002 fc9a 	bl	8003320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2210      	movs	r2, #16
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fe6b 	bl	80016e4 <HAL_RCC_OscConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a12:	f000 f97f 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	2110      	movs	r1, #16
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 f971 	bl	8001d1c <HAL_RCC_ClockConfig>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a3e:	f000 f969 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a48:	003b      	movs	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	003b      	movs	r3, r7
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fab5 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 f95b 	bl	8000d14 <Error_Handler>
  }
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b015      	add	sp, #84	; 0x54
 8000a64:	bd90      	pop	{r4, r7, pc}
	...

08000a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	2282      	movs	r2, #130	; 0x82
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	22e0      	movs	r2, #224	; 0xe0
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fb47 	bl	800215c <HAL_SPI_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f91f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001ac 	.word	0x200001ac
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_USART1_UART_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af0:	2296      	movs	r2, #150	; 0x96
 8000af2:	0212      	lsls	r2, r2, #8
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 ff15 	bl	8002958 <HAL_UART_Init>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 f8ef 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000012c 	.word	0x2000012c
 8000b40:	40013800 	.word	0x40013800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	240c      	movs	r4, #12
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f002 fbe3 	bl	8003320 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0289      	lsls	r1, r1, #10
 8000b64:	430a      	orrs	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	02c9      	lsls	r1, r1, #11
 8000b80:	430a      	orrs	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	02db      	lsls	r3, r3, #11
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MRF_NSS_GPIO_Port, MRF_NSS_Pin, GPIO_PIN_SET);
 8000b92:	2390      	movs	r3, #144	; 0x90
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2201      	movs	r2, #1
 8000b98:	2110      	movs	r1, #16
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fd85 	bl	80016aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MRF_RESET_GPIO_Port, MRF_RESET_Pin, GPIO_PIN_SET);
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_GPIO_Init+0xe4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fd7f 	bl	80016aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MRF_NSS_Pin */
  GPIO_InitStruct.Pin = MRF_NSS_Pin;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2210      	movs	r2, #16
 8000bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2201      	movs	r2, #1
 8000bbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MRF_NSS_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	193a      	adds	r2, r7, r4
 8000bc6:	2390      	movs	r3, #144	; 0x90
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fbe7 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF_INT_Pin */
  GPIO_InitStruct.Pin = MRF_INT_Pin;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2201      	movs	r2, #1
 8000be4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MRF_INT_GPIO_Port, &GPIO_InitStruct);
 8000be6:	000c      	movs	r4, r1
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_GPIO_Init+0xe4>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f000 fbd6 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF_RESET_Pin */
  GPIO_InitStruct.Pin = MRF_RESET_Pin;
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MRF_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <MX_GPIO_Init+0xe4>)
 8000c12:	0019      	movs	r1, r3
 8000c14:	0010      	movs	r0, r2
 8000c16:	f000 fbc3 	bl	80013a0 <HAL_GPIO_Init>

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b009      	add	sp, #36	; 0x24
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000400 	.word	0x48000400

08000c2c <handle_rx>:
//	serial_print("Interrupted");
//	mrf_interrupt_handler();
//	__enable_irq();
//}

void handle_rx(mrf_rx_info_t *rxinfo, uint8_t *rx_buffer) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    printf("Sender %s. RSSI = %d\n", rx_buffer,rxinfo->rssi);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7a9b      	ldrb	r3, [r3, #10]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <handle_rx+0x24>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f002 fb75 	bl	8003330 <iprintf>

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	080043e8 	.word	0x080043e8

08000c54 <handle_tx>:

void handle_tx(mrf_tx_info_t *txinfo) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    printf("TX");
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <handle_tx+0x3c>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f002 fb66 	bl	8003330 <iprintf>
	if (txinfo->tx_ok) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <handle_tx+0x22>
        printf("Sent message!\n");
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <handle_tx+0x40>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 fbd8 	bl	8003424 <puts>
    } else {
        printf("TX failed after %d retries\n", txinfo->retries);
    }
}
 8000c74:	e007      	b.n	8000c86 <handle_tx+0x32>
        printf("TX failed after %d retries\n", txinfo->retries);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <handle_tx+0x44>)
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 fb55 	bl	8003330 <iprintf>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	08004400 	.word	0x08004400
 8000c94:	08004404 	.word	0x08004404
 8000c98:	08004414 	.word	0x08004414

08000c9c <mrf_select>:
	_delay_ms(10);
	HAL_GPIO_WritePin(MRF_RESET_GPIO_Port, MRF_RESET_Pin, 1);
	_delay_ms(20);
}

void mrf_select(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MRF_NSS_GPIO_Port, MRF_NSS_Pin, 0);
 8000ca0:	2390      	movs	r3, #144	; 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 fcfe 	bl	80016aa <HAL_GPIO_WritePin>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <mrf_deselect>:

void mrf_deselect(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MRF_NSS_GPIO_Port, MRF_NSS_Pin, 1);
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fcf2 	bl	80016aa <HAL_GPIO_WritePin>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <spi_tx>:

uint8_t spi_tx(uint8_t cData){
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	701a      	strb	r2, [r3, #0]
	uint8_t buff;
	HAL_SPI_TransmitReceive(&hspi1, &cData, &buff, sizeof(buff), 100);
 8000cd8:	240f      	movs	r4, #15
 8000cda:	193a      	adds	r2, r7, r4
 8000cdc:	1df9      	adds	r1, r7, #7
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <spi_tx+0x2c>)
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f001 fad3 	bl	8002290 <HAL_SPI_TransmitReceive>
	return buff;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	781b      	ldrb	r3, [r3, #0]
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b005      	add	sp, #20
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200001ac 	.word	0x200001ac

08000cfc <_delay_ms>:

void _delay_ms(int t){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_Delay(t);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fa74 	bl	80011f4 <HAL_Delay>
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <RetargetInit+0x28>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <RetargetInit+0x2c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6898      	ldr	r0, [r3, #8]
 8000d34:	2300      	movs	r3, #0
 8000d36:	2202      	movs	r2, #2
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f002 fb7d 	bl	8003438 <setvbuf>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000210 	.word	0x20000210
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <_isatty>:

int _isatty(int fd) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db04      	blt.n	8000d68 <_isatty+0x18>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	dc01      	bgt.n	8000d68 <_isatty+0x18>
    return 1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e005      	b.n	8000d74 <_isatty+0x24>

  errno = EBADF;
 8000d68:	f002 fab0 	bl	80032cc <__errno>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	2209      	movs	r2, #9
 8000d70:	601a      	str	r2, [r3, #0]
  return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_write>:

int _write(int fd, char* ptr, int len) {
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d002      	beq.n	8000d94 <_write+0x18>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d114      	bne.n	8000dbe <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <_write+0x58>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	2517      	movs	r5, #23
 8000d9e:	197c      	adds	r4, r7, r5
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	f001 fe2b 	bl	8002a00 <HAL_UART_Transmit>
 8000daa:	0003      	movs	r3, r0
 8000dac:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <_write+0x3e>
      return len;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e008      	b.n	8000dcc <_write+0x50>
    else
      return EIO;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e006      	b.n	8000dcc <_write+0x50>
  }
  errno = EBADF;
 8000dbe:	f002 fa85 	bl	80032cc <__errno>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	425b      	negs	r3, r3
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b006      	add	sp, #24
 8000dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <_close>:

int _close(int fd) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db04      	blt.n	8000df0 <_close+0x18>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	dc01      	bgt.n	8000df0 <_close+0x18>
    return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e006      	b.n	8000dfe <_close+0x26>

  errno = EBADF;
 8000df0:	f002 fa6c 	bl	80032cc <__errno>
 8000df4:	0003      	movs	r3, r0
 8000df6:	2209      	movs	r2, #9
 8000df8:	601a      	str	r2, [r3, #0]
  return -1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	425b      	negs	r3, r3
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e12:	f002 fa5b 	bl	80032cc <__errno>
 8000e16:	0003      	movs	r3, r0
 8000e18:	2209      	movs	r2, #9
 8000e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	425b      	negs	r3, r3
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_read>:

int _read(int fd, char* ptr, int len) {
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d113      	bne.n	8000e62 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <_read+0x50>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	2517      	movs	r5, #23
 8000e40:	197c      	adds	r4, r7, r5
 8000e42:	2301      	movs	r3, #1
 8000e44:	425b      	negs	r3, r3
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f001 fe81 	bl	8002b50 <HAL_UART_Receive>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000e52:	197b      	adds	r3, r7, r5
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <_read+0x36>
      return 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e008      	b.n	8000e70 <_read+0x48>
    else
      return EIO;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e006      	b.n	8000e70 <_read+0x48>
  }
  errno = EBADF;
 8000e62:	f002 fa33 	bl	80032cc <__errno>
 8000e66:	0003      	movs	r3, r0
 8000e68:	2209      	movs	r2, #9
 8000e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	425b      	negs	r3, r3
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b006      	add	sp, #24
 8000e76:	bdb0      	pop	{r4, r5, r7, pc}
 8000e78:	20000210 	.word	0x20000210

08000e7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db08      	blt.n	8000e9e <_fstat+0x22>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	dc05      	bgt.n	8000e9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0192      	lsls	r2, r2, #6
 8000e98:	605a      	str	r2, [r3, #4]
    return 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e005      	b.n	8000eaa <_fstat+0x2e>
  }

  errno = EBADF;
 8000e9e:	f002 fa15 	bl	80032cc <__errno>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	601a      	str	r2, [r3, #0]
  return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	619a      	str	r2, [r3, #24]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0549      	lsls	r1, r1, #21
 8000edc:	430a      	orrs	r2, r1
 8000ede:	61da      	str	r2, [r3, #28]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	055b      	lsls	r3, r3, #21
 8000ee8:	4013      	ands	r3, r2
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	2314      	movs	r3, #20
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f002 fa06 	bl	8003320 <memset>
  if(hspi->Instance==SPI1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_SPI_MspInit+0x90>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d132      	bne.n	8000f84 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0149      	lsls	r1, r1, #5
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0289      	lsls	r1, r1, #10
 8000f44:	430a      	orrs	r2, r1
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_SPI_MspInit+0x94>)
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	029b      	lsls	r3, r3, #10
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f56:	2114      	movs	r1, #20
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	22e0      	movs	r2, #224	; 0xe0
 8000f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2202      	movs	r2, #2
 8000f62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	187a      	adds	r2, r7, r1
 8000f78:	2390      	movs	r3, #144	; 0x90
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 fa0e 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b00a      	add	sp, #40	; 0x28
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	2314      	movs	r3, #20
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f002 f9ba 	bl	8003320 <memset>
  if(huart->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <HAL_UART_MspInit+0x90>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d132      	bne.n	800101c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	01c9      	lsls	r1, r1, #7
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	01db      	lsls	r3, r3, #7
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0289      	lsls	r1, r1, #10
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fee:	2114      	movs	r1, #20
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2203      	movs	r2, #3
 8001006:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2201      	movs	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	187a      	adds	r2, r7, r1
 8001010:	2390      	movs	r3, #144	; 0x90
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f9c2 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b00a      	add	sp, #40	; 0x28
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40013800 	.word	0x40013800
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f8b2 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f002 f91c 	bl	80032cc <__errno>
 8001094:	0003      	movs	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	18d2      	adds	r2, r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001000 	.word	0x20001000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	20000220 	.word	0x20000220

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001102:	f7ff ffe3 	bl	80010cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001106:	f002 f8e7 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fc01 	bl	8000910 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   r0, =_estack
 8001110:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	2000021c 	.word	0x2000021c

08001128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>
	...

0800112c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_Init+0x24>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_Init+0x24>)
 8001136:	2110      	movs	r1, #16
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 f809 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001142:	f7ff feb7 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_InitTick+0x5c>)
 800115e:	681c      	ldr	r4, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_InitTick+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
 8001166:	23fa      	movs	r3, #250	; 0xfa
 8001168:	0098      	lsls	r0, r3, #2
 800116a:	f7fe ffcd 	bl	8000108 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	0019      	movs	r1, r3
 8001172:	0020      	movs	r0, r4
 8001174:	f7fe ffc8 	bl	8000108 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f903 	bl	8001386 <HAL_SYSTICK_Config>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e00f      	b.n	80011a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d80b      	bhi.n	80011a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	425b      	negs	r3, r3
 8001194:	2200      	movs	r2, #0
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f8e0 	bl	800135c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_InitTick+0x64>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b003      	add	sp, #12
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	18d2      	adds	r2, r2, r3
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_IncTick+0x20>)
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000214 	.word	0x20000214

080011e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000214 	.word	0x20000214

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff fff0 	bl	80011e0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_Delay+0x40>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	001a      	movs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	189b      	adds	r3, r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	f7ff ffe0 	bl	80011e0 <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b004      	add	sp, #16
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000008 	.word	0x20000008

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d828      	bhi.n	80012a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <__NVIC_SetPriority+0xd4>)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	33c0      	adds	r3, #192	; 0xc0
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	589b      	ldr	r3, [r3, r2]
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	0011      	movs	r1, r2
 8001264:	2203      	movs	r2, #3
 8001266:	400a      	ands	r2, r1
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	21ff      	movs	r1, #255	; 0xff
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	43d2      	mvns	r2, r2
 8001272:	401a      	ands	r2, r3
 8001274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	401a      	ands	r2, r3
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	2303      	movs	r3, #3
 8001286:	4003      	ands	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <__NVIC_SetPriority+0xd4>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	430a      	orrs	r2, r1
 8001298:	33c0      	adds	r3, #192	; 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800129e:	e031      	b.n	8001304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <__NVIC_SetPriority+0xd8>)
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0019      	movs	r1, r3
 80012a8:	230f      	movs	r3, #15
 80012aa:	400b      	ands	r3, r1
 80012ac:	3b08      	subs	r3, #8
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3306      	adds	r3, #6
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1dfa      	adds	r2, r7, #7
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	0011      	movs	r1, r2
 80012c0:	2203      	movs	r2, #3
 80012c2:	400a      	ands	r2, r1
 80012c4:	00d2      	lsls	r2, r2, #3
 80012c6:	21ff      	movs	r1, #255	; 0xff
 80012c8:	4091      	lsls	r1, r2
 80012ca:	000a      	movs	r2, r1
 80012cc:	43d2      	mvns	r2, r2
 80012ce:	401a      	ands	r2, r3
 80012d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	401a      	ands	r2, r3
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	2303      	movs	r3, #3
 80012e2:	4003      	ands	r3, r0
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	001c      	movs	r4, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	4023      	ands	r3, r4
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	430a      	orrs	r2, r1
 80012fa:	3306      	adds	r3, #6
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	18c3      	adds	r3, r0, r3
 8001300:	3304      	adds	r3, #4
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b003      	add	sp, #12
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <SysTick_Config+0x40>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e010      	b.n	800134c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <SysTick_Config+0x44>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	3a01      	subs	r2, #1
 8001330:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	2301      	movs	r3, #1
 8001334:	425b      	negs	r3, r3
 8001336:	2103      	movs	r1, #3
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ff7d 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SysTick_Config+0x44>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x44>)
 8001346:	2207      	movs	r2, #7
 8001348:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}
 8001354:	00ffffff 	.word	0x00ffffff
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	210f      	movs	r1, #15
 8001368:	187b      	adds	r3, r7, r1
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	187b      	adds	r3, r7, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <__NVIC_SetPriority>
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ffbf 	bl	8001314 <SysTick_Config>
 8001396:	0003      	movs	r3, r0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e149      	b.n	8001644 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d100      	bne.n	80013c8 <HAL_GPIO_Init+0x28>
 80013c6:	e13a      	b.n	800163e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d00b      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	2201      	movs	r2, #1
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0xea>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d123      	bne.n	80014d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	58d3      	ldr	r3, [r2, r3]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2207      	movs	r2, #7
 800149c:	4013      	ands	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2107      	movs	r1, #7
 80014b6:	400b      	ands	r3, r1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	6939      	ldr	r1, [r7, #16]
 80014d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2203      	movs	r2, #3
 80014f0:	401a      	ands	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	055b      	lsls	r3, r3, #21
 800150e:	4013      	ands	r3, r2
 8001510:	d100      	bne.n	8001514 <HAL_GPIO_Init+0x174>
 8001512:	e094      	b.n	800163e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_GPIO_Init+0x2bc>)
 8001516:	699a      	ldr	r2, [r3, #24]
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_GPIO_Init+0x2bc>)
 800151a:	2101      	movs	r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	4b4e      	ldr	r3, [pc, #312]	; (800165c <HAL_GPIO_Init+0x2bc>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x2c0>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	589b      	ldr	r3, [r3, r2]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	409a      	lsls	r2, r3
 8001546:	0013      	movs	r3, r2
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	2390      	movs	r3, #144	; 0x90
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	429a      	cmp	r2, r3
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x1d6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a41      	ldr	r2, [pc, #260]	; (8001664 <HAL_GPIO_Init+0x2c4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x1d2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_GPIO_Init+0x2c8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x1ce>
 800156a:	2302      	movs	r3, #2
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x1d8>
 800156e:	2305      	movs	r3, #5
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x1d8>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x1d8>
 8001576:	2300      	movs	r3, #0
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	2103      	movs	r1, #3
 800157c:	400a      	ands	r2, r1
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4093      	lsls	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <HAL_GPIO_Init+0x2c0>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001596:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2cc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	4013      	ands	r3, r2
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_GPIO_Init+0x2cc>)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_GPIO_Init+0x2cc>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43da      	mvns	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2cc>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_GPIO_Init+0x2cc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	035b      	lsls	r3, r3, #13
 8001602:	4013      	ands	r3, r2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2cc>)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_GPIO_Init+0x2cc>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43da      	mvns	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	4013      	ands	r3, r2
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_GPIO_Init+0x2cc>)
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	40da      	lsrs	r2, r3
 800164c:	1e13      	subs	r3, r2, #0
 800164e:	d000      	beq.n	8001652 <HAL_GPIO_Init+0x2b2>
 8001650:	e6ae      	b.n	80013b0 <HAL_GPIO_Init+0x10>
  } 
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b006      	add	sp, #24
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	000a      	movs	r2, r1
 800167a:	1cbb      	adds	r3, r7, #2
 800167c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	1cba      	adds	r2, r7, #2
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	4013      	ands	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800168a:	230f      	movs	r3, #15
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e003      	b.n	800169c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001694:	230f      	movs	r3, #15
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
  }
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	0008      	movs	r0, r1
 80016b4:	0011      	movs	r1, r2
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	1c02      	adds	r2, r0, #0
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	1c7b      	adds	r3, r7, #1
 80016be:	1c0a      	adds	r2, r1, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c2:	1c7b      	adds	r3, r7, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	1cbb      	adds	r3, r7, #2
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d4:	1cbb      	adds	r3, r7, #2
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e303      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x1e>
 8001700:	e08d      	b.n	800181e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001702:	4bc4      	ldr	r3, [pc, #784]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	220c      	movs	r2, #12
 8001708:	4013      	ands	r3, r2
 800170a:	2b04      	cmp	r3, #4
 800170c:	d00e      	beq.n	800172c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170e:	4bc1      	ldr	r3, [pc, #772]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	220c      	movs	r2, #12
 8001714:	4013      	ands	r3, r2
 8001716:	2b08      	cmp	r3, #8
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x64>
 800171a:	4bbe      	ldr	r3, [pc, #760]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	401a      	ands	r2, r3
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	025b      	lsls	r3, r3, #9
 8001728:	429a      	cmp	r2, r3
 800172a:	d10d      	bne.n	8001748 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4bb9      	ldr	r3, [pc, #740]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	029b      	lsls	r3, r3, #10
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x56>
 8001738:	e070      	b.n	800181c <HAL_RCC_OscConfig+0x138>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d000      	beq.n	8001744 <HAL_RCC_OscConfig+0x60>
 8001742:	e06b      	b.n	800181c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e2da      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x7c>
 8001750:	4bb0      	ldr	r3, [pc, #704]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4baf      	ldr	r3, [pc, #700]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	0249      	lsls	r1, r1, #9
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e02f      	b.n	80017c0 <HAL_RCC_OscConfig+0xdc>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x9e>
 8001768:	4baa      	ldr	r3, [pc, #680]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4ba9      	ldr	r3, [pc, #676]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800176e:	49aa      	ldr	r1, [pc, #680]	; (8001a18 <HAL_RCC_OscConfig+0x334>)
 8001770:	400a      	ands	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4ba7      	ldr	r3, [pc, #668]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4ba6      	ldr	r3, [pc, #664]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800177a:	49a8      	ldr	r1, [pc, #672]	; (8001a1c <HAL_RCC_OscConfig+0x338>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e01e      	b.n	80017c0 <HAL_RCC_OscConfig+0xdc>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10e      	bne.n	80017a8 <HAL_RCC_OscConfig+0xc4>
 800178a:	4ba2      	ldr	r3, [pc, #648]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4ba1      	ldr	r3, [pc, #644]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	02c9      	lsls	r1, r1, #11
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	4b9e      	ldr	r3, [pc, #632]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b9d      	ldr	r3, [pc, #628]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0249      	lsls	r1, r1, #9
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xdc>
 80017a8:	4b9a      	ldr	r3, [pc, #616]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b99      	ldr	r3, [pc, #612]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80017ae:	499a      	ldr	r1, [pc, #616]	; (8001a18 <HAL_RCC_OscConfig+0x334>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b97      	ldr	r3, [pc, #604]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b96      	ldr	r3, [pc, #600]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80017ba:	4998      	ldr	r1, [pc, #608]	; (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fd0a 	bl	80011e0 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d2:	f7ff fd05 	bl	80011e0 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	; 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e28c      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0xee>
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fcf5 	bl	80011e0 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fcf0 	bl	80011e0 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e277      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x118>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x146>
 8001828:	e069      	b.n	80018fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	d00b      	beq.n	800184c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001834:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	2b08      	cmp	r3, #8
 800183e:	d11c      	bne.n	800187a <HAL_RCC_OscConfig+0x196>
 8001840:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	4013      	ands	r3, r2
 800184a:	d116      	bne.n	800187a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184c:	4b71      	ldr	r3, [pc, #452]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x17e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e24d      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	22f8      	movs	r2, #248	; 0xf8
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	00da      	lsls	r2, r3, #3
 8001872:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	e041      	b.n	80018fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001882:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fca7 	bl	80011e0 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fca2 	bl	80011e0 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e229      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f1      	beq.n	8001898 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	22f8      	movs	r2, #248	; 0xf8
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00da      	lsls	r2, r3, #3
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e018      	b.n	80018fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018cc:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc82 	bl	80011e0 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fc7d 	bl	80011e0 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e204      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f1      	bne.n	80018e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2208      	movs	r2, #8
 8001904:	4013      	ands	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc60 	bl	80011e0 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fc5b 	bl	80011e0 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1e2      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d0f1      	beq.n	8001926 <HAL_RCC_OscConfig+0x242>
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800194a:	2101      	movs	r1, #1
 800194c:	438a      	bics	r2, r1
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fc46 	bl	80011e0 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff fc41 	bl	80011e0 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1c8      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f1      	bne.n	800195a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x29e>
 8001980:	e0b6      	b.n	8001af0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	231f      	movs	r3, #31
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	055b      	lsls	r3, r3, #21
 8001992:	4013      	ands	r3, r2
 8001994:	d111      	bne.n	80019ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0549      	lsls	r1, r1, #21
 80019a0:	430a      	orrs	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	055b      	lsls	r3, r3, #21
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b2:	231f      	movs	r3, #31
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x33c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	d11a      	bne.n	80019fc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_RCC_OscConfig+0x33c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x33c>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0049      	lsls	r1, r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d4:	f7ff fc04 	bl	80011e0 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fbff 	bl	80011e0 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e186      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x33c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x340>
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001a06:	6a1a      	ldr	r2, [r3, #32]
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	621a      	str	r2, [r3, #32]
 8001a10:	e036      	b.n	8001a80 <HAL_RCC_OscConfig+0x39c>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	fffeffff 	.word	0xfffeffff
 8001a1c:	fffbffff 	.word	0xfffbffff
 8001a20:	40007000 	.word	0x40007000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x362>
 8001a2c:	4bb6      	ldr	r3, [pc, #728]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4bb5      	ldr	r3, [pc, #724]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	621a      	str	r2, [r3, #32]
 8001a38:	4bb3      	ldr	r3, [pc, #716]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4bb2      	ldr	r3, [pc, #712]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a3e:	2104      	movs	r1, #4
 8001a40:	438a      	bics	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x39c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x384>
 8001a4e:	4bae      	ldr	r3, [pc, #696]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	4bad      	ldr	r3, [pc, #692]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a54:	2104      	movs	r1, #4
 8001a56:	430a      	orrs	r2, r1
 8001a58:	621a      	str	r2, [r3, #32]
 8001a5a:	4bab      	ldr	r3, [pc, #684]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	4baa      	ldr	r3, [pc, #680]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x39c>
 8001a68:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a6a:	6a1a      	ldr	r2, [r3, #32]
 8001a6c:	4ba6      	ldr	r3, [pc, #664]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	438a      	bics	r2, r1
 8001a72:	621a      	str	r2, [r3, #32]
 8001a74:	4ba4      	ldr	r3, [pc, #656]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d014      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a88:	f7ff fbaa 	bl	80011e0 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fba5 	bl	80011e0 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a9b      	ldr	r2, [pc, #620]	; (8001d0c <HAL_RCC_OscConfig+0x628>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e12b      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	4b98      	ldr	r3, [pc, #608]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3ae>
 8001ab0:	e013      	b.n	8001ada <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb95 	bl	80011e0 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	e009      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fb90 	bl	80011e0 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	4a91      	ldr	r2, [pc, #580]	; (8001d0c <HAL_RCC_OscConfig+0x628>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e116      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad0:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ada:	231f      	movs	r3, #31
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001aea:	4989      	ldr	r1, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x62c>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12a      	bne.n	8001b58 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b06:	4b80      	ldr	r3, [pc, #512]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b08:	2104      	movs	r1, #4
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b0e:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb61 	bl	80011e0 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b24:	f7ff fb5c 	bl	80011e0 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0e3      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b36:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f1      	beq.n	8001b24 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b40:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	22f8      	movs	r2, #248	; 0xf8
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	00da      	lsls	r2, r3, #3
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
 8001b56:	e034      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	3305      	adds	r3, #5
 8001b5e:	d111      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b60:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b64:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b66:	2104      	movs	r1, #4
 8001b68:	438a      	bics	r2, r1
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	22f8      	movs	r2, #248	; 0xf8
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	00da      	lsls	r2, r3, #3
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
 8001b82:	e01e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b84:	4b60      	ldr	r3, [pc, #384]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b88:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b90:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fb20 	bl	80011e0 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ba6:	f7ff fb1b 	bl	80011e0 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0a2      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f1      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4e8>
 8001bca:	e097      	b.n	8001cfc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x4f6>
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d14c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001be8:	494a      	ldr	r1, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x630>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff faf7 	bl	80011e0 <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff faf2 	bl	80011e0 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e079      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	049b      	lsls	r3, r3, #18
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <HAL_RCC_OscConfig+0x634>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0449      	lsls	r1, r1, #17
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fac5 	bl	80011e0 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fac0 	bl	80011e0 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e047      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	4013      	ands	r3, r2
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x578>
 8001c7a:	e03f      	b.n	8001cfc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001c82:	4924      	ldr	r1, [pc, #144]	; (8001d14 <HAL_RCC_OscConfig+0x630>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff faaa 	bl	80011e0 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff faa5 	bl	80011e0 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e02c      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	049b      	lsls	r3, r3, #18
 8001cac:	4013      	ands	r3, r2
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5ae>
 8001cb0:	e024      	b.n	8001cfc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01f      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x624>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	220f      	movs	r2, #15
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	23f0      	movs	r3, #240	; 0xf0
 8001cec:	039b      	lsls	r3, r3, #14
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b008      	add	sp, #32
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	00001388 	.word	0x00001388
 8001d10:	efffffff 	.word	0xefffffff
 8001d14:	feffffff 	.word	0xfeffffff
 8001d18:	ffc2ffff 	.word	0xffc2ffff

08001d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0b3      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d911      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4393      	bics	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e09a      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d015      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2204      	movs	r2, #4
 8001d72:	4013      	ands	r3, r2
 8001d74:	d006      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d76:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	21e0      	movs	r1, #224	; 0xe0
 8001d7e:	00c9      	lsls	r1, r1, #3
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	22f0      	movs	r2, #240	; 0xf0
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d114      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06e      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	049b      	lsls	r3, r3, #18
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e062      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e05b      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff f9f4 	bl	80011e0 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7ff f9ef 	bl	80011e0 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x18c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e042      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	220c      	movs	r2, #12
 8001e18:	401a      	ands	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ec      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d211      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x184>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e020      	b.n	8001e98 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_RCC_ClockConfig+0x190>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e74:	f000 f820 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x188>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	220f      	movs	r2, #15
 8001e82:	4013      	ands	r3, r2
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x194>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	000a      	movs	r2, r1
 8001e8a:	40da      	lsrs	r2, r3
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x198>)
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff f95f 	bl	8001154 <HAL_InitTick>
  
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	00001388 	.word	0x00001388
 8001eac:	fffff8ff 	.word	0xfffff8ff
 8001eb0:	08004450 	.word	0x08004450
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b08f      	sub	sp, #60	; 0x3c
 8001ebc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ec6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4a29      	ldr	r2, [pc, #164]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ed2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d002      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x4a>
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x50>
 8001f00:	e02d      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f06:	e02d      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2214      	movs	r2, #20
 8001f12:	18ba      	adds	r2, r7, r2
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	4013      	ands	r3, r2
 8001f20:	1d3a      	adds	r2, r7, #4
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f32:	4812      	ldr	r0, [pc, #72]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f34:	f7fe f8e8 	bl	8000108 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	4353      	muls	r3, r2
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
 8001f42:	e009      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f46:	000a      	movs	r2, r1
 8001f48:	0152      	lsls	r2, r2, #5
 8001f4a:	1a52      	subs	r2, r2, r1
 8001f4c:	0193      	lsls	r3, r2, #6
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	185b      	adds	r3, r3, r1
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f5c:	e002      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b00f      	add	sp, #60	; 0x3c
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	08004430 	.word	0x08004430
 8001f74:	08004440 	.word	0x08004440
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f98:	f7ff fff2 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f9c:	0001      	movs	r1, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	000b      	movs	r3, r1
}    
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08004460 	.word	0x08004460

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	025b      	lsls	r3, r3, #9
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d100      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fdc:	e08f      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2317      	movs	r3, #23
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d111      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0549      	lsls	r1, r1, #21
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	61da      	str	r2, [r3, #28]
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2317      	movs	r3, #23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d11a      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0049      	lsls	r1, r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff f8d6 	bl	80011e0 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f8d1 	bl	80011e0 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e077      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0f0      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d034      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4013      	ands	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	429a      	cmp	r2, r3
 8002078:	d02c      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a33      	ldr	r2, [pc, #204]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0249      	lsls	r1, r1, #9
 800208e:	430a      	orrs	r2, r1
 8002090:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002098:	492d      	ldr	r1, [pc, #180]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800209a:	400a      	ands	r2, r1
 800209c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f898 	bl	80011e0 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e009      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff f893 	bl	80011e0 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e038      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020e8:	2317      	movs	r3, #23
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f8:	4917      	ldr	r1, [pc, #92]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4013      	ands	r3, r2
 8002106:	d009      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2203      	movs	r2, #3
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002118:	430a      	orrs	r2, r1
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2220      	movs	r2, #32
 8002122:	4013      	ands	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	2210      	movs	r2, #16
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002136:	430a      	orrs	r2, r1
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b006      	add	sp, #24
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	fffffcff 	.word	0xfffffcff
 8002150:	fffeffff 	.word	0xfffeffff
 8002154:	00001388 	.word	0x00001388
 8002158:	efffffff 	.word	0xefffffff

0800215c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e08a      	b.n	8002284 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	225d      	movs	r2, #93	; 0x5d
 8002178:	5c9b      	ldrb	r3, [r3, r2]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	225c      	movs	r2, #92	; 0x5c
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f7fe feb6 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	225d      	movs	r2, #93	; 0x5d
 8002194:	2102      	movs	r1, #2
 8002196:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	438a      	bics	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	23e0      	movs	r3, #224	; 0xe0
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d902      	bls.n	80021ba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e002      	b.n	80021c0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	015b      	lsls	r3, r3, #5
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	23f0      	movs	r3, #240	; 0xf0
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d008      	beq.n	80021de <HAL_SPI_Init+0x82>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	23e0      	movs	r3, #224	; 0xe0
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d002      	beq.n	80021de <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	23e0      	movs	r3, #224	; 0xe0
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d903      	bls.n	80021fa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e002      	b.n	8002200 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6999      	ldr	r1, [r3, #24]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	431a      	orrs	r2, r3
 800222e:	0011      	movs	r1, r2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	2204      	movs	r2, #4
 8002244:	401a      	ands	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	431a      	orrs	r2, r3
 8002258:	0011      	movs	r1, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4907      	ldr	r1, [pc, #28]	; (800228c <HAL_SPI_Init+0x130>)
 8002270:	400a      	ands	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	225d      	movs	r2, #93	; 0x5d
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}
 800228c:	fffff7ff 	.word	0xfffff7ff

08002290 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	001a      	movs	r2, r3
 800229e:	1cbb      	adds	r3, r7, #2
 80022a0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022a2:	2301      	movs	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022a6:	2323      	movs	r3, #35	; 0x23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	225c      	movs	r2, #92	; 0x5c
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_SPI_TransmitReceive+0x2c>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e21f      	b.n	80026fc <HAL_SPI_TransmitReceive+0x46c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	225c      	movs	r2, #92	; 0x5c
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c4:	f7fe ff8c 	bl	80011e0 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022cc:	201b      	movs	r0, #27
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	215d      	movs	r1, #93	; 0x5d
 80022d4:	5c52      	ldrb	r2, [r2, r1]
 80022d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80022de:	2312      	movs	r3, #18
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	1cba      	adds	r2, r7, #2
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80022e8:	2310      	movs	r3, #16
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	1cba      	adds	r2, r7, #2
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022f2:	183b      	adds	r3, r7, r0
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d012      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x90>
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	2382      	movs	r3, #130	; 0x82
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	429a      	cmp	r2, r3
 8002302:	d108      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x86>
 800230c:	231b      	movs	r3, #27
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d004      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8002316:	2323      	movs	r3, #35	; 0x23
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
    goto error;
 800231e:	e1e2      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_SPI_TransmitReceive+0xa4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_SPI_TransmitReceive+0xa4>
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8002334:	2323      	movs	r3, #35	; 0x23
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
    goto error;
 800233c:	e1d3      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	225d      	movs	r2, #93	; 0x5d
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b04      	cmp	r3, #4
 8002348:	d003      	beq.n	8002352 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	225d      	movs	r2, #93	; 0x5d
 800234e:	2105      	movs	r1, #5
 8002350:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1cba      	adds	r2, r7, #2
 8002362:	2146      	movs	r1, #70	; 0x46
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1cba      	adds	r2, r7, #2
 800236c:	2144      	movs	r1, #68	; 0x44
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1cba      	adds	r2, r7, #2
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1cba      	adds	r2, r7, #2
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	23e0      	movs	r3, #224	; 0xe0
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	429a      	cmp	r2, r3
 800239e:	d804      	bhi.n	80023aa <HAL_SPI_TransmitReceive+0x11a>
 80023a0:	2310      	movs	r3, #16
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d908      	bls.n	80023bc <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	49ca      	ldr	r1, [pc, #808]	; (80026e0 <HAL_SPI_TransmitReceive+0x450>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	e008      	b.n	80023ce <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	0149      	lsls	r1, r1, #5
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2240      	movs	r2, #64	; 0x40
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d007      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	23e0      	movs	r3, #224	; 0xe0
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d800      	bhi.n	80023fa <HAL_SPI_TransmitReceive+0x16a>
 80023f8:	e07f      	b.n	80024fa <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_SPI_TransmitReceive+0x17e>
 8002402:	2312      	movs	r3, #18
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d000      	beq.n	800240e <HAL_SPI_TransmitReceive+0x17e>
 800240c:	e069      	b.n	80024e2 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	881a      	ldrh	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	1c9a      	adds	r2, r3, #2
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002432:	e056      	b.n	80024e2 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d11b      	bne.n	800247a <HAL_SPI_TransmitReceive+0x1ea>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d016      	beq.n	800247a <HAL_SPI_TransmitReceive+0x1ea>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	2b01      	cmp	r3, #1
 8002450:	d113      	bne.n	800247a <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2201      	movs	r2, #1
 8002482:	4013      	ands	r3, r2
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11c      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x232>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2246      	movs	r2, #70	; 0x46
 800248c:	5a9b      	ldrh	r3, [r3, r2]
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	b292      	uxth	r2, r2
 80024a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2246      	movs	r2, #70	; 0x46
 80024b0:	5a9b      	ldrh	r3, [r3, r2]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b299      	uxth	r1, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2246      	movs	r2, #70	; 0x46
 80024bc:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024be:	2301      	movs	r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024c2:	f7fe fe8d 	bl	80011e0 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d807      	bhi.n	80024e2 <HAL_SPI_TransmitReceive+0x252>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	3301      	adds	r3, #1
 80024d6:	d004      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 80024d8:	2323      	movs	r3, #35	; 0x23
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2203      	movs	r2, #3
 80024de:	701a      	strb	r2, [r3, #0]
        goto error;
 80024e0:	e101      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1a3      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x1a4>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2246      	movs	r2, #70	; 0x46
 80024f0:	5a9b      	ldrh	r3, [r3, r2]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d19d      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x1a4>
 80024f8:	e0e2      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_SPI_TransmitReceive+0x27e>
 8002502:	2312      	movs	r3, #18
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d000      	beq.n	800250e <HAL_SPI_TransmitReceive+0x27e>
 800250c:	e0cb      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d912      	bls.n	800253e <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	1c9a      	adds	r2, r3, #2
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b02      	subs	r3, #2
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800253c:	e0b3      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002564:	e09f      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d134      	bne.n	80025de <HAL_SPI_TransmitReceive+0x34e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02f      	beq.n	80025de <HAL_SPI_TransmitReceive+0x34e>
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b01      	cmp	r3, #1
 8002582:	d12c      	bne.n	80025de <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d912      	bls.n	80025b4 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	1c9a      	adds	r2, r3, #2
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b02      	subs	r3, #2
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025b2:	e012      	b.n	80025da <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d149      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x3f0>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2246      	movs	r2, #70	; 0x46
 80025f0:	5a9b      	ldrh	r3, [r3, r2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d043      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2246      	movs	r2, #70	; 0x46
 80025fc:	5a9b      	ldrh	r3, [r3, r2]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d924      	bls.n	800264e <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	b292      	uxth	r2, r2
 8002610:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	1c9a      	adds	r2, r3, #2
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2246      	movs	r2, #70	; 0x46
 8002620:	5a9b      	ldrh	r3, [r3, r2]
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b02      	subs	r3, #2
 8002626:	b299      	uxth	r1, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2246      	movs	r2, #70	; 0x46
 800262c:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2246      	movs	r2, #70	; 0x46
 8002632:	5a9b      	ldrh	r3, [r3, r2]
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d820      	bhi.n	800267c <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0149      	lsls	r1, r1, #5
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	e016      	b.n	800267c <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	001a      	movs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2246      	movs	r2, #70	; 0x46
 800266e:	5a9b      	ldrh	r3, [r3, r2]
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b299      	uxth	r1, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2246      	movs	r2, #70	; 0x46
 800267a:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002680:	f7fe fdae 	bl	80011e0 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268c:	429a      	cmp	r2, r3
 800268e:	d802      	bhi.n	8002696 <HAL_SPI_TransmitReceive+0x406>
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	3301      	adds	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_SPI_TransmitReceive+0x40c>
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 800269c:	2323      	movs	r3, #35	; 0x23
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2203      	movs	r2, #3
 80026a2:	701a      	strb	r2, [r3, #0]
        goto error;
 80026a4:	e01f      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d000      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x422>
 80026b0:	e759      	b.n	8002566 <HAL_SPI_TransmitReceive+0x2d6>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2246      	movs	r2, #70	; 0x46
 80026b6:	5a9b      	ldrh	r3, [r3, r2]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d000      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x430>
 80026be:	e752      	b.n	8002566 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f900 	bl	80028cc <SPI_EndRxTxTransaction>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d009      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 80026d0:	2323      	movs	r3, #35	; 0x23
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	661a      	str	r2, [r3, #96]	; 0x60
 80026de:	e002      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x456>
 80026e0:	ffffefff 	.word	0xffffefff
  }

error :
 80026e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	225d      	movs	r2, #93	; 0x5d
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	225c      	movs	r2, #92	; 0x5c
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026f6:	2323      	movs	r3, #35	; 0x23
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b00a      	add	sp, #40	; 0x28
 8002702:	bd80      	pop	{r7, pc}

08002704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002714:	e050      	b.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	d04d      	beq.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800271c:	f7fe fd60 	bl	80011e0 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d902      	bls.n	8002732 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d142      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	21e0      	movs	r1, #224	; 0xe0
 800273e:	438a      	bics	r2, r1
 8002740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	2382      	movs	r3, #130	; 0x82
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	429a      	cmp	r2, r3
 800274c:	d113      	bne.n	8002776 <SPI_WaitFlagStateUntilTimeout+0x72>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	429a      	cmp	r2, r3
 8002758:	d005      	beq.n	8002766 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	429a      	cmp	r2, r3
 8002764:	d107      	bne.n	8002776 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	438a      	bics	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	019b      	lsls	r3, r3, #6
 800277e:	429a      	cmp	r2, r3
 8002780:	d110      	bne.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4914      	ldr	r1, [pc, #80]	; (80027e0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0189      	lsls	r1, r1, #6
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	225d      	movs	r2, #93	; 0x5d
 80027a8:	2101      	movs	r1, #1
 80027aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	225c      	movs	r2, #92	; 0x5c
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e00f      	b.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	425a      	negs	r2, r3
 80027c8:	4153      	adcs	r3, r2
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	001a      	movs	r2, r3
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d19f      	bne.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	ffffdfff 	.word	0xffffdfff

080027e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80027f2:	e05c      	b.n	80028ae <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d106      	bne.n	800280c <SPI_WaitFifoStateUntilTimeout+0x28>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	d04d      	beq.n	80028ae <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002812:	f7fe fce5 	bl	80011e0 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d902      	bls.n	8002828 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d142      	bne.n	80028ae <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	21e0      	movs	r1, #224	; 0xe0
 8002834:	438a      	bics	r2, r1
 8002836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	2382      	movs	r3, #130	; 0x82
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	429a      	cmp	r2, r3
 8002842:	d113      	bne.n	800286c <SPI_WaitFifoStateUntilTimeout+0x88>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	429a      	cmp	r2, r3
 800284e:	d005      	beq.n	800285c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	438a      	bics	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	429a      	cmp	r2, r3
 8002876:	d110      	bne.n	800289a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4911      	ldr	r1, [pc, #68]	; (80028c8 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0189      	lsls	r1, r1, #6
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	225d      	movs	r2, #93	; 0x5d
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	225c      	movs	r2, #92	; 0x5c
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e008      	b.n	80028c0 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d19a      	bne.n	80027f4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b004      	add	sp, #16
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	ffffdfff 	.word	0xffffdfff

080028cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	0159      	lsls	r1, r3, #5
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	0013      	movs	r3, r2
 80028e6:	2200      	movs	r2, #0
 80028e8:	f7ff ff7c 	bl	80027e4 <SPI_WaitFifoStateUntilTimeout>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d007      	beq.n	8002900 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	2220      	movs	r2, #32
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e027      	b.n	8002950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	0013      	movs	r3, r2
 800290a:	2200      	movs	r2, #0
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	f7ff fef9 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d007      	beq.n	8002926 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	2220      	movs	r2, #32
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e014      	b.n	8002950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	00d9      	lsls	r1, r3, #3
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	0013      	movs	r3, r2
 8002934:	2200      	movs	r2, #0
 8002936:	f7ff ff55 	bl	80027e4 <SPI_WaitFifoStateUntilTimeout>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d007      	beq.n	800294e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	2220      	movs	r2, #32
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e000      	b.n	8002950 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e044      	b.n	80029f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2270      	movs	r2, #112	; 0x70
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f7fe fb09 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2224      	movs	r2, #36	; 0x24
 8002986:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f9b0 	bl	8002d00 <UART_SetConfig>
 80029a0:	0003      	movs	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e024      	b.n	80029f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fb11 	bl	8002fdc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	490d      	ldr	r1, [pc, #52]	; (80029fc <HAL_UART_Init+0xa4>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	212a      	movs	r1, #42	; 0x2a
 80029d6:	438a      	bics	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fba9 	bl	8003144 <UART_CheckIdleState>
 80029f2:	0003      	movs	r3, r0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	ffffb7ff 	.word	0xffffb7ff

08002a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	1dbb      	adds	r3, r7, #6
 8002a0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d000      	beq.n	8002a1a <HAL_UART_Transmit+0x1a>
 8002a18:	e095      	b.n	8002b46 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_UART_Transmit+0x28>
 8002a20:	1dbb      	adds	r3, r7, #6
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e08d      	b.n	8002b48 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	015b      	lsls	r3, r3, #5
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d109      	bne.n	8002a4c <HAL_UART_Transmit+0x4c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e07d      	b.n	8002b48 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2270      	movs	r2, #112	; 0x70
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Transmit+0x5a>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e076      	b.n	8002b48 <HAL_UART_Transmit+0x148>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2270      	movs	r2, #112	; 0x70
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fbb7 	bl	80011e0 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1dba      	adds	r2, r7, #6
 8002a7a:	2150      	movs	r1, #80	; 0x50
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1dba      	adds	r2, r7, #6
 8002a84:	2152      	movs	r1, #82	; 0x52
 8002a86:	8812      	ldrh	r2, [r2, #0]
 8002a88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d108      	bne.n	8002aa8 <HAL_UART_Transmit+0xa8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e003      	b.n	8002ab0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab0:	e02d      	b.n	8002b0e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	0013      	movs	r3, r2
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	f000 fb86 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e03d      	b.n	8002b48 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	05d2      	lsls	r2, r2, #23
 8002adc:	0dd2      	lsrs	r2, r2, #23
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e008      	b.n	8002afc <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b292      	uxth	r2, r2
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2252      	movs	r2, #82	; 0x52
 8002b00:	5a9b      	ldrh	r3, [r3, r2]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b299      	uxth	r1, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2252      	movs	r2, #82	; 0x52
 8002b0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2252      	movs	r2, #82	; 0x52
 8002b12:	5a9b      	ldrh	r3, [r3, r2]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1cb      	bne.n	8002ab2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	0013      	movs	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	f000 fb52 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e009      	b.n	8002b48 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2270      	movs	r2, #112	; 0x70
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b008      	add	sp, #32
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	1dbb      	adds	r3, r7, #6
 8002b5e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d000      	beq.n	8002b6a <HAL_UART_Receive+0x1a>
 8002b68:	e0c2      	b.n	8002cf0 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_UART_Receive+0x28>
 8002b70:	1dbb      	adds	r3, r7, #6
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0ba      	b.n	8002cf2 <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	015b      	lsls	r3, r3, #5
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d109      	bne.n	8002b9c <HAL_UART_Receive+0x4c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0aa      	b.n	8002cf2 <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2270      	movs	r2, #112	; 0x70
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Receive+0x5a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0a3      	b.n	8002cf2 <HAL_UART_Receive+0x1a2>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2270      	movs	r2, #112	; 0x70
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	; 0x22
 8002bbc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002bbe:	f7fe fb0f 	bl	80011e0 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1dba      	adds	r2, r7, #6
 8002bca:	2158      	movs	r1, #88	; 0x58
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1dba      	adds	r2, r7, #6
 8002bd4:	215a      	movs	r1, #90	; 0x5a
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	015b      	lsls	r3, r3, #5
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10d      	bne.n	8002c02 <HAL_UART_Receive+0xb2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <HAL_UART_Receive+0xa8>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	225c      	movs	r2, #92	; 0x5c
 8002bf2:	4942      	ldr	r1, [pc, #264]	; (8002cfc <HAL_UART_Receive+0x1ac>)
 8002bf4:	5299      	strh	r1, [r3, r2]
 8002bf6:	e01a      	b.n	8002c2e <HAL_UART_Receive+0xde>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	225c      	movs	r2, #92	; 0x5c
 8002bfc:	21ff      	movs	r1, #255	; 0xff
 8002bfe:	5299      	strh	r1, [r3, r2]
 8002c00:	e015      	b.n	8002c2e <HAL_UART_Receive+0xde>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_UART_Receive+0xd6>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_UART_Receive+0xcc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	225c      	movs	r2, #92	; 0x5c
 8002c16:	21ff      	movs	r1, #255	; 0xff
 8002c18:	5299      	strh	r1, [r3, r2]
 8002c1a:	e008      	b.n	8002c2e <HAL_UART_Receive+0xde>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	225c      	movs	r2, #92	; 0x5c
 8002c20:	217f      	movs	r1, #127	; 0x7f
 8002c22:	5299      	strh	r1, [r3, r2]
 8002c24:	e003      	b.n	8002c2e <HAL_UART_Receive+0xde>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	225c      	movs	r2, #92	; 0x5c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002c2e:	2312      	movs	r3, #18
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	215c      	movs	r1, #92	; 0x5c
 8002c36:	5a52      	ldrh	r2, [r2, r1]
 8002c38:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_UART_Receive+0x108>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c60:	e037      	b.n	8002cd2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2120      	movs	r1, #32
 8002c70:	f000 faae 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e03a      	b.n	8002cf2 <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2212      	movs	r2, #18
 8002c8c:	18ba      	adds	r2, r7, r2
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e00f      	b.n	8002cc0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2212      	movs	r2, #18
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	8812      	ldrh	r2, [r2, #0]
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	225a      	movs	r2, #90	; 0x5a
 8002cc4:	5a9b      	ldrh	r3, [r3, r2]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	225a      	movs	r2, #90	; 0x5a
 8002cd0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	225a      	movs	r2, #90	; 0x5a
 8002cd6:	5a9b      	ldrh	r3, [r3, r2]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1c1      	bne.n	8002c62 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2270      	movs	r2, #112	; 0x70
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b008      	add	sp, #32
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	000001ff 	.word	0x000001ff

08002d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0c:	2317      	movs	r3, #23
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4aa3      	ldr	r2, [pc, #652]	; (8002fc0 <UART_SetConfig+0x2c0>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a9e      	ldr	r2, [pc, #632]	; (8002fc4 <UART_SetConfig+0x2c4>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a95      	ldr	r2, [pc, #596]	; (8002fc8 <UART_SetConfig+0x2c8>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d80:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2203      	movs	r2, #3
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d00f      	beq.n	8002dac <UART_SetConfig+0xac>
 8002d8c:	d304      	bcc.n	8002d98 <UART_SetConfig+0x98>
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d011      	beq.n	8002db6 <UART_SetConfig+0xb6>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d005      	beq.n	8002da2 <UART_SetConfig+0xa2>
 8002d96:	e013      	b.n	8002dc0 <UART_SetConfig+0xc0>
 8002d98:	231f      	movs	r3, #31
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e012      	b.n	8002dc8 <UART_SetConfig+0xc8>
 8002da2:	231f      	movs	r3, #31
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e00d      	b.n	8002dc8 <UART_SetConfig+0xc8>
 8002dac:	231f      	movs	r3, #31
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2204      	movs	r2, #4
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e008      	b.n	8002dc8 <UART_SetConfig+0xc8>
 8002db6:	231f      	movs	r3, #31
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2208      	movs	r2, #8
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e003      	b.n	8002dc8 <UART_SetConfig+0xc8>
 8002dc0:	231f      	movs	r3, #31
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d000      	beq.n	8002dd8 <UART_SetConfig+0xd8>
 8002dd6:	e07d      	b.n	8002ed4 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8002dd8:	231f      	movs	r3, #31
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d01c      	beq.n	8002e1c <UART_SetConfig+0x11c>
 8002de2:	dc02      	bgt.n	8002dea <UART_SetConfig+0xea>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <UART_SetConfig+0xf4>
 8002de8:	e04b      	b.n	8002e82 <UART_SetConfig+0x182>
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d025      	beq.n	8002e3a <UART_SetConfig+0x13a>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d037      	beq.n	8002e62 <UART_SetConfig+0x162>
 8002df2:	e046      	b.n	8002e82 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df4:	f7ff f8ce 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	005a      	lsls	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	18d2      	adds	r2, r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f7fd f97a 	bl	8000108 <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	61bb      	str	r3, [r7, #24]
        break;
 8002e1a:	e037      	b.n	8002e8c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	4a6b      	ldr	r2, [pc, #428]	; (8002fd0 <UART_SetConfig+0x2d0>)
 8002e24:	189a      	adds	r2, r3, r2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	0010      	movs	r0, r2
 8002e2e:	f7fd f96b 	bl	8000108 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	61bb      	str	r3, [r7, #24]
        break;
 8002e38:	e028      	b.n	8002e8c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3a:	f7ff f83d 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	18d2      	adds	r2, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f7fd f957 	bl	8000108 <__udivsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	61bb      	str	r3, [r7, #24]
        break;
 8002e60:	e014      	b.n	8002e8c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	0252      	lsls	r2, r2, #9
 8002e6c:	189a      	adds	r2, r3, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0019      	movs	r1, r3
 8002e74:	0010      	movs	r0, r2
 8002e76:	f7fd f947 	bl	8000108 <__udivsi3>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e004      	b.n	8002e8c <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8002e82:	2317      	movs	r3, #23
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
        break;
 8002e8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	d91b      	bls.n	8002eca <UART_SetConfig+0x1ca>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <UART_SetConfig+0x2d4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d817      	bhi.n	8002eca <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	183b      	adds	r3, r7, r0
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b299      	uxth	r1, r3
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	183a      	adds	r2, r7, r0
 8002eb8:	8812      	ldrh	r2, [r2, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	183a      	adds	r2, r7, r0
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	e06c      	b.n	8002fa4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8002eca:	2317      	movs	r3, #23
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e067      	b.n	8002fa4 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d01b      	beq.n	8002f16 <UART_SetConfig+0x216>
 8002ede:	dc02      	bgt.n	8002ee6 <UART_SetConfig+0x1e6>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x1f0>
 8002ee4:	e049      	b.n	8002f7a <UART_SetConfig+0x27a>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d024      	beq.n	8002f34 <UART_SetConfig+0x234>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d035      	beq.n	8002f5a <UART_SetConfig+0x25a>
 8002eee:	e044      	b.n	8002f7a <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f7ff f850 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	085a      	lsrs	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	18d2      	adds	r2, r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0019      	movs	r1, r3
 8002f08:	0010      	movs	r0, r2
 8002f0a:	f7fd f8fd 	bl	8000108 <__udivsi3>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	61bb      	str	r3, [r7, #24]
        break;
 8002f14:	e036      	b.n	8002f84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <UART_SetConfig+0x2d8>)
 8002f1e:	189a      	adds	r2, r3, r2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0019      	movs	r1, r3
 8002f26:	0010      	movs	r0, r2
 8002f28:	f7fd f8ee 	bl	8000108 <__udivsi3>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	61bb      	str	r3, [r7, #24]
        break;
 8002f32:	e027      	b.n	8002f84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f34:	f7fe ffc0 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085a      	lsrs	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	18d2      	adds	r2, r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	f7fd f8db 	bl	8000108 <__udivsi3>
 8002f52:	0003      	movs	r3, r0
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	61bb      	str	r3, [r7, #24]
        break;
 8002f58:	e014      	b.n	8002f84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	0212      	lsls	r2, r2, #8
 8002f64:	189a      	adds	r2, r3, r2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	f7fd f8cb 	bl	8000108 <__udivsi3>
 8002f72:	0003      	movs	r3, r0
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	61bb      	str	r3, [r7, #24]
        break;
 8002f78:	e004      	b.n	8002f84 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8002f7a:	2317      	movs	r3, #23
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
        break;
 8002f82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d908      	bls.n	8002f9c <UART_SetConfig+0x29c>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <UART_SetConfig+0x2d4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d804      	bhi.n	8002f9c <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	e003      	b.n	8002fa4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8002f9c:	2317      	movs	r3, #23
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002fb0:	2317      	movs	r3, #23
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b008      	add	sp, #32
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	ffff69f3 	.word	0xffff69f3
 8002fc4:	ffffcfff 	.word	0xffffcfff
 8002fc8:	fffff4ff 	.word	0xfffff4ff
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	0000ffff 	.word	0x0000ffff
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00b      	beq.n	8003006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <UART_AdvFeatureConfig+0x144>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d00b      	beq.n	8003028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <UART_AdvFeatureConfig+0x148>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2204      	movs	r2, #4
 800302e:	4013      	ands	r3, r2
 8003030:	d00b      	beq.n	800304a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <UART_AdvFeatureConfig+0x14c>)
 800303a:	4013      	ands	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2208      	movs	r2, #8
 8003050:	4013      	ands	r3, r2
 8003052:	d00b      	beq.n	800306c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a34      	ldr	r2, [pc, #208]	; (800312c <UART_AdvFeatureConfig+0x150>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2210      	movs	r2, #16
 8003072:	4013      	ands	r3, r2
 8003074:	d00b      	beq.n	800308e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <UART_AdvFeatureConfig+0x154>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2220      	movs	r2, #32
 8003094:	4013      	ands	r3, r2
 8003096:	d00b      	beq.n	80030b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a25      	ldr	r2, [pc, #148]	; (8003134 <UART_AdvFeatureConfig+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2240      	movs	r2, #64	; 0x40
 80030b6:	4013      	ands	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <UART_AdvFeatureConfig+0x15c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	035b      	lsls	r3, r3, #13
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10b      	bne.n	80030f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <UART_AdvFeatureConfig+0x160>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	4013      	ands	r3, r2
 80030fe:	d00b      	beq.n	8003118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <UART_AdvFeatureConfig+0x164>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  }
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	fffdffff 	.word	0xfffdffff
 8003124:	fffeffff 	.word	0xfffeffff
 8003128:	fffbffff 	.word	0xfffbffff
 800312c:	ffff7fff 	.word	0xffff7fff
 8003130:	ffffefff 	.word	0xffffefff
 8003134:	ffffdfff 	.word	0xffffdfff
 8003138:	ffefffff 	.word	0xffefffff
 800313c:	ff9fffff 	.word	0xff9fffff
 8003140:	fff7ffff 	.word	0xfff7ffff

08003144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003152:	f7fe f845 	bl	80011e0 <HAL_GetTick>
 8003156:	0003      	movs	r3, r0
 8003158:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2208      	movs	r2, #8
 8003162:	4013      	ands	r3, r2
 8003164:	2b08      	cmp	r3, #8
 8003166:	d10d      	bne.n	8003184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	0399      	lsls	r1, r3, #14
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <UART_CheckIdleState+0x88>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	0013      	movs	r3, r2
 8003176:	2200      	movs	r2, #0
 8003178:	f000 f82a 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e01f      	b.n	80031c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	2b04      	cmp	r3, #4
 8003190:	d10d      	bne.n	80031ae <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	03d9      	lsls	r1, r3, #15
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <UART_CheckIdleState+0x88>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	0013      	movs	r3, r2
 80031a0:	2200      	movs	r2, #0
 80031a2:	f000 f815 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d001      	beq.n	80031ae <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e00a      	b.n	80031c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2270      	movs	r2, #112	; 0x70
 80031be:	2100      	movs	r1, #0
 80031c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	01ffffff 	.word	0x01ffffff

080031d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e0:	e05d      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	3301      	adds	r3, #1
 80031e6:	d05a      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fd fffa 	bl	80011e0 <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11b      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	492f      	ldr	r1, [pc, #188]	; (80032c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800320a:	400a      	ands	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	438a      	bics	r2, r1
 800321c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2270      	movs	r2, #112	; 0x70
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e043      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	d02d      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	401a      	ands	r2, r3
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	429a      	cmp	r2, r3
 8003254:	d123      	bne.n	800329e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4917      	ldr	r1, [pc, #92]	; (80032c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800326c:	400a      	ands	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	438a      	bics	r2, r1
 800327e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2270      	movs	r2, #112	; 0x70
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e00f      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	425a      	negs	r2, r3
 80032ae:	4153      	adcs	r3, r2
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	001a      	movs	r2, r3
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d092      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	fffffe5f 	.word	0xfffffe5f

080032cc <__errno>:
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <__errno+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	4770      	bx	lr
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	2600      	movs	r6, #0
 80032ea:	f001 f859 	bl	80043a0 <_init>
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	00b3      	lsls	r3, r6, #2
 80032fe:	58eb      	ldr	r3, [r5, r3]
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	00b3      	lsls	r3, r6, #2
 8003308:	58eb      	ldr	r3, [r5, r3]
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08004500 	.word	0x08004500
 8003314:	08004500 	.word	0x08004500
 8003318:	08004500 	.word	0x08004500
 800331c:	08004504 	.word	0x08004504

08003320 <memset>:
 8003320:	0003      	movs	r3, r0
 8003322:	1812      	adds	r2, r2, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	7019      	strb	r1, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <iprintf>:
 8003330:	b40f      	push	{r0, r1, r2, r3}
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <iprintf+0x30>)
 8003334:	b513      	push	{r0, r1, r4, lr}
 8003336:	681c      	ldr	r4, [r3, #0]
 8003338:	2c00      	cmp	r4, #0
 800333a:	d005      	beq.n	8003348 <iprintf+0x18>
 800333c:	69a3      	ldr	r3, [r4, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <iprintf+0x18>
 8003342:	0020      	movs	r0, r4
 8003344:	f000 fae8 	bl	8003918 <__sinit>
 8003348:	ab05      	add	r3, sp, #20
 800334a:	9a04      	ldr	r2, [sp, #16]
 800334c:	68a1      	ldr	r1, [r4, #8]
 800334e:	0020      	movs	r0, r4
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	f000 fcbb 	bl	8003ccc <_vfiprintf_r>
 8003356:	bc16      	pop	{r1, r2, r4}
 8003358:	bc08      	pop	{r3}
 800335a:	b004      	add	sp, #16
 800335c:	4718      	bx	r3
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	2000000c 	.word	0x2000000c

08003364 <_puts_r>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	0005      	movs	r5, r0
 8003368:	000e      	movs	r6, r1
 800336a:	2800      	cmp	r0, #0
 800336c:	d004      	beq.n	8003378 <_puts_r+0x14>
 800336e:	6983      	ldr	r3, [r0, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <_puts_r+0x14>
 8003374:	f000 fad0 	bl	8003918 <__sinit>
 8003378:	69ab      	ldr	r3, [r5, #24]
 800337a:	68ac      	ldr	r4, [r5, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <_puts_r+0x22>
 8003380:	0028      	movs	r0, r5
 8003382:	f000 fac9 	bl	8003918 <__sinit>
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <_puts_r+0xb4>)
 8003388:	429c      	cmp	r4, r3
 800338a:	d10f      	bne.n	80033ac <_puts_r+0x48>
 800338c:	686c      	ldr	r4, [r5, #4]
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	d502      	bpl.n	800339a <_puts_r+0x36>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <_puts_r+0x76>
 800339a:	0021      	movs	r1, r4
 800339c:	0028      	movs	r0, r5
 800339e:	f000 f94d 	bl	800363c <__swsetup_r>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d019      	beq.n	80033da <_puts_r+0x76>
 80033a6:	2001      	movs	r0, #1
 80033a8:	4240      	negs	r0, r0
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <_puts_r+0xb8>)
 80033ae:	429c      	cmp	r4, r3
 80033b0:	d101      	bne.n	80033b6 <_puts_r+0x52>
 80033b2:	68ac      	ldr	r4, [r5, #8]
 80033b4:	e7eb      	b.n	800338e <_puts_r+0x2a>
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <_puts_r+0xbc>)
 80033b8:	429c      	cmp	r4, r3
 80033ba:	d1e8      	bne.n	800338e <_puts_r+0x2a>
 80033bc:	68ec      	ldr	r4, [r5, #12]
 80033be:	e7e6      	b.n	800338e <_puts_r+0x2a>
 80033c0:	3601      	adds	r6, #1
 80033c2:	60a3      	str	r3, [r4, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da04      	bge.n	80033d2 <_puts_r+0x6e>
 80033c8:	69a2      	ldr	r2, [r4, #24]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	dc16      	bgt.n	80033fc <_puts_r+0x98>
 80033ce:	290a      	cmp	r1, #10
 80033d0:	d014      	beq.n	80033fc <_puts_r+0x98>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	7019      	strb	r1, [r3, #0]
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	7831      	ldrb	r1, [r6, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	2900      	cmp	r1, #0
 80033e2:	d1ed      	bne.n	80033c0 <_puts_r+0x5c>
 80033e4:	60a3      	str	r3, [r4, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	da0f      	bge.n	800340a <_puts_r+0xa6>
 80033ea:	0022      	movs	r2, r4
 80033ec:	310a      	adds	r1, #10
 80033ee:	0028      	movs	r0, r5
 80033f0:	f000 f8ce 	bl	8003590 <__swbuf_r>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d0d6      	beq.n	80033a6 <_puts_r+0x42>
 80033f8:	200a      	movs	r0, #10
 80033fa:	e7d6      	b.n	80033aa <_puts_r+0x46>
 80033fc:	0022      	movs	r2, r4
 80033fe:	0028      	movs	r0, r5
 8003400:	f000 f8c6 	bl	8003590 <__swbuf_r>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d1e8      	bne.n	80033da <_puts_r+0x76>
 8003408:	e7cd      	b.n	80033a6 <_puts_r+0x42>
 800340a:	200a      	movs	r0, #10
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	6022      	str	r2, [r4, #0]
 8003412:	7018      	strb	r0, [r3, #0]
 8003414:	e7c9      	b.n	80033aa <_puts_r+0x46>
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	0800448c 	.word	0x0800448c
 800341c:	080044ac 	.word	0x080044ac
 8003420:	0800446c 	.word	0x0800446c

08003424 <puts>:
 8003424:	b510      	push	{r4, lr}
 8003426:	4b03      	ldr	r3, [pc, #12]	; (8003434 <puts+0x10>)
 8003428:	0001      	movs	r1, r0
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	f7ff ff9a 	bl	8003364 <_puts_r>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	2000000c 	.word	0x2000000c

08003438 <setvbuf>:
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	001d      	movs	r5, r3
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <setvbuf+0x144>)
 800343e:	b085      	sub	sp, #20
 8003440:	681e      	ldr	r6, [r3, #0]
 8003442:	0004      	movs	r4, r0
 8003444:	000f      	movs	r7, r1
 8003446:	9200      	str	r2, [sp, #0]
 8003448:	2e00      	cmp	r6, #0
 800344a:	d005      	beq.n	8003458 <setvbuf+0x20>
 800344c:	69b3      	ldr	r3, [r6, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <setvbuf+0x20>
 8003452:	0030      	movs	r0, r6
 8003454:	f000 fa60 	bl	8003918 <__sinit>
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <setvbuf+0x148>)
 800345a:	429c      	cmp	r4, r3
 800345c:	d150      	bne.n	8003500 <setvbuf+0xc8>
 800345e:	6874      	ldr	r4, [r6, #4]
 8003460:	9b00      	ldr	r3, [sp, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d005      	beq.n	8003472 <setvbuf+0x3a>
 8003466:	2b01      	cmp	r3, #1
 8003468:	d900      	bls.n	800346c <setvbuf+0x34>
 800346a:	e084      	b.n	8003576 <setvbuf+0x13e>
 800346c:	2d00      	cmp	r5, #0
 800346e:	da00      	bge.n	8003472 <setvbuf+0x3a>
 8003470:	e081      	b.n	8003576 <setvbuf+0x13e>
 8003472:	0021      	movs	r1, r4
 8003474:	0030      	movs	r0, r6
 8003476:	f000 f9e1 	bl	800383c <_fflush_r>
 800347a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800347c:	2900      	cmp	r1, #0
 800347e:	d008      	beq.n	8003492 <setvbuf+0x5a>
 8003480:	0023      	movs	r3, r4
 8003482:	3344      	adds	r3, #68	; 0x44
 8003484:	4299      	cmp	r1, r3
 8003486:	d002      	beq.n	800348e <setvbuf+0x56>
 8003488:	0030      	movs	r0, r6
 800348a:	f000 fb4f 	bl	8003b2c <_free_r>
 800348e:	2300      	movs	r3, #0
 8003490:	6363      	str	r3, [r4, #52]	; 0x34
 8003492:	2300      	movs	r3, #0
 8003494:	61a3      	str	r3, [r4, #24]
 8003496:	6063      	str	r3, [r4, #4]
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	d503      	bpl.n	80034a6 <setvbuf+0x6e>
 800349e:	6921      	ldr	r1, [r4, #16]
 80034a0:	0030      	movs	r0, r6
 80034a2:	f000 fb43 	bl	8003b2c <_free_r>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	4a36      	ldr	r2, [pc, #216]	; (8003584 <setvbuf+0x14c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	9b00      	ldr	r3, [sp, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d05a      	beq.n	800356a <setvbuf+0x132>
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	aa02      	add	r2, sp, #8
 80034b8:	0021      	movs	r1, r4
 80034ba:	0030      	movs	r0, r6
 80034bc:	f000 fac0 	bl	8003a40 <__swhatbuf_r>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	4318      	orrs	r0, r3
 80034c4:	81a0      	strh	r0, [r4, #12]
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	d124      	bne.n	8003514 <setvbuf+0xdc>
 80034ca:	9d02      	ldr	r5, [sp, #8]
 80034cc:	0028      	movs	r0, r5
 80034ce:	f000 fb23 	bl	8003b18 <malloc>
 80034d2:	9501      	str	r5, [sp, #4]
 80034d4:	1e07      	subs	r7, r0, #0
 80034d6:	d142      	bne.n	800355e <setvbuf+0x126>
 80034d8:	9b02      	ldr	r3, [sp, #8]
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	42ab      	cmp	r3, r5
 80034de:	d139      	bne.n	8003554 <setvbuf+0x11c>
 80034e0:	2001      	movs	r0, #1
 80034e2:	4240      	negs	r0, r0
 80034e4:	2302      	movs	r3, #2
 80034e6:	89a2      	ldrh	r2, [r4, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	2300      	movs	r3, #0
 80034ee:	60a3      	str	r3, [r4, #8]
 80034f0:	0023      	movs	r3, r4
 80034f2:	3347      	adds	r3, #71	; 0x47
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	6123      	str	r3, [r4, #16]
 80034f8:	2301      	movs	r3, #1
 80034fa:	6163      	str	r3, [r4, #20]
 80034fc:	b005      	add	sp, #20
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <setvbuf+0x150>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d101      	bne.n	800350a <setvbuf+0xd2>
 8003506:	68b4      	ldr	r4, [r6, #8]
 8003508:	e7aa      	b.n	8003460 <setvbuf+0x28>
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <setvbuf+0x154>)
 800350c:	429c      	cmp	r4, r3
 800350e:	d1a7      	bne.n	8003460 <setvbuf+0x28>
 8003510:	68f4      	ldr	r4, [r6, #12]
 8003512:	e7a5      	b.n	8003460 <setvbuf+0x28>
 8003514:	2f00      	cmp	r7, #0
 8003516:	d0d9      	beq.n	80034cc <setvbuf+0x94>
 8003518:	69b3      	ldr	r3, [r6, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <setvbuf+0xec>
 800351e:	0030      	movs	r0, r6
 8003520:	f000 f9fa 	bl	8003918 <__sinit>
 8003524:	9b00      	ldr	r3, [sp, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d103      	bne.n	8003532 <setvbuf+0xfa>
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	9a00      	ldr	r2, [sp, #0]
 800352e:	431a      	orrs	r2, r3
 8003530:	81a2      	strh	r2, [r4, #12]
 8003532:	2008      	movs	r0, #8
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	6027      	str	r7, [r4, #0]
 8003538:	6127      	str	r7, [r4, #16]
 800353a:	6165      	str	r5, [r4, #20]
 800353c:	4018      	ands	r0, r3
 800353e:	d018      	beq.n	8003572 <setvbuf+0x13a>
 8003540:	2001      	movs	r0, #1
 8003542:	4018      	ands	r0, r3
 8003544:	2300      	movs	r3, #0
 8003546:	4298      	cmp	r0, r3
 8003548:	d011      	beq.n	800356e <setvbuf+0x136>
 800354a:	426d      	negs	r5, r5
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	61a5      	str	r5, [r4, #24]
 8003550:	0018      	movs	r0, r3
 8003552:	e7d3      	b.n	80034fc <setvbuf+0xc4>
 8003554:	9801      	ldr	r0, [sp, #4]
 8003556:	f000 fadf 	bl	8003b18 <malloc>
 800355a:	1e07      	subs	r7, r0, #0
 800355c:	d0c0      	beq.n	80034e0 <setvbuf+0xa8>
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	89a2      	ldrh	r2, [r4, #12]
 8003562:	9d01      	ldr	r5, [sp, #4]
 8003564:	4313      	orrs	r3, r2
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	e7d6      	b.n	8003518 <setvbuf+0xe0>
 800356a:	2000      	movs	r0, #0
 800356c:	e7ba      	b.n	80034e4 <setvbuf+0xac>
 800356e:	60a5      	str	r5, [r4, #8]
 8003570:	e7c4      	b.n	80034fc <setvbuf+0xc4>
 8003572:	60a0      	str	r0, [r4, #8]
 8003574:	e7c2      	b.n	80034fc <setvbuf+0xc4>
 8003576:	2001      	movs	r0, #1
 8003578:	4240      	negs	r0, r0
 800357a:	e7bf      	b.n	80034fc <setvbuf+0xc4>
 800357c:	2000000c 	.word	0x2000000c
 8003580:	0800448c 	.word	0x0800448c
 8003584:	fffff35c 	.word	0xfffff35c
 8003588:	080044ac 	.word	0x080044ac
 800358c:	0800446c 	.word	0x0800446c

08003590 <__swbuf_r>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	0005      	movs	r5, r0
 8003594:	000e      	movs	r6, r1
 8003596:	0014      	movs	r4, r2
 8003598:	2800      	cmp	r0, #0
 800359a:	d004      	beq.n	80035a6 <__swbuf_r+0x16>
 800359c:	6983      	ldr	r3, [r0, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <__swbuf_r+0x16>
 80035a2:	f000 f9b9 	bl	8003918 <__sinit>
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <__swbuf_r+0xa0>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	d12d      	bne.n	8003608 <__swbuf_r+0x78>
 80035ac:	686c      	ldr	r4, [r5, #4]
 80035ae:	69a3      	ldr	r3, [r4, #24]
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	d531      	bpl.n	800361c <__swbuf_r+0x8c>
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02e      	beq.n	800361c <__swbuf_r+0x8c>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	b2f7      	uxtb	r7, r6
 80035c4:	1a98      	subs	r0, r3, r2
 80035c6:	6963      	ldr	r3, [r4, #20]
 80035c8:	b2f6      	uxtb	r6, r6
 80035ca:	4283      	cmp	r3, r0
 80035cc:	dc05      	bgt.n	80035da <__swbuf_r+0x4a>
 80035ce:	0021      	movs	r1, r4
 80035d0:	0028      	movs	r0, r5
 80035d2:	f000 f933 	bl	800383c <_fflush_r>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d126      	bne.n	8003628 <__swbuf_r+0x98>
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	3001      	adds	r0, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	6022      	str	r2, [r4, #0]
 80035e8:	701f      	strb	r7, [r3, #0]
 80035ea:	6963      	ldr	r3, [r4, #20]
 80035ec:	4283      	cmp	r3, r0
 80035ee:	d004      	beq.n	80035fa <__swbuf_r+0x6a>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	07db      	lsls	r3, r3, #31
 80035f4:	d51a      	bpl.n	800362c <__swbuf_r+0x9c>
 80035f6:	2e0a      	cmp	r6, #10
 80035f8:	d118      	bne.n	800362c <__swbuf_r+0x9c>
 80035fa:	0021      	movs	r1, r4
 80035fc:	0028      	movs	r0, r5
 80035fe:	f000 f91d 	bl	800383c <_fflush_r>
 8003602:	2800      	cmp	r0, #0
 8003604:	d012      	beq.n	800362c <__swbuf_r+0x9c>
 8003606:	e00f      	b.n	8003628 <__swbuf_r+0x98>
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <__swbuf_r+0xa4>)
 800360a:	429c      	cmp	r4, r3
 800360c:	d101      	bne.n	8003612 <__swbuf_r+0x82>
 800360e:	68ac      	ldr	r4, [r5, #8]
 8003610:	e7cd      	b.n	80035ae <__swbuf_r+0x1e>
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <__swbuf_r+0xa8>)
 8003614:	429c      	cmp	r4, r3
 8003616:	d1ca      	bne.n	80035ae <__swbuf_r+0x1e>
 8003618:	68ec      	ldr	r4, [r5, #12]
 800361a:	e7c8      	b.n	80035ae <__swbuf_r+0x1e>
 800361c:	0021      	movs	r1, r4
 800361e:	0028      	movs	r0, r5
 8003620:	f000 f80c 	bl	800363c <__swsetup_r>
 8003624:	2800      	cmp	r0, #0
 8003626:	d0ca      	beq.n	80035be <__swbuf_r+0x2e>
 8003628:	2601      	movs	r6, #1
 800362a:	4276      	negs	r6, r6
 800362c:	0030      	movs	r0, r6
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	0800448c 	.word	0x0800448c
 8003634:	080044ac 	.word	0x080044ac
 8003638:	0800446c 	.word	0x0800446c

0800363c <__swsetup_r>:
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <__swsetup_r+0xdc>)
 800363e:	b570      	push	{r4, r5, r6, lr}
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	0006      	movs	r6, r0
 8003644:	000c      	movs	r4, r1
 8003646:	2d00      	cmp	r5, #0
 8003648:	d005      	beq.n	8003656 <__swsetup_r+0x1a>
 800364a:	69ab      	ldr	r3, [r5, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <__swsetup_r+0x1a>
 8003650:	0028      	movs	r0, r5
 8003652:	f000 f961 	bl	8003918 <__sinit>
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <__swsetup_r+0xe0>)
 8003658:	429c      	cmp	r4, r3
 800365a:	d10f      	bne.n	800367c <__swsetup_r+0x40>
 800365c:	686c      	ldr	r4, [r5, #4]
 800365e:	230c      	movs	r3, #12
 8003660:	5ee2      	ldrsh	r2, [r4, r3]
 8003662:	b293      	uxth	r3, r2
 8003664:	0719      	lsls	r1, r3, #28
 8003666:	d42d      	bmi.n	80036c4 <__swsetup_r+0x88>
 8003668:	06d9      	lsls	r1, r3, #27
 800366a:	d411      	bmi.n	8003690 <__swsetup_r+0x54>
 800366c:	2309      	movs	r3, #9
 800366e:	2001      	movs	r0, #1
 8003670:	6033      	str	r3, [r6, #0]
 8003672:	3337      	adds	r3, #55	; 0x37
 8003674:	4313      	orrs	r3, r2
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	4240      	negs	r0, r0
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <__swsetup_r+0xe4>)
 800367e:	429c      	cmp	r4, r3
 8003680:	d101      	bne.n	8003686 <__swsetup_r+0x4a>
 8003682:	68ac      	ldr	r4, [r5, #8]
 8003684:	e7eb      	b.n	800365e <__swsetup_r+0x22>
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <__swsetup_r+0xe8>)
 8003688:	429c      	cmp	r4, r3
 800368a:	d1e8      	bne.n	800365e <__swsetup_r+0x22>
 800368c:	68ec      	ldr	r4, [r5, #12]
 800368e:	e7e6      	b.n	800365e <__swsetup_r+0x22>
 8003690:	075b      	lsls	r3, r3, #29
 8003692:	d513      	bpl.n	80036bc <__swsetup_r+0x80>
 8003694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003696:	2900      	cmp	r1, #0
 8003698:	d008      	beq.n	80036ac <__swsetup_r+0x70>
 800369a:	0023      	movs	r3, r4
 800369c:	3344      	adds	r3, #68	; 0x44
 800369e:	4299      	cmp	r1, r3
 80036a0:	d002      	beq.n	80036a8 <__swsetup_r+0x6c>
 80036a2:	0030      	movs	r0, r6
 80036a4:	f000 fa42 	bl	8003b2c <_free_r>
 80036a8:	2300      	movs	r3, #0
 80036aa:	6363      	str	r3, [r4, #52]	; 0x34
 80036ac:	2224      	movs	r2, #36	; 0x24
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	4393      	bics	r3, r2
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	2300      	movs	r3, #0
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	2308      	movs	r3, #8
 80036be:	89a2      	ldrh	r2, [r4, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <__swsetup_r+0xa6>
 80036ca:	21a0      	movs	r1, #160	; 0xa0
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	0089      	lsls	r1, r1, #2
 80036d2:	0092      	lsls	r2, r2, #2
 80036d4:	400b      	ands	r3, r1
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <__swsetup_r+0xa6>
 80036da:	0021      	movs	r1, r4
 80036dc:	0030      	movs	r0, r6
 80036de:	f000 f9d7 	bl	8003a90 <__smakebuf_r>
 80036e2:	2301      	movs	r3, #1
 80036e4:	89a2      	ldrh	r2, [r4, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	d011      	beq.n	800370e <__swsetup_r+0xd2>
 80036ea:	2300      	movs	r3, #0
 80036ec:	60a3      	str	r3, [r4, #8]
 80036ee:	6963      	ldr	r3, [r4, #20]
 80036f0:	425b      	negs	r3, r3
 80036f2:	61a3      	str	r3, [r4, #24]
 80036f4:	2000      	movs	r0, #0
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d1be      	bne.n	800367a <__swsetup_r+0x3e>
 80036fc:	230c      	movs	r3, #12
 80036fe:	5ee2      	ldrsh	r2, [r4, r3]
 8003700:	0613      	lsls	r3, r2, #24
 8003702:	d5ba      	bpl.n	800367a <__swsetup_r+0x3e>
 8003704:	2340      	movs	r3, #64	; 0x40
 8003706:	4313      	orrs	r3, r2
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	3801      	subs	r0, #1
 800370c:	e7b5      	b.n	800367a <__swsetup_r+0x3e>
 800370e:	0792      	lsls	r2, r2, #30
 8003710:	d400      	bmi.n	8003714 <__swsetup_r+0xd8>
 8003712:	6963      	ldr	r3, [r4, #20]
 8003714:	60a3      	str	r3, [r4, #8]
 8003716:	e7ed      	b.n	80036f4 <__swsetup_r+0xb8>
 8003718:	2000000c 	.word	0x2000000c
 800371c:	0800448c 	.word	0x0800448c
 8003720:	080044ac 	.word	0x080044ac
 8003724:	0800446c 	.word	0x0800446c

08003728 <__sflush_r>:
 8003728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372a:	898a      	ldrh	r2, [r1, #12]
 800372c:	0005      	movs	r5, r0
 800372e:	000c      	movs	r4, r1
 8003730:	0713      	lsls	r3, r2, #28
 8003732:	d460      	bmi.n	80037f6 <__sflush_r+0xce>
 8003734:	684b      	ldr	r3, [r1, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	dc04      	bgt.n	8003744 <__sflush_r+0x1c>
 800373a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	dc01      	bgt.n	8003744 <__sflush_r+0x1c>
 8003740:	2000      	movs	r0, #0
 8003742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003744:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003746:	2f00      	cmp	r7, #0
 8003748:	d0fa      	beq.n	8003740 <__sflush_r+0x18>
 800374a:	2300      	movs	r3, #0
 800374c:	682e      	ldr	r6, [r5, #0]
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	015b      	lsls	r3, r3, #5
 8003754:	6a21      	ldr	r1, [r4, #32]
 8003756:	401a      	ands	r2, r3
 8003758:	d034      	beq.n	80037c4 <__sflush_r+0x9c>
 800375a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	075b      	lsls	r3, r3, #29
 8003760:	d506      	bpl.n	8003770 <__sflush_r+0x48>
 8003762:	6863      	ldr	r3, [r4, #4]
 8003764:	1ac0      	subs	r0, r0, r3
 8003766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <__sflush_r+0x48>
 800376c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800376e:	1ac0      	subs	r0, r0, r3
 8003770:	0002      	movs	r2, r0
 8003772:	6a21      	ldr	r1, [r4, #32]
 8003774:	2300      	movs	r3, #0
 8003776:	0028      	movs	r0, r5
 8003778:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800377a:	47b8      	blx	r7
 800377c:	89a1      	ldrh	r1, [r4, #12]
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d106      	bne.n	8003790 <__sflush_r+0x68>
 8003782:	682b      	ldr	r3, [r5, #0]
 8003784:	2b1d      	cmp	r3, #29
 8003786:	d830      	bhi.n	80037ea <__sflush_r+0xc2>
 8003788:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <__sflush_r+0x110>)
 800378a:	40da      	lsrs	r2, r3
 800378c:	07d3      	lsls	r3, r2, #31
 800378e:	d52c      	bpl.n	80037ea <__sflush_r+0xc2>
 8003790:	2300      	movs	r3, #0
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	04cb      	lsls	r3, r1, #19
 800379a:	d505      	bpl.n	80037a8 <__sflush_r+0x80>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <__sflush_r+0x7e>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <__sflush_r+0x80>
 80037a6:	6560      	str	r0, [r4, #84]	; 0x54
 80037a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037aa:	602e      	str	r6, [r5, #0]
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d0c7      	beq.n	8003740 <__sflush_r+0x18>
 80037b0:	0023      	movs	r3, r4
 80037b2:	3344      	adds	r3, #68	; 0x44
 80037b4:	4299      	cmp	r1, r3
 80037b6:	d002      	beq.n	80037be <__sflush_r+0x96>
 80037b8:	0028      	movs	r0, r5
 80037ba:	f000 f9b7 	bl	8003b2c <_free_r>
 80037be:	2000      	movs	r0, #0
 80037c0:	6360      	str	r0, [r4, #52]	; 0x34
 80037c2:	e7be      	b.n	8003742 <__sflush_r+0x1a>
 80037c4:	2301      	movs	r3, #1
 80037c6:	0028      	movs	r0, r5
 80037c8:	47b8      	blx	r7
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	d1c6      	bne.n	800375c <__sflush_r+0x34>
 80037ce:	682b      	ldr	r3, [r5, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0c3      	beq.n	800375c <__sflush_r+0x34>
 80037d4:	2b1d      	cmp	r3, #29
 80037d6:	d001      	beq.n	80037dc <__sflush_r+0xb4>
 80037d8:	2b16      	cmp	r3, #22
 80037da:	d101      	bne.n	80037e0 <__sflush_r+0xb8>
 80037dc:	602e      	str	r6, [r5, #0]
 80037de:	e7af      	b.n	8003740 <__sflush_r+0x18>
 80037e0:	2340      	movs	r3, #64	; 0x40
 80037e2:	89a2      	ldrh	r2, [r4, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	e7ab      	b.n	8003742 <__sflush_r+0x1a>
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	430b      	orrs	r3, r1
 80037ee:	2001      	movs	r0, #1
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	4240      	negs	r0, r0
 80037f4:	e7a5      	b.n	8003742 <__sflush_r+0x1a>
 80037f6:	690f      	ldr	r7, [r1, #16]
 80037f8:	2f00      	cmp	r7, #0
 80037fa:	d0a1      	beq.n	8003740 <__sflush_r+0x18>
 80037fc:	680b      	ldr	r3, [r1, #0]
 80037fe:	600f      	str	r7, [r1, #0]
 8003800:	1bdb      	subs	r3, r3, r7
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2300      	movs	r3, #0
 8003806:	0792      	lsls	r2, r2, #30
 8003808:	d100      	bne.n	800380c <__sflush_r+0xe4>
 800380a:	694b      	ldr	r3, [r1, #20]
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	9b01      	ldr	r3, [sp, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dc00      	bgt.n	8003816 <__sflush_r+0xee>
 8003814:	e794      	b.n	8003740 <__sflush_r+0x18>
 8003816:	9b01      	ldr	r3, [sp, #4]
 8003818:	003a      	movs	r2, r7
 800381a:	6a21      	ldr	r1, [r4, #32]
 800381c:	0028      	movs	r0, r5
 800381e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003820:	47b0      	blx	r6
 8003822:	2800      	cmp	r0, #0
 8003824:	dc03      	bgt.n	800382e <__sflush_r+0x106>
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	89a2      	ldrh	r2, [r4, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	e7df      	b.n	80037ee <__sflush_r+0xc6>
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	183f      	adds	r7, r7, r0
 8003832:	1a1b      	subs	r3, r3, r0
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	e7ea      	b.n	800380e <__sflush_r+0xe6>
 8003838:	20400001 	.word	0x20400001

0800383c <_fflush_r>:
 800383c:	690b      	ldr	r3, [r1, #16]
 800383e:	b570      	push	{r4, r5, r6, lr}
 8003840:	0005      	movs	r5, r0
 8003842:	000c      	movs	r4, r1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <_fflush_r+0x10>
 8003848:	2000      	movs	r0, #0
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	2800      	cmp	r0, #0
 800384e:	d004      	beq.n	800385a <_fflush_r+0x1e>
 8003850:	6983      	ldr	r3, [r0, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <_fflush_r+0x1e>
 8003856:	f000 f85f 	bl	8003918 <__sinit>
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <_fflush_r+0x4c>)
 800385c:	429c      	cmp	r4, r3
 800385e:	d109      	bne.n	8003874 <_fflush_r+0x38>
 8003860:	686c      	ldr	r4, [r5, #4]
 8003862:	220c      	movs	r2, #12
 8003864:	5ea3      	ldrsh	r3, [r4, r2]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <_fflush_r+0xc>
 800386a:	0021      	movs	r1, r4
 800386c:	0028      	movs	r0, r5
 800386e:	f7ff ff5b 	bl	8003728 <__sflush_r>
 8003872:	e7ea      	b.n	800384a <_fflush_r+0xe>
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <_fflush_r+0x50>)
 8003876:	429c      	cmp	r4, r3
 8003878:	d101      	bne.n	800387e <_fflush_r+0x42>
 800387a:	68ac      	ldr	r4, [r5, #8]
 800387c:	e7f1      	b.n	8003862 <_fflush_r+0x26>
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <_fflush_r+0x54>)
 8003880:	429c      	cmp	r4, r3
 8003882:	d1ee      	bne.n	8003862 <_fflush_r+0x26>
 8003884:	68ec      	ldr	r4, [r5, #12]
 8003886:	e7ec      	b.n	8003862 <_fflush_r+0x26>
 8003888:	0800448c 	.word	0x0800448c
 800388c:	080044ac 	.word	0x080044ac
 8003890:	0800446c 	.word	0x0800446c

08003894 <std>:
 8003894:	2300      	movs	r3, #0
 8003896:	b510      	push	{r4, lr}
 8003898:	0004      	movs	r4, r0
 800389a:	6003      	str	r3, [r0, #0]
 800389c:	6043      	str	r3, [r0, #4]
 800389e:	6083      	str	r3, [r0, #8]
 80038a0:	8181      	strh	r1, [r0, #12]
 80038a2:	6643      	str	r3, [r0, #100]	; 0x64
 80038a4:	81c2      	strh	r2, [r0, #14]
 80038a6:	6103      	str	r3, [r0, #16]
 80038a8:	6143      	str	r3, [r0, #20]
 80038aa:	6183      	str	r3, [r0, #24]
 80038ac:	0019      	movs	r1, r3
 80038ae:	2208      	movs	r2, #8
 80038b0:	305c      	adds	r0, #92	; 0x5c
 80038b2:	f7ff fd35 	bl	8003320 <memset>
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <std+0x38>)
 80038b8:	6224      	str	r4, [r4, #32]
 80038ba:	6263      	str	r3, [r4, #36]	; 0x24
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <std+0x3c>)
 80038be:	62a3      	str	r3, [r4, #40]	; 0x28
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <std+0x40>)
 80038c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <std+0x44>)
 80038c6:	6323      	str	r3, [r4, #48]	; 0x30
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	08004209 	.word	0x08004209
 80038d0:	08004231 	.word	0x08004231
 80038d4:	08004269 	.word	0x08004269
 80038d8:	08004295 	.word	0x08004295

080038dc <_cleanup_r>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	4902      	ldr	r1, [pc, #8]	; (80038e8 <_cleanup_r+0xc>)
 80038e0:	f000 f88c 	bl	80039fc <_fwalk_reent>
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	0800383d 	.word	0x0800383d

080038ec <__sfmoreglue>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	2568      	movs	r5, #104	; 0x68
 80038f0:	1e4a      	subs	r2, r1, #1
 80038f2:	4355      	muls	r5, r2
 80038f4:	000e      	movs	r6, r1
 80038f6:	0029      	movs	r1, r5
 80038f8:	3174      	adds	r1, #116	; 0x74
 80038fa:	f000 f961 	bl	8003bc0 <_malloc_r>
 80038fe:	1e04      	subs	r4, r0, #0
 8003900:	d008      	beq.n	8003914 <__sfmoreglue+0x28>
 8003902:	2100      	movs	r1, #0
 8003904:	002a      	movs	r2, r5
 8003906:	6001      	str	r1, [r0, #0]
 8003908:	6046      	str	r6, [r0, #4]
 800390a:	300c      	adds	r0, #12
 800390c:	60a0      	str	r0, [r4, #8]
 800390e:	3268      	adds	r2, #104	; 0x68
 8003910:	f7ff fd06 	bl	8003320 <memset>
 8003914:	0020      	movs	r0, r4
 8003916:	bd70      	pop	{r4, r5, r6, pc}

08003918 <__sinit>:
 8003918:	6983      	ldr	r3, [r0, #24]
 800391a:	b513      	push	{r0, r1, r4, lr}
 800391c:	0004      	movs	r4, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d128      	bne.n	8003974 <__sinit+0x5c>
 8003922:	6483      	str	r3, [r0, #72]	; 0x48
 8003924:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003926:	6503      	str	r3, [r0, #80]	; 0x50
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <__sinit+0x60>)
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <__sinit+0x64>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6282      	str	r2, [r0, #40]	; 0x28
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	4298      	cmp	r0, r3
 8003934:	d101      	bne.n	800393a <__sinit+0x22>
 8003936:	2301      	movs	r3, #1
 8003938:	6183      	str	r3, [r0, #24]
 800393a:	0020      	movs	r0, r4
 800393c:	f000 f820 	bl	8003980 <__sfp>
 8003940:	6060      	str	r0, [r4, #4]
 8003942:	0020      	movs	r0, r4
 8003944:	f000 f81c 	bl	8003980 <__sfp>
 8003948:	60a0      	str	r0, [r4, #8]
 800394a:	0020      	movs	r0, r4
 800394c:	f000 f818 	bl	8003980 <__sfp>
 8003950:	2200      	movs	r2, #0
 8003952:	60e0      	str	r0, [r4, #12]
 8003954:	2104      	movs	r1, #4
 8003956:	6860      	ldr	r0, [r4, #4]
 8003958:	f7ff ff9c 	bl	8003894 <std>
 800395c:	2201      	movs	r2, #1
 800395e:	2109      	movs	r1, #9
 8003960:	68a0      	ldr	r0, [r4, #8]
 8003962:	f7ff ff97 	bl	8003894 <std>
 8003966:	2202      	movs	r2, #2
 8003968:	2112      	movs	r1, #18
 800396a:	68e0      	ldr	r0, [r4, #12]
 800396c:	f7ff ff92 	bl	8003894 <std>
 8003970:	2301      	movs	r3, #1
 8003972:	61a3      	str	r3, [r4, #24]
 8003974:	bd13      	pop	{r0, r1, r4, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	08004468 	.word	0x08004468
 800397c:	080038dd 	.word	0x080038dd

08003980 <__sfp>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <__sfp+0x74>)
 8003984:	0007      	movs	r7, r0
 8003986:	681e      	ldr	r6, [r3, #0]
 8003988:	69b3      	ldr	r3, [r6, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <__sfp+0x14>
 800398e:	0030      	movs	r0, r6
 8003990:	f7ff ffc2 	bl	8003918 <__sinit>
 8003994:	3648      	adds	r6, #72	; 0x48
 8003996:	68b4      	ldr	r4, [r6, #8]
 8003998:	6873      	ldr	r3, [r6, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	d504      	bpl.n	80039a8 <__sfp+0x28>
 800399e:	6833      	ldr	r3, [r6, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <__sfp+0x34>
 80039a4:	6836      	ldr	r6, [r6, #0]
 80039a6:	e7f6      	b.n	8003996 <__sfp+0x16>
 80039a8:	220c      	movs	r2, #12
 80039aa:	5ea5      	ldrsh	r5, [r4, r2]
 80039ac:	2d00      	cmp	r5, #0
 80039ae:	d00d      	beq.n	80039cc <__sfp+0x4c>
 80039b0:	3468      	adds	r4, #104	; 0x68
 80039b2:	e7f2      	b.n	800399a <__sfp+0x1a>
 80039b4:	2104      	movs	r1, #4
 80039b6:	0038      	movs	r0, r7
 80039b8:	f7ff ff98 	bl	80038ec <__sfmoreglue>
 80039bc:	6030      	str	r0, [r6, #0]
 80039be:	2800      	cmp	r0, #0
 80039c0:	d1f0      	bne.n	80039a4 <__sfp+0x24>
 80039c2:	230c      	movs	r3, #12
 80039c4:	0004      	movs	r4, r0
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	0020      	movs	r0, r4
 80039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039cc:	0020      	movs	r0, r4
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <__sfp+0x78>)
 80039d0:	6665      	str	r5, [r4, #100]	; 0x64
 80039d2:	6025      	str	r5, [r4, #0]
 80039d4:	6065      	str	r5, [r4, #4]
 80039d6:	60a5      	str	r5, [r4, #8]
 80039d8:	60e3      	str	r3, [r4, #12]
 80039da:	6125      	str	r5, [r4, #16]
 80039dc:	6165      	str	r5, [r4, #20]
 80039de:	61a5      	str	r5, [r4, #24]
 80039e0:	2208      	movs	r2, #8
 80039e2:	0029      	movs	r1, r5
 80039e4:	305c      	adds	r0, #92	; 0x5c
 80039e6:	f7ff fc9b 	bl	8003320 <memset>
 80039ea:	6365      	str	r5, [r4, #52]	; 0x34
 80039ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80039ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80039f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80039f2:	e7e9      	b.n	80039c8 <__sfp+0x48>
 80039f4:	08004468 	.word	0x08004468
 80039f8:	ffff0001 	.word	0xffff0001

080039fc <_fwalk_reent>:
 80039fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039fe:	0004      	movs	r4, r0
 8003a00:	0007      	movs	r7, r0
 8003a02:	2600      	movs	r6, #0
 8003a04:	9101      	str	r1, [sp, #4]
 8003a06:	3448      	adds	r4, #72	; 0x48
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	d101      	bne.n	8003a10 <_fwalk_reent+0x14>
 8003a0c:	0030      	movs	r0, r6
 8003a0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	68a5      	ldr	r5, [r4, #8]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	9b00      	ldr	r3, [sp, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	d501      	bpl.n	8003a22 <_fwalk_reent+0x26>
 8003a1e:	6824      	ldr	r4, [r4, #0]
 8003a20:	e7f2      	b.n	8003a08 <_fwalk_reent+0xc>
 8003a22:	89ab      	ldrh	r3, [r5, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d908      	bls.n	8003a3a <_fwalk_reent+0x3e>
 8003a28:	220e      	movs	r2, #14
 8003a2a:	5eab      	ldrsh	r3, [r5, r2]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d004      	beq.n	8003a3a <_fwalk_reent+0x3e>
 8003a30:	0029      	movs	r1, r5
 8003a32:	0038      	movs	r0, r7
 8003a34:	9b01      	ldr	r3, [sp, #4]
 8003a36:	4798      	blx	r3
 8003a38:	4306      	orrs	r6, r0
 8003a3a:	3568      	adds	r5, #104	; 0x68
 8003a3c:	e7eb      	b.n	8003a16 <_fwalk_reent+0x1a>
	...

08003a40 <__swhatbuf_r>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	000e      	movs	r6, r1
 8003a44:	001d      	movs	r5, r3
 8003a46:	230e      	movs	r3, #14
 8003a48:	5ec9      	ldrsh	r1, [r1, r3]
 8003a4a:	b096      	sub	sp, #88	; 0x58
 8003a4c:	0014      	movs	r4, r2
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	da07      	bge.n	8003a62 <__swhatbuf_r+0x22>
 8003a52:	2300      	movs	r3, #0
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	89b3      	ldrh	r3, [r6, #12]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	d411      	bmi.n	8003a80 <__swhatbuf_r+0x40>
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	e00f      	b.n	8003a82 <__swhatbuf_r+0x42>
 8003a62:	466a      	mov	r2, sp
 8003a64:	f000 fc42 	bl	80042ec <_fstat_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	dbf2      	blt.n	8003a52 <__swhatbuf_r+0x12>
 8003a6c:	22f0      	movs	r2, #240	; 0xf0
 8003a6e:	9b01      	ldr	r3, [sp, #4]
 8003a70:	0212      	lsls	r2, r2, #8
 8003a72:	4013      	ands	r3, r2
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <__swhatbuf_r+0x4c>)
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	425a      	negs	r2, r3
 8003a7a:	4153      	adcs	r3, r2
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	e7ed      	b.n	8003a5c <__swhatbuf_r+0x1c>
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	2000      	movs	r0, #0
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	b016      	add	sp, #88	; 0x58
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	ffffe000 	.word	0xffffe000

08003a90 <__smakebuf_r>:
 8003a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a92:	2602      	movs	r6, #2
 8003a94:	898b      	ldrh	r3, [r1, #12]
 8003a96:	0005      	movs	r5, r0
 8003a98:	000c      	movs	r4, r1
 8003a9a:	4233      	tst	r3, r6
 8003a9c:	d006      	beq.n	8003aac <__smakebuf_r+0x1c>
 8003a9e:	0023      	movs	r3, r4
 8003aa0:	3347      	adds	r3, #71	; 0x47
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	6123      	str	r3, [r4, #16]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	6163      	str	r3, [r4, #20]
 8003aaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003aac:	ab01      	add	r3, sp, #4
 8003aae:	466a      	mov	r2, sp
 8003ab0:	f7ff ffc6 	bl	8003a40 <__swhatbuf_r>
 8003ab4:	9900      	ldr	r1, [sp, #0]
 8003ab6:	0007      	movs	r7, r0
 8003ab8:	0028      	movs	r0, r5
 8003aba:	f000 f881 	bl	8003bc0 <_malloc_r>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d108      	bne.n	8003ad4 <__smakebuf_r+0x44>
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	5ea3      	ldrsh	r3, [r4, r2]
 8003ac6:	059a      	lsls	r2, r3, #22
 8003ac8:	d4ef      	bmi.n	8003aaa <__smakebuf_r+0x1a>
 8003aca:	2203      	movs	r2, #3
 8003acc:	4393      	bics	r3, r2
 8003ace:	431e      	orrs	r6, r3
 8003ad0:	81a6      	strh	r6, [r4, #12]
 8003ad2:	e7e4      	b.n	8003a9e <__smakebuf_r+0xe>
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <__smakebuf_r+0x84>)
 8003ad6:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	89a2      	ldrh	r2, [r4, #12]
 8003adc:	6020      	str	r0, [r4, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	9b00      	ldr	r3, [sp, #0]
 8003ae4:	6120      	str	r0, [r4, #16]
 8003ae6:	6163      	str	r3, [r4, #20]
 8003ae8:	9b01      	ldr	r3, [sp, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <__smakebuf_r+0x7a>
 8003aee:	230e      	movs	r3, #14
 8003af0:	5ee1      	ldrsh	r1, [r4, r3]
 8003af2:	0028      	movs	r0, r5
 8003af4:	f000 fc0c 	bl	8004310 <_isatty_r>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d006      	beq.n	8003b0a <__smakebuf_r+0x7a>
 8003afc:	2203      	movs	r2, #3
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	4393      	bics	r3, r2
 8003b02:	001a      	movs	r2, r3
 8003b04:	2301      	movs	r3, #1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	89a0      	ldrh	r0, [r4, #12]
 8003b0c:	4338      	orrs	r0, r7
 8003b0e:	81a0      	strh	r0, [r4, #12]
 8003b10:	e7cb      	b.n	8003aaa <__smakebuf_r+0x1a>
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	080038dd 	.word	0x080038dd

08003b18 <malloc>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <malloc+0x10>)
 8003b1c:	0001      	movs	r1, r0
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	f000 f84e 	bl	8003bc0 <_malloc_r>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <_free_r>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	0005      	movs	r5, r0
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d010      	beq.n	8003b56 <_free_r+0x2a>
 8003b34:	1f0c      	subs	r4, r1, #4
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da00      	bge.n	8003b3e <_free_r+0x12>
 8003b3c:	18e4      	adds	r4, r4, r3
 8003b3e:	0028      	movs	r0, r5
 8003b40:	f000 fc17 	bl	8004372 <__malloc_lock>
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <_free_r+0x90>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <_free_r+0x2c>
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	6014      	str	r4, [r2, #0]
 8003b50:	0028      	movs	r0, r5
 8003b52:	f000 fc0f 	bl	8004374 <__malloc_unlock>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	42a3      	cmp	r3, r4
 8003b5a:	d909      	bls.n	8003b70 <_free_r+0x44>
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	1860      	adds	r0, r4, r1
 8003b60:	4283      	cmp	r3, r0
 8003b62:	d1f3      	bne.n	8003b4c <_free_r+0x20>
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	1841      	adds	r1, r0, r1
 8003b6a:	6021      	str	r1, [r4, #0]
 8003b6c:	e7ee      	b.n	8003b4c <_free_r+0x20>
 8003b6e:	0013      	movs	r3, r2
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d001      	beq.n	8003b7a <_free_r+0x4e>
 8003b76:	42a2      	cmp	r2, r4
 8003b78:	d9f9      	bls.n	8003b6e <_free_r+0x42>
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	1858      	adds	r0, r3, r1
 8003b7e:	42a0      	cmp	r0, r4
 8003b80:	d10b      	bne.n	8003b9a <_free_r+0x6e>
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	1809      	adds	r1, r1, r0
 8003b86:	1858      	adds	r0, r3, r1
 8003b88:	6019      	str	r1, [r3, #0]
 8003b8a:	4282      	cmp	r2, r0
 8003b8c:	d1e0      	bne.n	8003b50 <_free_r+0x24>
 8003b8e:	6810      	ldr	r0, [r2, #0]
 8003b90:	6852      	ldr	r2, [r2, #4]
 8003b92:	1841      	adds	r1, r0, r1
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	e7da      	b.n	8003b50 <_free_r+0x24>
 8003b9a:	42a0      	cmp	r0, r4
 8003b9c:	d902      	bls.n	8003ba4 <_free_r+0x78>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	602b      	str	r3, [r5, #0]
 8003ba2:	e7d5      	b.n	8003b50 <_free_r+0x24>
 8003ba4:	6821      	ldr	r1, [r4, #0]
 8003ba6:	1860      	adds	r0, r4, r1
 8003ba8:	4282      	cmp	r2, r0
 8003baa:	d103      	bne.n	8003bb4 <_free_r+0x88>
 8003bac:	6810      	ldr	r0, [r2, #0]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	1841      	adds	r1, r0, r1
 8003bb2:	6021      	str	r1, [r4, #0]
 8003bb4:	6062      	str	r2, [r4, #4]
 8003bb6:	605c      	str	r4, [r3, #4]
 8003bb8:	e7ca      	b.n	8003b50 <_free_r+0x24>
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000120 	.word	0x20000120

08003bc0 <_malloc_r>:
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	1ccd      	adds	r5, r1, #3
 8003bc6:	439d      	bics	r5, r3
 8003bc8:	3508      	adds	r5, #8
 8003bca:	0006      	movs	r6, r0
 8003bcc:	2d0c      	cmp	r5, #12
 8003bce:	d21e      	bcs.n	8003c0e <_malloc_r+0x4e>
 8003bd0:	250c      	movs	r5, #12
 8003bd2:	42a9      	cmp	r1, r5
 8003bd4:	d81d      	bhi.n	8003c12 <_malloc_r+0x52>
 8003bd6:	0030      	movs	r0, r6
 8003bd8:	f000 fbcb 	bl	8004372 <__malloc_lock>
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <_malloc_r+0xb4>)
 8003bde:	6814      	ldr	r4, [r2, #0]
 8003be0:	0021      	movs	r1, r4
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d119      	bne.n	8003c1a <_malloc_r+0x5a>
 8003be6:	4c24      	ldr	r4, [pc, #144]	; (8003c78 <_malloc_r+0xb8>)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <_malloc_r+0x36>
 8003bee:	0030      	movs	r0, r6
 8003bf0:	f000 faf8 	bl	80041e4 <_sbrk_r>
 8003bf4:	6020      	str	r0, [r4, #0]
 8003bf6:	0029      	movs	r1, r5
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f000 faf3 	bl	80041e4 <_sbrk_r>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	d12b      	bne.n	8003c5a <_malloc_r+0x9a>
 8003c02:	230c      	movs	r3, #12
 8003c04:	0030      	movs	r0, r6
 8003c06:	6033      	str	r3, [r6, #0]
 8003c08:	f000 fbb4 	bl	8004374 <__malloc_unlock>
 8003c0c:	e003      	b.n	8003c16 <_malloc_r+0x56>
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	dadf      	bge.n	8003bd2 <_malloc_r+0x12>
 8003c12:	230c      	movs	r3, #12
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	2000      	movs	r0, #0
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	680b      	ldr	r3, [r1, #0]
 8003c1c:	1b5b      	subs	r3, r3, r5
 8003c1e:	d419      	bmi.n	8003c54 <_malloc_r+0x94>
 8003c20:	2b0b      	cmp	r3, #11
 8003c22:	d903      	bls.n	8003c2c <_malloc_r+0x6c>
 8003c24:	600b      	str	r3, [r1, #0]
 8003c26:	18cc      	adds	r4, r1, r3
 8003c28:	6025      	str	r5, [r4, #0]
 8003c2a:	e003      	b.n	8003c34 <_malloc_r+0x74>
 8003c2c:	684b      	ldr	r3, [r1, #4]
 8003c2e:	428c      	cmp	r4, r1
 8003c30:	d10d      	bne.n	8003c4e <_malloc_r+0x8e>
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	0030      	movs	r0, r6
 8003c36:	f000 fb9d 	bl	8004374 <__malloc_unlock>
 8003c3a:	0020      	movs	r0, r4
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	300b      	adds	r0, #11
 8003c40:	1d23      	adds	r3, r4, #4
 8003c42:	4390      	bics	r0, r2
 8003c44:	1ac3      	subs	r3, r0, r3
 8003c46:	d0e7      	beq.n	8003c18 <_malloc_r+0x58>
 8003c48:	425a      	negs	r2, r3
 8003c4a:	50e2      	str	r2, [r4, r3]
 8003c4c:	e7e4      	b.n	8003c18 <_malloc_r+0x58>
 8003c4e:	6063      	str	r3, [r4, #4]
 8003c50:	000c      	movs	r4, r1
 8003c52:	e7ef      	b.n	8003c34 <_malloc_r+0x74>
 8003c54:	000c      	movs	r4, r1
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	e7c3      	b.n	8003be2 <_malloc_r+0x22>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	1cc4      	adds	r4, r0, #3
 8003c5e:	439c      	bics	r4, r3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d0e1      	beq.n	8003c28 <_malloc_r+0x68>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	0030      	movs	r0, r6
 8003c68:	f000 fabc 	bl	80041e4 <_sbrk_r>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d1db      	bne.n	8003c28 <_malloc_r+0x68>
 8003c70:	e7c7      	b.n	8003c02 <_malloc_r+0x42>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000120 	.word	0x20000120
 8003c78:	20000124 	.word	0x20000124

08003c7c <__sfputc_r>:
 8003c7c:	6893      	ldr	r3, [r2, #8]
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	3b01      	subs	r3, #1
 8003c82:	6093      	str	r3, [r2, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da04      	bge.n	8003c92 <__sfputc_r+0x16>
 8003c88:	6994      	ldr	r4, [r2, #24]
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	db07      	blt.n	8003c9e <__sfputc_r+0x22>
 8003c8e:	290a      	cmp	r1, #10
 8003c90:	d005      	beq.n	8003c9e <__sfputc_r+0x22>
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	1c58      	adds	r0, r3, #1
 8003c96:	6010      	str	r0, [r2, #0]
 8003c98:	7019      	strb	r1, [r3, #0]
 8003c9a:	0008      	movs	r0, r1
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	f7ff fc77 	bl	8003590 <__swbuf_r>
 8003ca2:	0001      	movs	r1, r0
 8003ca4:	e7f9      	b.n	8003c9a <__sfputc_r+0x1e>

08003ca6 <__sfputs_r>:
 8003ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca8:	0006      	movs	r6, r0
 8003caa:	000f      	movs	r7, r1
 8003cac:	0014      	movs	r4, r2
 8003cae:	18d5      	adds	r5, r2, r3
 8003cb0:	42ac      	cmp	r4, r5
 8003cb2:	d101      	bne.n	8003cb8 <__sfputs_r+0x12>
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	e007      	b.n	8003cc8 <__sfputs_r+0x22>
 8003cb8:	7821      	ldrb	r1, [r4, #0]
 8003cba:	003a      	movs	r2, r7
 8003cbc:	0030      	movs	r0, r6
 8003cbe:	f7ff ffdd 	bl	8003c7c <__sfputc_r>
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d1f3      	bne.n	8003cb0 <__sfputs_r+0xa>
 8003cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ccc <_vfiprintf_r>:
 8003ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cce:	b0a1      	sub	sp, #132	; 0x84
 8003cd0:	9003      	str	r0, [sp, #12]
 8003cd2:	000f      	movs	r7, r1
 8003cd4:	0016      	movs	r6, r2
 8003cd6:	001d      	movs	r5, r3
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d005      	beq.n	8003ce8 <_vfiprintf_r+0x1c>
 8003cdc:	6983      	ldr	r3, [r0, #24]
 8003cde:	9305      	str	r3, [sp, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <_vfiprintf_r+0x1c>
 8003ce4:	f7ff fe18 	bl	8003918 <__sinit>
 8003ce8:	4b7b      	ldr	r3, [pc, #492]	; (8003ed8 <_vfiprintf_r+0x20c>)
 8003cea:	429f      	cmp	r7, r3
 8003cec:	d15c      	bne.n	8003da8 <_vfiprintf_r+0xdc>
 8003cee:	9b03      	ldr	r3, [sp, #12]
 8003cf0:	685f      	ldr	r7, [r3, #4]
 8003cf2:	89bb      	ldrh	r3, [r7, #12]
 8003cf4:	071b      	lsls	r3, r3, #28
 8003cf6:	d563      	bpl.n	8003dc0 <_vfiprintf_r+0xf4>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d060      	beq.n	8003dc0 <_vfiprintf_r+0xf4>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	ac08      	add	r4, sp, #32
 8003d02:	6163      	str	r3, [r4, #20]
 8003d04:	3320      	adds	r3, #32
 8003d06:	7663      	strb	r3, [r4, #25]
 8003d08:	3310      	adds	r3, #16
 8003d0a:	76a3      	strb	r3, [r4, #26]
 8003d0c:	9507      	str	r5, [sp, #28]
 8003d0e:	0035      	movs	r5, r6
 8003d10:	782b      	ldrb	r3, [r5, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <_vfiprintf_r+0x4e>
 8003d16:	2b25      	cmp	r3, #37	; 0x25
 8003d18:	d15c      	bne.n	8003dd4 <_vfiprintf_r+0x108>
 8003d1a:	1bab      	subs	r3, r5, r6
 8003d1c:	9305      	str	r3, [sp, #20]
 8003d1e:	d00c      	beq.n	8003d3a <_vfiprintf_r+0x6e>
 8003d20:	0032      	movs	r2, r6
 8003d22:	0039      	movs	r1, r7
 8003d24:	9803      	ldr	r0, [sp, #12]
 8003d26:	f7ff ffbe 	bl	8003ca6 <__sfputs_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d100      	bne.n	8003d30 <_vfiprintf_r+0x64>
 8003d2e:	e0c4      	b.n	8003eba <_vfiprintf_r+0x1ee>
 8003d30:	6962      	ldr	r2, [r4, #20]
 8003d32:	9b05      	ldr	r3, [sp, #20]
 8003d34:	4694      	mov	ip, r2
 8003d36:	4463      	add	r3, ip
 8003d38:	6163      	str	r3, [r4, #20]
 8003d3a:	782b      	ldrb	r3, [r5, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <_vfiprintf_r+0x76>
 8003d40:	e0bb      	b.n	8003eba <_vfiprintf_r+0x1ee>
 8003d42:	2201      	movs	r2, #1
 8003d44:	2300      	movs	r3, #0
 8003d46:	4252      	negs	r2, r2
 8003d48:	6062      	str	r2, [r4, #4]
 8003d4a:	a904      	add	r1, sp, #16
 8003d4c:	3254      	adds	r2, #84	; 0x54
 8003d4e:	1852      	adds	r2, r2, r1
 8003d50:	1c6e      	adds	r6, r5, #1
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	60e3      	str	r3, [r4, #12]
 8003d56:	60a3      	str	r3, [r4, #8]
 8003d58:	7013      	strb	r3, [r2, #0]
 8003d5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d5c:	7831      	ldrb	r1, [r6, #0]
 8003d5e:	2205      	movs	r2, #5
 8003d60:	485e      	ldr	r0, [pc, #376]	; (8003edc <_vfiprintf_r+0x210>)
 8003d62:	f000 fafb 	bl	800435c <memchr>
 8003d66:	1c75      	adds	r5, r6, #1
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d135      	bne.n	8003dd8 <_vfiprintf_r+0x10c>
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	06d3      	lsls	r3, r2, #27
 8003d70:	d504      	bpl.n	8003d7c <_vfiprintf_r+0xb0>
 8003d72:	2353      	movs	r3, #83	; 0x53
 8003d74:	a904      	add	r1, sp, #16
 8003d76:	185b      	adds	r3, r3, r1
 8003d78:	2120      	movs	r1, #32
 8003d7a:	7019      	strb	r1, [r3, #0]
 8003d7c:	0713      	lsls	r3, r2, #28
 8003d7e:	d504      	bpl.n	8003d8a <_vfiprintf_r+0xbe>
 8003d80:	2353      	movs	r3, #83	; 0x53
 8003d82:	a904      	add	r1, sp, #16
 8003d84:	185b      	adds	r3, r3, r1
 8003d86:	212b      	movs	r1, #43	; 0x2b
 8003d88:	7019      	strb	r1, [r3, #0]
 8003d8a:	7833      	ldrb	r3, [r6, #0]
 8003d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8e:	d02c      	beq.n	8003dea <_vfiprintf_r+0x11e>
 8003d90:	0035      	movs	r5, r6
 8003d92:	2100      	movs	r1, #0
 8003d94:	200a      	movs	r0, #10
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	782a      	ldrb	r2, [r5, #0]
 8003d9a:	1c6e      	adds	r6, r5, #1
 8003d9c:	3a30      	subs	r2, #48	; 0x30
 8003d9e:	2a09      	cmp	r2, #9
 8003da0:	d964      	bls.n	8003e6c <_vfiprintf_r+0x1a0>
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d02e      	beq.n	8003e04 <_vfiprintf_r+0x138>
 8003da6:	e026      	b.n	8003df6 <_vfiprintf_r+0x12a>
 8003da8:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <_vfiprintf_r+0x214>)
 8003daa:	429f      	cmp	r7, r3
 8003dac:	d102      	bne.n	8003db4 <_vfiprintf_r+0xe8>
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	689f      	ldr	r7, [r3, #8]
 8003db2:	e79e      	b.n	8003cf2 <_vfiprintf_r+0x26>
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <_vfiprintf_r+0x218>)
 8003db6:	429f      	cmp	r7, r3
 8003db8:	d19b      	bne.n	8003cf2 <_vfiprintf_r+0x26>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	68df      	ldr	r7, [r3, #12]
 8003dbe:	e798      	b.n	8003cf2 <_vfiprintf_r+0x26>
 8003dc0:	0039      	movs	r1, r7
 8003dc2:	9803      	ldr	r0, [sp, #12]
 8003dc4:	f7ff fc3a 	bl	800363c <__swsetup_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d098      	beq.n	8003cfe <_vfiprintf_r+0x32>
 8003dcc:	2001      	movs	r0, #1
 8003dce:	4240      	negs	r0, r0
 8003dd0:	b021      	add	sp, #132	; 0x84
 8003dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	e79b      	b.n	8003d10 <_vfiprintf_r+0x44>
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <_vfiprintf_r+0x210>)
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	1ac0      	subs	r0, r0, r3
 8003dde:	2301      	movs	r3, #1
 8003de0:	4083      	lsls	r3, r0
 8003de2:	4313      	orrs	r3, r2
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	002e      	movs	r6, r5
 8003de8:	e7b8      	b.n	8003d5c <_vfiprintf_r+0x90>
 8003dea:	9b07      	ldr	r3, [sp, #28]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9107      	str	r1, [sp, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db01      	blt.n	8003dfa <_vfiprintf_r+0x12e>
 8003df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003df8:	e004      	b.n	8003e04 <_vfiprintf_r+0x138>
 8003dfa:	425b      	negs	r3, r3
 8003dfc:	60e3      	str	r3, [r4, #12]
 8003dfe:	2302      	movs	r3, #2
 8003e00:	4313      	orrs	r3, r2
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	782b      	ldrb	r3, [r5, #0]
 8003e06:	2b2e      	cmp	r3, #46	; 0x2e
 8003e08:	d10a      	bne.n	8003e20 <_vfiprintf_r+0x154>
 8003e0a:	786b      	ldrb	r3, [r5, #1]
 8003e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0e:	d135      	bne.n	8003e7c <_vfiprintf_r+0x1b0>
 8003e10:	9b07      	ldr	r3, [sp, #28]
 8003e12:	3502      	adds	r5, #2
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9207      	str	r2, [sp, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db2b      	blt.n	8003e76 <_vfiprintf_r+0x1aa>
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	4e31      	ldr	r6, [pc, #196]	; (8003ee8 <_vfiprintf_r+0x21c>)
 8003e22:	7829      	ldrb	r1, [r5, #0]
 8003e24:	2203      	movs	r2, #3
 8003e26:	0030      	movs	r0, r6
 8003e28:	f000 fa98 	bl	800435c <memchr>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d006      	beq.n	8003e3e <_vfiprintf_r+0x172>
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	1b80      	subs	r0, r0, r6
 8003e34:	4083      	lsls	r3, r0
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	3501      	adds	r5, #1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	7829      	ldrb	r1, [r5, #0]
 8003e40:	2206      	movs	r2, #6
 8003e42:	482a      	ldr	r0, [pc, #168]	; (8003eec <_vfiprintf_r+0x220>)
 8003e44:	1c6e      	adds	r6, r5, #1
 8003e46:	7621      	strb	r1, [r4, #24]
 8003e48:	f000 fa88 	bl	800435c <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d03a      	beq.n	8003ec6 <_vfiprintf_r+0x1fa>
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <_vfiprintf_r+0x224>)
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d125      	bne.n	8003ea2 <_vfiprintf_r+0x1d6>
 8003e56:	2207      	movs	r2, #7
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	3308      	adds	r3, #8
 8003e60:	9307      	str	r3, [sp, #28]
 8003e62:	6963      	ldr	r3, [r4, #20]
 8003e64:	9a04      	ldr	r2, [sp, #16]
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	6163      	str	r3, [r4, #20]
 8003e6a:	e750      	b.n	8003d0e <_vfiprintf_r+0x42>
 8003e6c:	4343      	muls	r3, r0
 8003e6e:	2101      	movs	r1, #1
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	0035      	movs	r5, r6
 8003e74:	e790      	b.n	8003d98 <_vfiprintf_r+0xcc>
 8003e76:	2301      	movs	r3, #1
 8003e78:	425b      	negs	r3, r3
 8003e7a:	e7d0      	b.n	8003e1e <_vfiprintf_r+0x152>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	200a      	movs	r0, #10
 8003e80:	001a      	movs	r2, r3
 8003e82:	3501      	adds	r5, #1
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	7829      	ldrb	r1, [r5, #0]
 8003e88:	1c6e      	adds	r6, r5, #1
 8003e8a:	3930      	subs	r1, #48	; 0x30
 8003e8c:	2909      	cmp	r1, #9
 8003e8e:	d903      	bls.n	8003e98 <_vfiprintf_r+0x1cc>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0c5      	beq.n	8003e20 <_vfiprintf_r+0x154>
 8003e94:	9209      	str	r2, [sp, #36]	; 0x24
 8003e96:	e7c3      	b.n	8003e20 <_vfiprintf_r+0x154>
 8003e98:	4342      	muls	r2, r0
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	1852      	adds	r2, r2, r1
 8003e9e:	0035      	movs	r5, r6
 8003ea0:	e7f1      	b.n	8003e86 <_vfiprintf_r+0x1ba>
 8003ea2:	ab07      	add	r3, sp, #28
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	003a      	movs	r2, r7
 8003ea8:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <_vfiprintf_r+0x228>)
 8003eaa:	0021      	movs	r1, r4
 8003eac:	9803      	ldr	r0, [sp, #12]
 8003eae:	e000      	b.n	8003eb2 <_vfiprintf_r+0x1e6>
 8003eb0:	bf00      	nop
 8003eb2:	9004      	str	r0, [sp, #16]
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	d1d3      	bne.n	8003e62 <_vfiprintf_r+0x196>
 8003eba:	89bb      	ldrh	r3, [r7, #12]
 8003ebc:	065b      	lsls	r3, r3, #25
 8003ebe:	d500      	bpl.n	8003ec2 <_vfiprintf_r+0x1f6>
 8003ec0:	e784      	b.n	8003dcc <_vfiprintf_r+0x100>
 8003ec2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003ec4:	e784      	b.n	8003dd0 <_vfiprintf_r+0x104>
 8003ec6:	ab07      	add	r3, sp, #28
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	003a      	movs	r2, r7
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <_vfiprintf_r+0x228>)
 8003ece:	0021      	movs	r1, r4
 8003ed0:	9803      	ldr	r0, [sp, #12]
 8003ed2:	f000 f87f 	bl	8003fd4 <_printf_i>
 8003ed6:	e7ec      	b.n	8003eb2 <_vfiprintf_r+0x1e6>
 8003ed8:	0800448c 	.word	0x0800448c
 8003edc:	080044cc 	.word	0x080044cc
 8003ee0:	080044ac 	.word	0x080044ac
 8003ee4:	0800446c 	.word	0x0800446c
 8003ee8:	080044d2 	.word	0x080044d2
 8003eec:	080044d6 	.word	0x080044d6
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	08003ca7 	.word	0x08003ca7

08003ef8 <_printf_common>:
 8003ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003efa:	0015      	movs	r5, r2
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	688a      	ldr	r2, [r1, #8]
 8003f00:	690b      	ldr	r3, [r1, #16]
 8003f02:	9000      	str	r0, [sp, #0]
 8003f04:	000c      	movs	r4, r1
 8003f06:	4293      	cmp	r3, r2
 8003f08:	da00      	bge.n	8003f0c <_printf_common+0x14>
 8003f0a:	0013      	movs	r3, r2
 8003f0c:	0022      	movs	r2, r4
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	3243      	adds	r2, #67	; 0x43
 8003f12:	7812      	ldrb	r2, [r2, #0]
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d001      	beq.n	8003f1c <_printf_common+0x24>
 8003f18:	3301      	adds	r3, #1
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	069b      	lsls	r3, r3, #26
 8003f20:	d502      	bpl.n	8003f28 <_printf_common+0x30>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	3302      	adds	r3, #2
 8003f26:	602b      	str	r3, [r5, #0]
 8003f28:	2706      	movs	r7, #6
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	401f      	ands	r7, r3
 8003f2e:	d027      	beq.n	8003f80 <_printf_common+0x88>
 8003f30:	0023      	movs	r3, r4
 8003f32:	3343      	adds	r3, #67	; 0x43
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4193      	sbcs	r3, r2
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d430      	bmi.n	8003fa2 <_printf_common+0xaa>
 8003f40:	0022      	movs	r2, r4
 8003f42:	9901      	ldr	r1, [sp, #4]
 8003f44:	3243      	adds	r2, #67	; 0x43
 8003f46:	9800      	ldr	r0, [sp, #0]
 8003f48:	9e08      	ldr	r6, [sp, #32]
 8003f4a:	47b0      	blx	r6
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d025      	beq.n	8003f9c <_printf_common+0xa4>
 8003f50:	2306      	movs	r3, #6
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	682a      	ldr	r2, [r5, #0]
 8003f56:	68e1      	ldr	r1, [r4, #12]
 8003f58:	4003      	ands	r3, r0
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d103      	bne.n	8003f68 <_printf_common+0x70>
 8003f60:	1a8d      	subs	r5, r1, r2
 8003f62:	43eb      	mvns	r3, r5
 8003f64:	17db      	asrs	r3, r3, #31
 8003f66:	401d      	ands	r5, r3
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	6922      	ldr	r2, [r4, #16]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	dd01      	ble.n	8003f74 <_printf_common+0x7c>
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	18ed      	adds	r5, r5, r3
 8003f74:	2700      	movs	r7, #0
 8003f76:	42bd      	cmp	r5, r7
 8003f78:	d120      	bne.n	8003fbc <_printf_common+0xc4>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e010      	b.n	8003fa0 <_printf_common+0xa8>
 8003f7e:	3701      	adds	r7, #1
 8003f80:	68e3      	ldr	r3, [r4, #12]
 8003f82:	682a      	ldr	r2, [r5, #0]
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42bb      	cmp	r3, r7
 8003f88:	ddd2      	ble.n	8003f30 <_printf_common+0x38>
 8003f8a:	0022      	movs	r2, r4
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	3219      	adds	r2, #25
 8003f90:	9901      	ldr	r1, [sp, #4]
 8003f92:	9800      	ldr	r0, [sp, #0]
 8003f94:	9e08      	ldr	r6, [sp, #32]
 8003f96:	47b0      	blx	r6
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d1f0      	bne.n	8003f7e <_printf_common+0x86>
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	4240      	negs	r0, r0
 8003fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fa2:	2030      	movs	r0, #48	; 0x30
 8003fa4:	18e1      	adds	r1, r4, r3
 8003fa6:	3143      	adds	r1, #67	; 0x43
 8003fa8:	7008      	strb	r0, [r1, #0]
 8003faa:	0021      	movs	r1, r4
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	3145      	adds	r1, #69	; 0x45
 8003fb0:	7809      	ldrb	r1, [r1, #0]
 8003fb2:	18a2      	adds	r2, r4, r2
 8003fb4:	3243      	adds	r2, #67	; 0x43
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	7011      	strb	r1, [r2, #0]
 8003fba:	e7c1      	b.n	8003f40 <_printf_common+0x48>
 8003fbc:	0022      	movs	r2, r4
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	321a      	adds	r2, #26
 8003fc2:	9901      	ldr	r1, [sp, #4]
 8003fc4:	9800      	ldr	r0, [sp, #0]
 8003fc6:	9e08      	ldr	r6, [sp, #32]
 8003fc8:	47b0      	blx	r6
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa4>
 8003fce:	3701      	adds	r7, #1
 8003fd0:	e7d1      	b.n	8003f76 <_printf_common+0x7e>
	...

08003fd4 <_printf_i>:
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	9204      	str	r2, [sp, #16]
 8003fda:	000a      	movs	r2, r1
 8003fdc:	3243      	adds	r2, #67	; 0x43
 8003fde:	9305      	str	r3, [sp, #20]
 8003fe0:	9003      	str	r0, [sp, #12]
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	7e0a      	ldrb	r2, [r1, #24]
 8003fe6:	000c      	movs	r4, r1
 8003fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fea:	2a6e      	cmp	r2, #110	; 0x6e
 8003fec:	d100      	bne.n	8003ff0 <_printf_i+0x1c>
 8003fee:	e086      	b.n	80040fe <_printf_i+0x12a>
 8003ff0:	d81f      	bhi.n	8004032 <_printf_i+0x5e>
 8003ff2:	2a63      	cmp	r2, #99	; 0x63
 8003ff4:	d033      	beq.n	800405e <_printf_i+0x8a>
 8003ff6:	d808      	bhi.n	800400a <_printf_i+0x36>
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	d100      	bne.n	8003ffe <_printf_i+0x2a>
 8003ffc:	e08c      	b.n	8004118 <_printf_i+0x144>
 8003ffe:	2a58      	cmp	r2, #88	; 0x58
 8004000:	d04d      	beq.n	800409e <_printf_i+0xca>
 8004002:	0025      	movs	r5, r4
 8004004:	3542      	adds	r5, #66	; 0x42
 8004006:	702a      	strb	r2, [r5, #0]
 8004008:	e030      	b.n	800406c <_printf_i+0x98>
 800400a:	2a64      	cmp	r2, #100	; 0x64
 800400c:	d001      	beq.n	8004012 <_printf_i+0x3e>
 800400e:	2a69      	cmp	r2, #105	; 0x69
 8004010:	d1f7      	bne.n	8004002 <_printf_i+0x2e>
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1d0a      	adds	r2, r1, #4
 8004018:	0628      	lsls	r0, r5, #24
 800401a:	d529      	bpl.n	8004070 <_printf_i+0x9c>
 800401c:	6808      	ldr	r0, [r1, #0]
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	2800      	cmp	r0, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0x58>
 8004024:	232d      	movs	r3, #45	; 0x2d
 8004026:	9a02      	ldr	r2, [sp, #8]
 8004028:	4240      	negs	r0, r0
 800402a:	7013      	strb	r3, [r2, #0]
 800402c:	4e6b      	ldr	r6, [pc, #428]	; (80041dc <_printf_i+0x208>)
 800402e:	270a      	movs	r7, #10
 8004030:	e04f      	b.n	80040d2 <_printf_i+0xfe>
 8004032:	2a73      	cmp	r2, #115	; 0x73
 8004034:	d074      	beq.n	8004120 <_printf_i+0x14c>
 8004036:	d808      	bhi.n	800404a <_printf_i+0x76>
 8004038:	2a6f      	cmp	r2, #111	; 0x6f
 800403a:	d01f      	beq.n	800407c <_printf_i+0xa8>
 800403c:	2a70      	cmp	r2, #112	; 0x70
 800403e:	d1e0      	bne.n	8004002 <_printf_i+0x2e>
 8004040:	2220      	movs	r2, #32
 8004042:	6809      	ldr	r1, [r1, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	6022      	str	r2, [r4, #0]
 8004048:	e003      	b.n	8004052 <_printf_i+0x7e>
 800404a:	2a75      	cmp	r2, #117	; 0x75
 800404c:	d016      	beq.n	800407c <_printf_i+0xa8>
 800404e:	2a78      	cmp	r2, #120	; 0x78
 8004050:	d1d7      	bne.n	8004002 <_printf_i+0x2e>
 8004052:	0022      	movs	r2, r4
 8004054:	2178      	movs	r1, #120	; 0x78
 8004056:	3245      	adds	r2, #69	; 0x45
 8004058:	7011      	strb	r1, [r2, #0]
 800405a:	4e61      	ldr	r6, [pc, #388]	; (80041e0 <_printf_i+0x20c>)
 800405c:	e022      	b.n	80040a4 <_printf_i+0xd0>
 800405e:	0025      	movs	r5, r4
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	3542      	adds	r5, #66	; 0x42
 8004064:	1d11      	adds	r1, r2, #4
 8004066:	6019      	str	r1, [r3, #0]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	702b      	strb	r3, [r5, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	e065      	b.n	800413c <_printf_i+0x168>
 8004070:	6808      	ldr	r0, [r1, #0]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	0669      	lsls	r1, r5, #25
 8004076:	d5d3      	bpl.n	8004020 <_printf_i+0x4c>
 8004078:	b200      	sxth	r0, r0
 800407a:	e7d1      	b.n	8004020 <_printf_i+0x4c>
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	6825      	ldr	r5, [r4, #0]
 8004080:	1d08      	adds	r0, r1, #4
 8004082:	6018      	str	r0, [r3, #0]
 8004084:	6808      	ldr	r0, [r1, #0]
 8004086:	062e      	lsls	r6, r5, #24
 8004088:	d505      	bpl.n	8004096 <_printf_i+0xc2>
 800408a:	4e54      	ldr	r6, [pc, #336]	; (80041dc <_printf_i+0x208>)
 800408c:	2708      	movs	r7, #8
 800408e:	2a6f      	cmp	r2, #111	; 0x6f
 8004090:	d01b      	beq.n	80040ca <_printf_i+0xf6>
 8004092:	270a      	movs	r7, #10
 8004094:	e019      	b.n	80040ca <_printf_i+0xf6>
 8004096:	066d      	lsls	r5, r5, #25
 8004098:	d5f7      	bpl.n	800408a <_printf_i+0xb6>
 800409a:	b280      	uxth	r0, r0
 800409c:	e7f5      	b.n	800408a <_printf_i+0xb6>
 800409e:	3145      	adds	r1, #69	; 0x45
 80040a0:	4e4e      	ldr	r6, [pc, #312]	; (80041dc <_printf_i+0x208>)
 80040a2:	700a      	strb	r2, [r1, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	1d01      	adds	r1, r0, #4
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	6019      	str	r1, [r3, #0]
 80040ae:	0615      	lsls	r5, r2, #24
 80040b0:	d521      	bpl.n	80040f6 <_printf_i+0x122>
 80040b2:	07d3      	lsls	r3, r2, #31
 80040b4:	d502      	bpl.n	80040bc <_printf_i+0xe8>
 80040b6:	2320      	movs	r3, #32
 80040b8:	431a      	orrs	r2, r3
 80040ba:	6022      	str	r2, [r4, #0]
 80040bc:	2710      	movs	r7, #16
 80040be:	2800      	cmp	r0, #0
 80040c0:	d103      	bne.n	80040ca <_printf_i+0xf6>
 80040c2:	2320      	movs	r3, #32
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	439a      	bics	r2, r3
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	0023      	movs	r3, r4
 80040cc:	2200      	movs	r2, #0
 80040ce:	3343      	adds	r3, #67	; 0x43
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	6863      	ldr	r3, [r4, #4]
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	db58      	blt.n	800418c <_printf_i+0x1b8>
 80040da:	2204      	movs	r2, #4
 80040dc:	6821      	ldr	r1, [r4, #0]
 80040de:	4391      	bics	r1, r2
 80040e0:	6021      	str	r1, [r4, #0]
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d154      	bne.n	8004190 <_printf_i+0x1bc>
 80040e6:	9d02      	ldr	r5, [sp, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05a      	beq.n	80041a2 <_printf_i+0x1ce>
 80040ec:	0025      	movs	r5, r4
 80040ee:	7833      	ldrb	r3, [r6, #0]
 80040f0:	3542      	adds	r5, #66	; 0x42
 80040f2:	702b      	strb	r3, [r5, #0]
 80040f4:	e055      	b.n	80041a2 <_printf_i+0x1ce>
 80040f6:	0655      	lsls	r5, r2, #25
 80040f8:	d5db      	bpl.n	80040b2 <_printf_i+0xde>
 80040fa:	b280      	uxth	r0, r0
 80040fc:	e7d9      	b.n	80040b2 <_printf_i+0xde>
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	680d      	ldr	r5, [r1, #0]
 8004102:	1d10      	adds	r0, r2, #4
 8004104:	6949      	ldr	r1, [r1, #20]
 8004106:	6018      	str	r0, [r3, #0]
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	062e      	lsls	r6, r5, #24
 800410c:	d501      	bpl.n	8004112 <_printf_i+0x13e>
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	e002      	b.n	8004118 <_printf_i+0x144>
 8004112:	066d      	lsls	r5, r5, #25
 8004114:	d5fb      	bpl.n	800410e <_printf_i+0x13a>
 8004116:	8019      	strh	r1, [r3, #0]
 8004118:	2300      	movs	r3, #0
 800411a:	9d02      	ldr	r5, [sp, #8]
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	e04f      	b.n	80041c0 <_printf_i+0x1ec>
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	1d11      	adds	r1, r2, #4
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	6815      	ldr	r5, [r2, #0]
 8004128:	2100      	movs	r1, #0
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	0028      	movs	r0, r5
 800412e:	f000 f915 	bl	800435c <memchr>
 8004132:	2800      	cmp	r0, #0
 8004134:	d001      	beq.n	800413a <_printf_i+0x166>
 8004136:	1b40      	subs	r0, r0, r5
 8004138:	6060      	str	r0, [r4, #4]
 800413a:	6863      	ldr	r3, [r4, #4]
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	2300      	movs	r3, #0
 8004140:	9a02      	ldr	r2, [sp, #8]
 8004142:	7013      	strb	r3, [r2, #0]
 8004144:	e03c      	b.n	80041c0 <_printf_i+0x1ec>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	002a      	movs	r2, r5
 800414a:	9904      	ldr	r1, [sp, #16]
 800414c:	9803      	ldr	r0, [sp, #12]
 800414e:	9d05      	ldr	r5, [sp, #20]
 8004150:	47a8      	blx	r5
 8004152:	1c43      	adds	r3, r0, #1
 8004154:	d03e      	beq.n	80041d4 <_printf_i+0x200>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	079b      	lsls	r3, r3, #30
 800415a:	d415      	bmi.n	8004188 <_printf_i+0x1b4>
 800415c:	9b07      	ldr	r3, [sp, #28]
 800415e:	68e0      	ldr	r0, [r4, #12]
 8004160:	4298      	cmp	r0, r3
 8004162:	da39      	bge.n	80041d8 <_printf_i+0x204>
 8004164:	0018      	movs	r0, r3
 8004166:	e037      	b.n	80041d8 <_printf_i+0x204>
 8004168:	0022      	movs	r2, r4
 800416a:	2301      	movs	r3, #1
 800416c:	3219      	adds	r2, #25
 800416e:	9904      	ldr	r1, [sp, #16]
 8004170:	9803      	ldr	r0, [sp, #12]
 8004172:	9e05      	ldr	r6, [sp, #20]
 8004174:	47b0      	blx	r6
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d02c      	beq.n	80041d4 <_printf_i+0x200>
 800417a:	3501      	adds	r5, #1
 800417c:	68e3      	ldr	r3, [r4, #12]
 800417e:	9a07      	ldr	r2, [sp, #28]
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	42ab      	cmp	r3, r5
 8004184:	dcf0      	bgt.n	8004168 <_printf_i+0x194>
 8004186:	e7e9      	b.n	800415c <_printf_i+0x188>
 8004188:	2500      	movs	r5, #0
 800418a:	e7f7      	b.n	800417c <_printf_i+0x1a8>
 800418c:	2800      	cmp	r0, #0
 800418e:	d0ad      	beq.n	80040ec <_printf_i+0x118>
 8004190:	9d02      	ldr	r5, [sp, #8]
 8004192:	0039      	movs	r1, r7
 8004194:	f7fc f83e 	bl	8000214 <__aeabi_uidivmod>
 8004198:	5c73      	ldrb	r3, [r6, r1]
 800419a:	3d01      	subs	r5, #1
 800419c:	702b      	strb	r3, [r5, #0]
 800419e:	2800      	cmp	r0, #0
 80041a0:	d1f7      	bne.n	8004192 <_printf_i+0x1be>
 80041a2:	2f08      	cmp	r7, #8
 80041a4:	d109      	bne.n	80041ba <_printf_i+0x1e6>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	07db      	lsls	r3, r3, #31
 80041aa:	d506      	bpl.n	80041ba <_printf_i+0x1e6>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	6922      	ldr	r2, [r4, #16]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	dc02      	bgt.n	80041ba <_printf_i+0x1e6>
 80041b4:	2330      	movs	r3, #48	; 0x30
 80041b6:	3d01      	subs	r5, #1
 80041b8:	702b      	strb	r3, [r5, #0]
 80041ba:	9b02      	ldr	r3, [sp, #8]
 80041bc:	1b5b      	subs	r3, r3, r5
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	9b05      	ldr	r3, [sp, #20]
 80041c2:	aa07      	add	r2, sp, #28
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	0021      	movs	r1, r4
 80041c8:	9b04      	ldr	r3, [sp, #16]
 80041ca:	9803      	ldr	r0, [sp, #12]
 80041cc:	f7ff fe94 	bl	8003ef8 <_printf_common>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d1b8      	bne.n	8004146 <_printf_i+0x172>
 80041d4:	2001      	movs	r0, #1
 80041d6:	4240      	negs	r0, r0
 80041d8:	b009      	add	sp, #36	; 0x24
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041dc:	080044dd 	.word	0x080044dd
 80041e0:	080044ee 	.word	0x080044ee

080041e4 <_sbrk_r>:
 80041e4:	2300      	movs	r3, #0
 80041e6:	b570      	push	{r4, r5, r6, lr}
 80041e8:	4c06      	ldr	r4, [pc, #24]	; (8004204 <_sbrk_r+0x20>)
 80041ea:	0005      	movs	r5, r0
 80041ec:	0008      	movs	r0, r1
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	f7fc ff36 	bl	8001060 <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d103      	bne.n	8004200 <_sbrk_r+0x1c>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d000      	beq.n	8004200 <_sbrk_r+0x1c>
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000218 	.word	0x20000218

08004208 <__sread>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	000c      	movs	r4, r1
 800420c:	250e      	movs	r5, #14
 800420e:	5f49      	ldrsh	r1, [r1, r5]
 8004210:	f000 f8b2 	bl	8004378 <_read_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	db03      	blt.n	8004220 <__sread+0x18>
 8004218:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800421a:	181b      	adds	r3, r3, r0
 800421c:	6563      	str	r3, [r4, #84]	; 0x54
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	4a02      	ldr	r2, [pc, #8]	; (800422c <__sread+0x24>)
 8004224:	4013      	ands	r3, r2
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	e7f9      	b.n	800421e <__sread+0x16>
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	ffffefff 	.word	0xffffefff

08004230 <__swrite>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	001f      	movs	r7, r3
 8004234:	898b      	ldrh	r3, [r1, #12]
 8004236:	0005      	movs	r5, r0
 8004238:	000c      	movs	r4, r1
 800423a:	0016      	movs	r6, r2
 800423c:	05db      	lsls	r3, r3, #23
 800423e:	d505      	bpl.n	800424c <__swrite+0x1c>
 8004240:	230e      	movs	r3, #14
 8004242:	5ec9      	ldrsh	r1, [r1, r3]
 8004244:	2200      	movs	r2, #0
 8004246:	2302      	movs	r3, #2
 8004248:	f000 f874 	bl	8004334 <_lseek_r>
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <__swrite+0x34>)
 8004250:	0028      	movs	r0, r5
 8004252:	4013      	ands	r3, r2
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	0032      	movs	r2, r6
 8004258:	230e      	movs	r3, #14
 800425a:	5ee1      	ldrsh	r1, [r4, r3]
 800425c:	003b      	movs	r3, r7
 800425e:	f000 f81f 	bl	80042a0 <_write_r>
 8004262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004264:	ffffefff 	.word	0xffffefff

08004268 <__sseek>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	000c      	movs	r4, r1
 800426c:	250e      	movs	r5, #14
 800426e:	5f49      	ldrsh	r1, [r1, r5]
 8004270:	f000 f860 	bl	8004334 <_lseek_r>
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	1c42      	adds	r2, r0, #1
 8004278:	d103      	bne.n	8004282 <__sseek+0x1a>
 800427a:	4a05      	ldr	r2, [pc, #20]	; (8004290 <__sseek+0x28>)
 800427c:	4013      	ands	r3, r2
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	0152      	lsls	r2, r2, #5
 8004286:	4313      	orrs	r3, r2
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	6560      	str	r0, [r4, #84]	; 0x54
 800428c:	e7f8      	b.n	8004280 <__sseek+0x18>
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	ffffefff 	.word	0xffffefff

08004294 <__sclose>:
 8004294:	b510      	push	{r4, lr}
 8004296:	230e      	movs	r3, #14
 8004298:	5ec9      	ldrsh	r1, [r1, r3]
 800429a:	f000 f815 	bl	80042c8 <_close_r>
 800429e:	bd10      	pop	{r4, pc}

080042a0 <_write_r>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	0005      	movs	r5, r0
 80042a4:	0008      	movs	r0, r1
 80042a6:	0011      	movs	r1, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	4c06      	ldr	r4, [pc, #24]	; (80042c4 <_write_r+0x24>)
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	001a      	movs	r2, r3
 80042b0:	f7fc fd64 	bl	8000d7c <_write>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d103      	bne.n	80042c0 <_write_r+0x20>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d000      	beq.n	80042c0 <_write_r+0x20>
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	20000218 	.word	0x20000218

080042c8 <_close_r>:
 80042c8:	2300      	movs	r3, #0
 80042ca:	b570      	push	{r4, r5, r6, lr}
 80042cc:	4c06      	ldr	r4, [pc, #24]	; (80042e8 <_close_r+0x20>)
 80042ce:	0005      	movs	r5, r0
 80042d0:	0008      	movs	r0, r1
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	f7fc fd80 	bl	8000dd8 <_close>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d103      	bne.n	80042e4 <_close_r+0x1c>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <_close_r+0x1c>
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000218 	.word	0x20000218

080042ec <_fstat_r>:
 80042ec:	2300      	movs	r3, #0
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	4c06      	ldr	r4, [pc, #24]	; (800430c <_fstat_r+0x20>)
 80042f2:	0005      	movs	r5, r0
 80042f4:	0008      	movs	r0, r1
 80042f6:	0011      	movs	r1, r2
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	f7fc fdbf 	bl	8000e7c <_fstat>
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	d103      	bne.n	800430a <_fstat_r+0x1e>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d000      	beq.n	800430a <_fstat_r+0x1e>
 8004308:	602b      	str	r3, [r5, #0]
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	20000218 	.word	0x20000218

08004310 <_isatty_r>:
 8004310:	2300      	movs	r3, #0
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	4c06      	ldr	r4, [pc, #24]	; (8004330 <_isatty_r+0x20>)
 8004316:	0005      	movs	r5, r0
 8004318:	0008      	movs	r0, r1
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	f7fc fd18 	bl	8000d50 <_isatty>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d103      	bne.n	800432c <_isatty_r+0x1c>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <_isatty_r+0x1c>
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	bd70      	pop	{r4, r5, r6, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000218 	.word	0x20000218

08004334 <_lseek_r>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	0005      	movs	r5, r0
 8004338:	0008      	movs	r0, r1
 800433a:	0011      	movs	r1, r2
 800433c:	2200      	movs	r2, #0
 800433e:	4c06      	ldr	r4, [pc, #24]	; (8004358 <_lseek_r+0x24>)
 8004340:	6022      	str	r2, [r4, #0]
 8004342:	001a      	movs	r2, r3
 8004344:	f7fc fd5f 	bl	8000e06 <_lseek>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d103      	bne.n	8004354 <_lseek_r+0x20>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d000      	beq.n	8004354 <_lseek_r+0x20>
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	20000218 	.word	0x20000218

0800435c <memchr>:
 800435c:	b2c9      	uxtb	r1, r1
 800435e:	1882      	adds	r2, r0, r2
 8004360:	4290      	cmp	r0, r2
 8004362:	d101      	bne.n	8004368 <memchr+0xc>
 8004364:	2000      	movs	r0, #0
 8004366:	4770      	bx	lr
 8004368:	7803      	ldrb	r3, [r0, #0]
 800436a:	428b      	cmp	r3, r1
 800436c:	d0fb      	beq.n	8004366 <memchr+0xa>
 800436e:	3001      	adds	r0, #1
 8004370:	e7f6      	b.n	8004360 <memchr+0x4>

08004372 <__malloc_lock>:
 8004372:	4770      	bx	lr

08004374 <__malloc_unlock>:
 8004374:	4770      	bx	lr
	...

08004378 <_read_r>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	0005      	movs	r5, r0
 800437c:	0008      	movs	r0, r1
 800437e:	0011      	movs	r1, r2
 8004380:	2200      	movs	r2, #0
 8004382:	4c06      	ldr	r4, [pc, #24]	; (800439c <_read_r+0x24>)
 8004384:	6022      	str	r2, [r4, #0]
 8004386:	001a      	movs	r2, r3
 8004388:	f7fc fd4e 	bl	8000e28 <_read>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d103      	bne.n	8004398 <_read_r+0x20>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <_read_r+0x20>
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000218 	.word	0x20000218

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
